{
  "resourceType": "Library",
  "id": "library-OHSUHTNCommon",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/ohsuhypertensionig/Library/OHSUHTNCommon",
  "version": "0.1",
  "name": "OHSUHTNCommon",
  "title": "Common Logic",
  "description": "Common logic spanning multiple interventions.",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}