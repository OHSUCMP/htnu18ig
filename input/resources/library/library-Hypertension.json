{
  "resourceType": "Library",
  "id": "library-Hypertension",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2020-04-15T12:00:00.000-07:00"
  },
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/ohsu/htnu18ig/Library/Hypertension",
  "version": "0.1",
  "name": "Hypertension",
  "title": "Library - OHSU Logic for identifying hypertension",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [ {
      "system": "http://hl7.org/fhir/library-type",
      "code": "logic-library",
      "display": "Logic Library"
    } ]
  },
  "date": "2020-04-15T00:00:00-08:00",
  "publisher": "Oregon Health and Science University (OHSU)",
  "description": "Identifies hypertension",
  "useContext": [ {
    "code": {
      "system": "http://hl7.org/fhir/usage-context-type",
      "code": "focus",
      "display": "Clinical Focus"
    }
  } ],
  "jurisdiction": [ {
    "coding": [ {
      "system": "urn:iso:std:iso:3166",
      "code": "US",
      "display": "United States of America"
    } ]
  } ],
  "purpose": "The purpose of this is to act as a 'hello world' sort of simple logic for testing end-to-end processing of the system.",
  "usage": "This is to be used in conjunction with a patient-facing FHIR application.",
  "copyright": "Â© OHSU 2020+.",
  "topic": [ {
    "text": "Hypertension Management"
  } ],
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Common",
    "resource": "http://fhir.org/guides/ohsu/htnu18ig/Library/OHSUHTNCommon|0.1"
  }, {
    "type": "depends-on",
    "display": "Code system v3 Code System ActCode",
    "resource": "http://terminology.hl7.org/CodeSystem/v3-ActCode"
  }, {
    "type": "depends-on",
    "display": "Code system ConditionVerificationStatusCodes",
    "resource": "http://terminology.hl7.org/CodeSystem/condition-ver-status"
  }, {
    "type": "depends-on",
    "display": "Code system ConditionCategorySystem",
    "resource": "http://terminology.hl7.org/CodeSystem/condition-category"
  }, {
    "type": "depends-on",
    "display": "Value set Systolic blood pressure",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1104.2"
  }, {
    "type": "depends-on",
    "display": "Value set Diastolic Blood Pressure",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1045"
  }, {
    "type": "depends-on",
    "display": "Value set End Stage Renal Disease",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.590"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.378"
  }, {
    "type": "depends-on",
    "display": "Value set Systolic blood pressure",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1104.2"
  }, {
    "type": "depends-on",
    "display": "Value set Diastolic Blood Pressure",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1045"
  }, {
    "type": "depends-on",
    "display": "Value set Blood Pressure Measured",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.2012"
  }, {
    "type": "depends-on",
    "display": "Value set Hypertension",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.3157.4012"
  }, {
    "type": "depends-on",
    "display": "Value set Non essential Hypertension SNOMEDCT",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1032.10"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Info",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Warning",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Critical",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Errors",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Patient Name",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Meets Inclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Meets Exclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Under Age 18",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Over Age 80",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Condition Indicating End Stage Renal Disease",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Conditions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Condition Indicating Pregnancy",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "HTN Crisis",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "BP Within 14 days",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Most Recent BP Reading",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Observation"
  }, {
    "name": "Blood Pressure Observations",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "In Population",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Has HTN Stage 2 BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Has Potential HTN Stage 2 BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Most Recent BP Set",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood Pressure Observations for Last 2 Years",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HTN Stage 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Consider HTN Stage 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Consider HTN Stage 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Prescribe Monitoring to Confirm HTN",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Has Potential HTN Stage 1 BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Recommendation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Rationale",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Suggestions",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Selection Behavior",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Links",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Rationale Combined Data",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Indicator Status",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Exclusion Reason",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Diagnosis of Preexisting Hypertension",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Condition Indicating Preexisting Hypertension",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Test Patient Age on BP Reading",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Test Count All BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Test Most Recent BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Test Get All BP Observation Resources",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Test Get Most Recent BP Set",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Test All BP Last 2 Years",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Test Get Average All BP Last 2 Years",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Test Get Average Most Recent BP Set",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Test Get All BP SBP Coefficient Variability",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "decimal"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "category",
      "code": [ {
        "system": "http://terminology.hl7.org/CodeSystem/condition-category",
        "code": "problem-list-item",
        "display": "Problem List Item"
      } ]
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "category",
      "code": [ {
        "system": "http://terminology.hl7.org/CodeSystem/condition-category",
        "code": "encounter-diagnosis",
        "display": "Encounter Diagnosis"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.2012"
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}