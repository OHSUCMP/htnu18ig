{
  "resourceType": "Library",
  "id": "FHIRHelpers",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://hl7.org/fhir/Library/FHIRHelpers",
  "version": "4.0.1",
  "name": "FHIRHelpers",
  "title": "FHIRHelpers R4 Logic",
  "description": "FHIRHelpers R4 conversion logic library",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "library FHIRHelpers version '4.0.1'

using FHIR version '4.0.1'

define function ToInterval(period FHIR.Period):
    if period is null then
        null
    else
        if period."start" is null then
            Interval(period."start".value, period."end".value]
        else
            Interval[period."start".value, period."end".value]

define function ToCalendarUnit(unit System.String):
    case unit
        when 'ms' then 'millisecond'
        when 's' then 'second'
        when 'min' then 'minute'
        when 'h' then 'hour'
        when 'd' then 'day'
        when 'wk' then 'week'
        when 'mo' then 'month'
        when 'a' then 'year'
        else unit
    end

define function ToQuantity(quantity FHIR.Quantity):
    case
        when quantity is null then null
        when quantity.value is null then null
        when quantity.comparator is not null then
            Message(null, true, 'FHIRHelpers.ToQuantity.ComparatorQuantityNotSupported', 'Error', 'FHIR Quantity value has a comparator and cannot be converted to a System.Quantity value.')
        when quantity.system is null or quantity.system.value = 'http://unitsofmeasure.org'
              or quantity.system.value = 'http://hl7.org/fhirpath/CodeSystem/calendar-units' then
            System.Quantity { value: quantity.value.value, unit: ToCalendarUnit(Coalesce(quantity.code.value, quantity.unit.value, '1')) }
        else
            Message(null, true, 'FHIRHelpers.ToQuantity.InvalidFHIRQuantity', 'Error', 'Invalid FHIR Quantity code: ' & quantity.unit.value & ' (' & quantity.system.value & '|' & quantity.code.value & ')')
    end

define function ToQuantityIgnoringComparator(quantity FHIR.Quantity):
    case
        when quantity is null then null
        when quantity.value is null then null
        when quantity.system is null or quantity.system.value = 'http://unitsofmeasure.org'
              or quantity.system.value = 'http://hl7.org/fhirpath/CodeSystem/calendar-units' then
            System.Quantity { value: quantity.value.value, unit: ToCalendarUnit(Coalesce(quantity.code.value, quantity.unit.value, '1')) }
        else
            Message(null, true, 'FHIRHelpers.ToQuantity.InvalidFHIRQuantity', 'Error', 'Invalid FHIR Quantity code: ' & quantity.unit.value & ' (' & quantity.system.value & '|' & quantity.code.value & ')')
    end

define function ToInterval(quantity FHIR.Quantity):
    if quantity is null then null else
        case quantity.comparator.value
            when '<' then
                Interval[
                    null,
                    ToQuantityIgnoringComparator(quantity)
                )
            when '<=' then
                Interval[
                    null,
                    ToQuantityIgnoringComparator(quantity)
                ]
            when '>=' then
                Interval[
                    ToQuantityIgnoringComparator(quantity),
                    null
                ]
            when '>' then
                Interval(
                    ToQuantityIgnoringComparator(quantity),
                    null
                ]
            else
                Interval[ToQuantity(quantity), ToQuantity(quantity)]
        end

define function ToRatio(ratio FHIR.Ratio):
    if ratio is null then
        null
    else
        System.Ratio { numerator: ToQuantity(ratio.numerator), denominator: ToQuantity(ratio.denominator) }

define function ToInterval(range FHIR.Range):
    if range is null then
        null
    else
        Interval[ToQuantity(range.low), ToQuantity(range.high)]

define function ToCode(coding FHIR.Coding):
    if coding is null then
        null
    else
        System.Code {
          code: coding.code.value,
          system: coding.system.value,
          version: coding.version.value,
          display: coding.display.value
        }

define function ToConcept(concept FHIR.CodeableConcept):
    if concept is null then
        null
    else
        System.Concept {
            codes: concept.coding C return ToCode(C),
            display: concept.text.value
        }


define function ToString(value AccountStatus): value.value
define function ToString(value ActionCardinalityBehavior): value.value
define function ToString(value ActionConditionKind): value.value
define function ToString(value ActionGroupingBehavior): value.value
define function ToString(value ActionParticipantType): value.value
define function ToString(value ActionPrecheckBehavior): value.value
define function ToString(value ActionRelationshipType): value.value
define function ToString(value ActionRequiredBehavior): value.value
define function ToString(value ActionSelectionBehavior): value.value
define function ToString(value ActivityDefinitionKind): value.value
define function ToString(value ActivityParticipantType): value.value
define function ToString(value AddressType): value.value
define function ToString(value AddressUse): value.value
define function ToString(value AdministrativeGender): value.value
define function ToString(value AdverseEventActuality): value.value
define function ToString(value AggregationMode): value.value
define function ToString(value AllergyIntoleranceCategory): value.value
define function ToString(value AllergyIntoleranceCriticality): value.value
define function ToString(value AllergyIntoleranceSeverity): value.value
define function ToString(value AllergyIntoleranceType): value.value
define function ToString(value AppointmentStatus): value.value
define function ToString(value AssertionDirectionType): value.value
define function ToString(value AssertionOperatorType): value.value
define function ToString(value AssertionResponseTypes): value.value
define function ToString(value AuditEventAction): value.value
define function ToString(value AuditEventAgentNetworkType): value.value
define function ToString(value AuditEventOutcome): value.value
define function ToString(value BindingStrength): value.value
define function ToString(value BiologicallyDerivedProductCategory): value.value
define function ToString(value BiologicallyDerivedProductStatus): value.value
define function ToString(value BiologicallyDerivedProductStorageScale): value.value
define function ToString(value BundleType): value.value
define function ToString(value CapabilityStatementKind): value.value
define function ToString(value CarePlanActivityKind): value.value
define function ToString(value CarePlanActivityStatus): value.value
define function ToString(value CarePlanIntent): value.value
define function ToString(value CarePlanStatus): value.value
define function ToString(value CareTeamStatus): value.value
define function ToString(value CatalogEntryRelationType): value.value
define function ToString(value ChargeItemDefinitionPriceComponentType): value.value
define function ToString(value ChargeItemStatus): value.value
define function ToString(value ClaimResponseStatus): value.value
define function ToString(value ClaimStatus): value.value
define function ToString(value ClinicalImpressionStatus): value.value
define function ToString(value CodeSearchSupport): value.value
define function ToString(value CodeSystemContentMode): value.value
define function ToString(value CodeSystemHierarchyMeaning): value.value
define function ToString(value CommunicationPriority): value.value
define function ToString(value CommunicationRequestStatus): value.value
define function ToString(value CommunicationStatus): value.value
define function ToString(value CompartmentCode): value.value
define function ToString(value CompartmentType): value.value
define function ToString(value CompositionAttestationMode): value.value
define function ToString(value CompositionStatus): value.value
define function ToString(value ConceptMapEquivalence): value.value
define function ToString(value ConceptMapGroupUnmappedMode): value.value
define function ToString(value ConditionalDeleteStatus): value.value
define function ToString(value ConditionalReadStatus): value.value
define function ToString(value ConsentDataMeaning): value.value
define function ToString(value ConsentProvisionType): value.value
define function ToString(value ConsentState): value.value
define function ToString(value ConstraintSeverity): value.value
define function ToString(value ContactPointSystem): value.value
define function ToString(value ContactPointUse): value.value
define function ToString(value ContractPublicationStatus): value.value
define function ToString(value ContractStatus): value.value
define function ToString(value ContributorType): value.value
define function ToString(value CoverageStatus): value.value
define function ToString(value CurrencyCode): value.value
define function ToString(value DayOfWeek): value.value
define function ToString(value DaysOfWeek): value.value
define function ToString(value DetectedIssueSeverity): value.value
define function ToString(value DetectedIssueStatus): value.value
define function ToString(value DeviceMetricCalibrationState): value.value
define function ToString(value DeviceMetricCalibrationType): value.value
define function ToString(value DeviceMetricCategory): value.value
define function ToString(value DeviceMetricColor): value.value
define function ToString(value DeviceMetricOperationalStatus): value.value
define function ToString(value DeviceNameType): value.value
define function ToString(value DeviceRequestStatus): value.value
define function ToString(value DeviceUseStatementStatus): value.value
define function ToString(value DiagnosticReportStatus): value.value
define function ToString(value DiscriminatorType): value.value
define function ToString(value DocumentConfidentiality): value.value
define function ToString(value DocumentMode): value.value
define function ToString(value DocumentReferenceStatus): value.value
define function ToString(value DocumentRelationshipType): value.value
define function ToString(value EligibilityRequestPurpose): value.value
define function ToString(value EligibilityRequestStatus): value.value
define function ToString(value EligibilityResponsePurpose): value.value
define function ToString(value EligibilityResponseStatus): value.value
define function ToString(value EnableWhenBehavior): value.value
define function ToString(value EncounterLocationStatus): value.value
define function ToString(value EncounterStatus): value.value
define function ToString(value EndpointStatus): value.value
define function ToString(value EnrollmentRequestStatus): value.value
define function ToString(value EnrollmentResponseStatus): value.value
define function ToString(value EpisodeOfCareStatus): value.value
define function ToString(value EventCapabilityMode): value.value
define function ToString(value EventTiming): value.value
define function ToString(value EvidenceVariableType): value.value
define function ToString(value ExampleScenarioActorType): value.value
define function ToString(value ExplanationOfBenefitStatus): value.value
define function ToString(value ExposureState): value.value
define function ToString(value ExtensionContextType): value.value
define function ToString(value FHIRAllTypes): value.value
define function ToString(value FHIRDefinedType): value.value
define function ToString(value FHIRDeviceStatus): value.value
define function ToString(value FHIRResourceType): value.value
define function ToString(value FHIRSubstanceStatus): value.value
define function ToString(value FHIRVersion): value.value
define function ToString(value FamilyHistoryStatus): value.value
define function ToString(value FilterOperator): value.value
define function ToString(value FlagStatus): value.value
define function ToString(value GoalLifecycleStatus): value.value
define function ToString(value GraphCompartmentRule): value.value
define function ToString(value GraphCompartmentUse): value.value
define function ToString(value GroupMeasure): value.value
define function ToString(value GroupType): value.value
define function ToString(value GuidanceResponseStatus): value.value
define function ToString(value GuidePageGeneration): value.value
define function ToString(value GuideParameterCode): value.value
define function ToString(value HTTPVerb): value.value
define function ToString(value IdentifierUse): value.value
define function ToString(value IdentityAssuranceLevel): value.value
define function ToString(value ImagingStudyStatus): value.value
define function ToString(value ImmunizationEvaluationStatus): value.value
define function ToString(value ImmunizationStatus): value.value
define function ToString(value InvoicePriceComponentType): value.value
define function ToString(value InvoiceStatus): value.value
define function ToString(value IssueSeverity): value.value
define function ToString(value IssueType): value.value
define function ToString(value LinkType): value.value
define function ToString(value LinkageType): value.value
define function ToString(value ListMode): value.value
define function ToString(value ListStatus): value.value
define function ToString(value LocationMode): value.value
define function ToString(value LocationStatus): value.value
define function ToString(value MeasureReportStatus): value.value
define function ToString(value MeasureReportType): value.value
define function ToString(value MediaStatus): value.value
define function ToString(value MedicationAdministrationStatus): value.value
define function ToString(value MedicationDispenseStatus): value.value
define function ToString(value MedicationKnowledgeStatus): value.value
define function ToString(value MedicationRequestIntent): value.value
define function ToString(value MedicationRequestPriority): value.value
define function ToString(value MedicationRequestStatus): value.value
define function ToString(value MedicationStatementStatus): value.value
define function ToString(value MedicationStatus): value.value
define function ToString(value MessageSignificanceCategory): value.value
define function ToString(value Messageheader_Response_Request): value.value
define function ToString(value MimeType): value.value
define function ToString(value NameUse): value.value
define function ToString(value NamingSystemIdentifierType): value.value
define function ToString(value NamingSystemType): value.value
define function ToString(value NarrativeStatus): value.value
define function ToString(value NoteType): value.value
define function ToString(value NutritiionOrderIntent): value.value
define function ToString(value NutritionOrderStatus): value.value
define function ToString(value ObservationDataType): value.value
define function ToString(value ObservationRangeCategory): value.value
define function ToString(value ObservationStatus): value.value
define function ToString(value OperationKind): value.value
define function ToString(value OperationParameterUse): value.value
define function ToString(value OrientationType): value.value
define function ToString(value ParameterUse): value.value
define function ToString(value ParticipantRequired): value.value
define function ToString(value ParticipantStatus): value.value
define function ToString(value ParticipationStatus): value.value
define function ToString(value PaymentNoticeStatus): value.value
define function ToString(value PaymentReconciliationStatus): value.value
define function ToString(value ProcedureStatus): value.value
define function ToString(value PropertyRepresentation): value.value
define function ToString(value PropertyType): value.value
define function ToString(value ProvenanceEntityRole): value.value
define function ToString(value PublicationStatus): value.value
define function ToString(value QualityType): value.value
define function ToString(value QuantityComparator): value.value
define function ToString(value QuestionnaireItemOperator): value.value
define function ToString(value QuestionnaireItemType): value.value
define function ToString(value QuestionnaireResponseStatus): value.value
define function ToString(value ReferenceHandlingPolicy): value.value
define function ToString(value ReferenceVersionRules): value.value
define function ToString(value ReferredDocumentStatus): value.value
define function ToString(value RelatedArtifactType): value.value
define function ToString(value RemittanceOutcome): value.value
define function ToString(value RepositoryType): value.value
define function ToString(value RequestIntent): value.value
define function ToString(value RequestPriority): value.value
define function ToString(value RequestStatus): value.value
define function ToString(value ResearchElementType): value.value
define function ToString(value ResearchStudyStatus): value.value
define function ToString(value ResearchSubjectStatus): value.value
define function ToString(value ResourceType): value.value
define function ToString(value ResourceVersionPolicy): value.value
define function ToString(value ResponseType): value.value
define function ToString(value RestfulCapabilityMode): value.value
define function ToString(value RiskAssessmentStatus): value.value
define function ToString(value SPDXLicense): value.value
define function ToString(value SearchComparator): value.value
define function ToString(value SearchEntryMode): value.value
define function ToString(value SearchModifierCode): value.value
define function ToString(value SearchParamType): value.value
define function ToString(value SectionMode): value.value
define function ToString(value SequenceType): value.value
define function ToString(value ServiceRequestIntent): value.value
define function ToString(value ServiceRequestPriority): value.value
define function ToString(value ServiceRequestStatus): value.value
define function ToString(value SlicingRules): value.value
define function ToString(value SlotStatus): value.value
define function ToString(value SortDirection): value.value
define function ToString(value SpecimenContainedPreference): value.value
define function ToString(value SpecimenStatus): value.value
define function ToString(value Status): value.value
define function ToString(value StrandType): value.value
define function ToString(value StructureDefinitionKind): value.value
define function ToString(value StructureMapContextType): value.value
define function ToString(value StructureMapGroupTypeMode): value.value
define function ToString(value StructureMapInputMode): value.value
define function ToString(value StructureMapModelMode): value.value
define function ToString(value StructureMapSourceListMode): value.value
define function ToString(value StructureMapTargetListMode): value.value
define function ToString(value StructureMapTransform): value.value
define function ToString(value SubscriptionChannelType): value.value
define function ToString(value SubscriptionStatus): value.value
define function ToString(value SupplyDeliveryStatus): value.value
define function ToString(value SupplyRequestStatus): value.value
define function ToString(value SystemRestfulInteraction): value.value
define function ToString(value TaskIntent): value.value
define function ToString(value TaskPriority): value.value
define function ToString(value TaskStatus): value.value
define function ToString(value TestReportActionResult): value.value
define function ToString(value TestReportParticipantType): value.value
define function ToString(value TestReportResult): value.value
define function ToString(value TestReportStatus): value.value
define function ToString(value TestScriptRequestMethodCode): value.value
define function ToString(value TriggerType): value.value
define function ToString(value TypeDerivationRule): value.value
define function ToString(value TypeRestfulInteraction): value.value
define function ToString(value UDIEntryType): value.value
define function ToString(value UnitsOfTime): value.value
define function ToString(value Use): value.value
define function ToString(value VariableType): value.value
define function ToString(value VisionBase): value.value
define function ToString(value VisionEyes): value.value
define function ToString(value VisionStatus): value.value
define function ToString(value XPathUsageType): value.value
define function ToString(value base64Binary): value.value
define function ToBoolean(value boolean): value.value
define function ToDate(value date): value.value
define function ToDateTime(value dateTime): value.value
define function ToDecimal(value decimal): value.value
define function ToDateTime(value instant): value.value
define function ToInteger(value integer): value.value
define function ToString(value string): value.value
define function ToTime(value time): value.value
define function ToString(value uri): value.value
define function ToString(value xhtml): value.value
"
  }, {
    "contentType": "application/elm+xml",
    "data": "<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
   <annotation translatorVersion="1.4" translatorOptions="EnableAnnotations,EnableLocators,DisableListDemotion,DisableListPromotion" xsi:type="a:CqlToElmInfo"/>
   <annotation xsi:type="a:Annotation">
      <a:s r="1326">
         <a:s>library FHIRHelpers version '4.0.1'</a:s>
      </a:s>
   </annotation>
   <identifier id="FHIRHelpers" system="http://fhir.org/guides/ohsuhypertensionig" version="4.0.1"/>
   <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
   <usings>
      <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
      <def localId="1" locator="3:1-3:26" localIdentifier="FHIR" uri="http://hl7.org/fhir" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="1">
               <a:s>using </a:s>
               <a:s>
                  <a:s>FHIR</a:s>
               </a:s>
               <a:s> version '4.0.1'</a:s>
            </a:s>
         </annotation>
      </def>
   </usings>
   <statements>
      <def localId="25" locator="5:1-12:62" name="ToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="25">
               <a:s>define function ToInterval(period </a:s>
               <a:s r="2">
                  <a:s>FHIR.Period</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="24">
                  <a:s r="24">
                     <a:s>if </a:s>
                     <a:s r="4">
                        <a:s r="3">
                           <a:s>period</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="5"> then
        null
    else
        </a:s>
                     <a:s r="23">
                        <a:s>if </a:s>
                        <a:s r="8">
                           <a:s r="7">
                              <a:s r="6">
                                 <a:s>period</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="7">
                                 <a:s>&quot;start&quot;</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s> then
            </a:s>
                        <a:s r="15">
                           <a:s>Interval(</a:s>
                           <a:s r="11">
                              <a:s r="10">
                                 <a:s r="9">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="10">
                                    <a:s>&quot;start&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="11">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="14">
                              <a:s r="13">
                                 <a:s r="12">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="13">
                                    <a:s>&quot;end&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="14">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>]</a:s>
                        </a:s>
                        <a:s>
        else
            </a:s>
                        <a:s r="22">
                           <a:s>Interval[</a:s>
                           <a:s r="18">
                              <a:s r="17">
                                 <a:s r="16">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="17">
                                    <a:s>&quot;start&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="18">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="21">
                              <a:s r="20">
                                 <a:s r="19">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="20">
                                    <a:s>&quot;end&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="21">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>]</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="24" locator="6:5-12:62" xsi:type="If">
            <condition localId="4" locator="6:8-6:21" xsi:type="IsNull">
               <operand localId="3" locator="6:8-6:13" name="period" xsi:type="OperandRef"/>
            </condition>
            <then xsi:type="As">
               <operand localId="5" locator="7:9-7:12" xsi:type="Null"/>
               <asTypeSpecifier xsi:type="IntervalTypeSpecifier">
                  <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               </asTypeSpecifier>
            </then>
            <else localId="23" locator="9:9-12:62" xsi:type="If">
               <condition localId="8" locator="9:12-9:33" xsi:type="IsNull">
                  <operand localId="7" locator="9:12-9:25" path="start" xsi:type="Property">
                     <source localId="6" locator="9:12-9:17" name="period" xsi:type="OperandRef"/>
                  </operand>
               </condition>
               <then localId="15" locator="10:13-10:62" lowClosed="false" highClosed="true" xsi:type="Interval">
                  <low localId="11" locator="10:22-10:41" path="value" xsi:type="Property">
                     <source localId="10" locator="10:22-10:35" path="start" xsi:type="Property">
                        <source localId="9" locator="10:22-10:27" name="period" xsi:type="OperandRef"/>
                     </source>
                  </low>
                  <high localId="14" locator="10:44-10:61" path="value" xsi:type="Property">
                     <source localId="13" locator="10:44-10:55" path="end" xsi:type="Property">
                        <source localId="12" locator="10:44-10:49" name="period" xsi:type="OperandRef"/>
                     </source>
                  </high>
               </then>
               <else localId="22" locator="12:13-12:62" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="18" locator="12:22-12:41" path="value" xsi:type="Property">
                     <source localId="17" locator="12:22-12:35" path="start" xsi:type="Property">
                        <source localId="16" locator="12:22-12:27" name="period" xsi:type="OperandRef"/>
                     </source>
                  </low>
                  <high localId="21" locator="12:44-12:61" path="value" xsi:type="Property">
                     <source localId="20" locator="12:44-12:55" path="end" xsi:type="Property">
                        <source localId="19" locator="12:44-12:49" name="period" xsi:type="OperandRef"/>
                     </source>
                  </high>
               </else>
            </else>
         </expression>
         <operand name="period">
            <operandTypeSpecifier localId="2" locator="5:35-5:45" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="54" locator="14:1-25:7" name="ToCalendarUnit" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="54">
               <a:s>define function ToCalendarUnit(unit </a:s>
               <a:s r="26">
                  <a:s>System.String</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="53">
                  <a:s r="53">
                     <a:s>case </a:s>
                     <a:s r="27">
                        <a:s>unit</a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="30">
                        <a:s>when </a:s>
                        <a:s r="28">
                           <a:s>'ms'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="29">
                           <a:s>'millisecond'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="33">
                        <a:s>when </a:s>
                        <a:s r="31">
                           <a:s>'s'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="32">
                           <a:s>'second'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="36">
                        <a:s>when </a:s>
                        <a:s r="34">
                           <a:s>'min'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="35">
                           <a:s>'minute'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="39">
                        <a:s>when </a:s>
                        <a:s r="37">
                           <a:s>'h'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="38">
                           <a:s>'hour'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="42">
                        <a:s>when </a:s>
                        <a:s r="40">
                           <a:s>'d'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="41">
                           <a:s>'day'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="45">
                        <a:s>when </a:s>
                        <a:s r="43">
                           <a:s>'wk'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="44">
                           <a:s>'week'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="48">
                        <a:s>when </a:s>
                        <a:s r="46">
                           <a:s>'mo'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="47">
                           <a:s>'month'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="51">
                        <a:s>when </a:s>
                        <a:s r="49">
                           <a:s>'a'</a:s>
                        </a:s>
                        <a:s> then </a:s>
                        <a:s r="50">
                           <a:s>'year'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        else </a:s>
                     <a:s r="52">
                        <a:s>unit</a:s>
                     </a:s>
                     <a:s>
    end</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="53" locator="15:5-25:7" xsi:type="Case">
            <comparand localId="27" locator="15:10-15:13" name="unit" xsi:type="OperandRef"/>
            <caseItem localId="30" locator="16:9-16:36">
               <when localId="28" locator="16:14-16:17" valueType="t:String" value="ms" xsi:type="Literal"/>
               <then localId="29" locator="16:24-16:36" valueType="t:String" value="millisecond" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="33" locator="17:9-17:30">
               <when localId="31" locator="17:14-17:16" valueType="t:String" value="s" xsi:type="Literal"/>
               <then localId="32" locator="17:23-17:30" valueType="t:String" value="second" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="36" locator="18:9-18:32">
               <when localId="34" locator="18:14-18:18" valueType="t:String" value="min" xsi:type="Literal"/>
               <then localId="35" locator="18:25-18:32" valueType="t:String" value="minute" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="39" locator="19:9-19:28">
               <when localId="37" locator="19:14-19:16" valueType="t:String" value="h" xsi:type="Literal"/>
               <then localId="38" locator="19:23-19:28" valueType="t:String" value="hour" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="42" locator="20:9-20:27">
               <when localId="40" locator="20:14-20:16" valueType="t:String" value="d" xsi:type="Literal"/>
               <then localId="41" locator="20:23-20:27" valueType="t:String" value="day" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="45" locator="21:9-21:29">
               <when localId="43" locator="21:14-21:17" valueType="t:String" value="wk" xsi:type="Literal"/>
               <then localId="44" locator="21:24-21:29" valueType="t:String" value="week" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="48" locator="22:9-22:30">
               <when localId="46" locator="22:14-22:17" valueType="t:String" value="mo" xsi:type="Literal"/>
               <then localId="47" locator="22:24-22:30" valueType="t:String" value="month" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="51" locator="23:9-23:28">
               <when localId="49" locator="23:14-23:16" valueType="t:String" value="a" xsi:type="Literal"/>
               <then localId="50" locator="23:23-23:28" valueType="t:String" value="year" xsi:type="Literal"/>
            </caseItem>
            <else localId="52" locator="24:14-24:17" name="unit" xsi:type="OperandRef"/>
         </expression>
         <operand name="unit">
            <operandTypeSpecifier localId="26" locator="14:37-14:49" name="t:String" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="129" locator="27:1-38:7" name="ToQuantity" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="129">
               <a:s>define function ToQuantity(quantity </a:s>
               <a:s r="55">
                  <a:s>FHIR.Quantity</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="128">
                  <a:s r="128">
                     <a:s>case
        </a:s>
                     <a:s r="59">
                        <a:s>when </a:s>
                        <a:s r="57">
                           <a:s r="56">
                              <a:s>quantity</a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s r="58"> then null</a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="64">
                        <a:s>when </a:s>
                        <a:s r="62">
                           <a:s r="61">
                              <a:s r="60">
                                 <a:s>quantity</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="61">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s r="63"> then null</a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="74">
                        <a:s>when </a:s>
                        <a:s r="67">
                           <a:s r="66">
                              <a:s r="65">
                                 <a:s>quantity</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="66">
                                 <a:s>comparator</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is not null</a:s>
                        </a:s>
                        <a:s> then
            </a:s>
                        <a:s r="73">
                           <a:s r="68">Message(null, true, </a:s>
                           <a:s r="70">
                              <a:s>'FHIRHelpers.ToQuantity.ComparatorQuantityNotSupported'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="71">
                              <a:s>'Error'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="72">
                              <a:s>'FHIR Quantity value has a comparator and cannot be converted to a System.Quantity value.'</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="103">
                        <a:s>when </a:s>
                        <a:s r="89">
                           <a:s r="83">
                              <a:s r="77">
                                 <a:s r="76">
                                    <a:s r="75">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="76">
                                       <a:s>system</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> is null</a:s>
                              </a:s>
                              <a:s> or </a:s>
                              <a:s r="82">
                                 <a:s r="80">
                                    <a:s r="79">
                                       <a:s r="78">
                                          <a:s>quantity</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="79">
                                          <a:s>system</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="80">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> = </a:s>
                                 <a:s r="81">
                                    <a:s>'http://unitsofmeasure.org'</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
              or </a:s>
                           <a:s r="88">
                              <a:s r="86">
                                 <a:s r="85">
                                    <a:s r="84">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="85">
                                       <a:s>system</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="86">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="87">
                                 <a:s>'http://hl7.org/fhirpath/CodeSystem/calendar-units'</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s> then
            </a:s>
                        <a:s r="102">
                           <a:s>System.Quantity { </a:s>
                           <a:s>
                              <a:s>value: </a:s>
                              <a:s r="92">
                                 <a:s r="91">
                                    <a:s r="90">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="91">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="92">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s>
                              <a:s>unit: </a:s>
                              <a:s r="101">
                                 <a:s>ToCalendarUnit(</a:s>
                                 <a:s r="100">
                                    <a:s>Coalesce(</a:s>
                                    <a:s r="95">
                                       <a:s r="94">
                                          <a:s r="93">
                                             <a:s>quantity</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="94">
                                             <a:s>code</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="95">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="98">
                                       <a:s r="97">
                                          <a:s r="96">
                                             <a:s>quantity</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="97">
                                             <a:s>unit</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="98">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="99">
                                       <a:s>'1'</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        else
            </a:s>
                     <a:s r="127">
                        <a:s r="104">Message(null, true, </a:s>
                        <a:s r="106">
                           <a:s>'FHIRHelpers.ToQuantity.InvalidFHIRQuantity'</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="107">
                           <a:s>'Error'</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="126">
                           <a:s r="124">
                              <a:s r="120">
                                 <a:s r="118">
                                    <a:s r="114">
                                       <a:s r="112">
                                          <a:s r="108">
                                             <a:s>'Invalid FHIR Quantity code: '</a:s>
                                          </a:s>
                                          <a:s> &amp; </a:s>
                                          <a:s r="111">
                                             <a:s r="110">
                                                <a:s r="109">
                                                   <a:s>quantity</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="110">
                                                   <a:s>unit</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="111">
                                                <a:s>value</a:s>
                                             </a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> &amp; </a:s>
                                       <a:s r="113">
                                          <a:s>' ('</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> &amp; </a:s>
                                    <a:s r="117">
                                       <a:s r="116">
                                          <a:s r="115">
                                             <a:s>quantity</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="116">
                                             <a:s>system</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="117">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> &amp; </a:s>
                                 <a:s r="119">
                                    <a:s>'|'</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> &amp; </a:s>
                              <a:s r="123">
                                 <a:s r="122">
                                    <a:s r="121">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="122">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="123">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s> &amp; </a:s>
                           <a:s r="125">
                              <a:s>')'</a:s>
                           </a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                     <a:s>
    end</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="128" locator="28:5-38:7" xsi:type="Case">
            <caseItem localId="59" locator="29:9-29:39">
               <when localId="57" locator="29:14-29:29" xsi:type="IsNull">
                  <operand localId="56" locator="29:14-29:21" name="quantity" xsi:type="OperandRef"/>
               </when>
               <then asType="t:Quantity" xsi:type="As">
                  <operand localId="58" locator="29:36-29:39" xsi:type="Null"/>
               </then>
            </caseItem>
            <caseItem localId="64" locator="30:9-30:45">
               <when localId="62" locator="30:14-30:35" xsi:type="IsNull">
                  <operand localId="61" locator="30:14-30:27" path="value" xsi:type="Property">
                     <source localId="60" locator="30:14-30:21" name="quantity" xsi:type="OperandRef"/>
                  </operand>
               </when>
               <then asType="t:Quantity" xsi:type="As">
                  <operand localId="63" locator="30:42-30:45" xsi:type="Null"/>
               </then>
            </caseItem>
            <caseItem localId="74" locator="31:9-32:189">
               <when localId="67" locator="31:14-31:44" xsi:type="Not">
                  <operand locator="31:14-31:44" xsi:type="IsNull">
                     <operand localId="66" locator="31:14-31:32" path="comparator" xsi:type="Property">
                        <source localId="65" locator="31:14-31:21" name="quantity" xsi:type="OperandRef"/>
                     </operand>
                  </operand>
               </when>
               <then asType="t:Quantity" xsi:type="As">
                  <operand localId="73" locator="32:13-32:189" xsi:type="Message">
                     <source localId="68" locator="32:21-32:24" xsi:type="Null"/>
                     <condition localId="69" locator="32:27-32:30" valueType="t:Boolean" value="true" xsi:type="Literal"/>
                     <code localId="70" locator="32:33-32:87" valueType="t:String" value="FHIRHelpers.ToQuantity.ComparatorQuantityNotSupported" xsi:type="Literal"/>
                     <severity localId="71" locator="32:90-32:96" valueType="t:String" value="Error" xsi:type="Literal"/>
                     <message localId="72" locator="32:99-32:188" valueType="t:String" value="FHIR Quantity value has a comparator and cannot be converted to a System.Quantity value." xsi:type="Literal"/>
                  </operand>
               </then>
            </caseItem>
            <caseItem localId="103" locator="33:9-35:138">
               <when localId="89" locator="33:14-34:92" xsi:type="Or">
                  <operand localId="83" locator="33:14-33:91" xsi:type="Or">
                     <operand localId="77" locator="33:14-33:36" xsi:type="IsNull">
                        <operand localId="76" locator="33:14-33:28" path="system" xsi:type="Property">
                           <source localId="75" locator="33:14-33:21" name="quantity" xsi:type="OperandRef"/>
                        </operand>
                     </operand>
                     <operand localId="82" locator="33:41-33:91" xsi:type="Equal">
                        <operand localId="80" locator="33:41-33:61" path="value" xsi:type="Property">
                           <source localId="79" locator="33:41-33:55" path="system" xsi:type="Property">
                              <source localId="78" locator="33:41-33:48" name="quantity" xsi:type="OperandRef"/>
                           </source>
                        </operand>
                        <operand localId="81" locator="33:65-33:91" valueType="t:String" value="http://unitsofmeasure.org" xsi:type="Literal"/>
                     </operand>
                  </operand>
                  <operand localId="88" locator="34:18-34:92" xsi:type="Equal">
                     <operand localId="86" locator="34:18-34:38" path="value" xsi:type="Property">
                        <source localId="85" locator="34:18-34:32" path="system" xsi:type="Property">
                           <source localId="84" locator="34:18-34:25" name="quantity" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="87" locator="34:42-34:92" valueType="t:String" value="http://hl7.org/fhirpath/CodeSystem/calendar-units" xsi:type="Literal"/>
                  </operand>
               </when>
               <then localId="102" locator="35:13-35:138" classType="t:Quantity" xsi:type="Instance">
                  <element name="value">
                     <value localId="92" locator="35:38-35:57" path="value" xsi:type="Property">
                        <source localId="91" locator="35:38-35:51" path="value" xsi:type="Property">
                           <source localId="90" locator="35:38-35:45" name="quantity" xsi:type="OperandRef"/>
                        </source>
                     </value>
                  </element>
                  <element name="unit">
                     <value localId="101" locator="35:66-35:136" name="ToCalendarUnit" xsi:type="FunctionRef">
                        <operand localId="100" locator="35:81-35:135" xsi:type="Coalesce">
                           <operand localId="95" locator="35:90-35:108" path="value" xsi:type="Property">
                              <source localId="94" locator="35:90-35:102" path="code" xsi:type="Property">
                                 <source localId="93" locator="35:90-35:97" name="quantity" xsi:type="OperandRef"/>
                              </source>
                           </operand>
                           <operand localId="98" locator="35:111-35:129" path="value" xsi:type="Property">
                              <source localId="97" locator="35:111-35:123" path="unit" xsi:type="Property">
                                 <source localId="96" locator="35:111-35:118" name="quantity" xsi:type="OperandRef"/>
                              </source>
                           </operand>
                           <operand localId="99" locator="35:132-35:134" valueType="t:String" value="1" xsi:type="Literal"/>
                        </operand>
                     </value>
                  </element>
               </then>
            </caseItem>
            <else asType="t:Quantity" xsi:type="As">
               <operand localId="127" locator="37:13-37:205" xsi:type="Message">
                  <source localId="104" locator="37:21-37:24" xsi:type="Null"/>
                  <condition localId="105" locator="37:27-37:30" valueType="t:Boolean" value="true" xsi:type="Literal"/>
                  <code localId="106" locator="37:33-37:76" valueType="t:String" value="FHIRHelpers.ToQuantity.InvalidFHIRQuantity" xsi:type="Literal"/>
                  <severity localId="107" locator="37:79-37:85" valueType="t:String" value="Error" xsi:type="Literal"/>
                  <message localId="126" locator="37:88-37:204" xsi:type="Concatenate">
                     <operand xsi:type="Coalesce">
                        <operand localId="124" locator="37:88-37:198" xsi:type="Concatenate">
                           <operand xsi:type="Coalesce">
                              <operand localId="120" locator="37:88-37:176" xsi:type="Concatenate">
                                 <operand xsi:type="Coalesce">
                                    <operand localId="118" locator="37:88-37:170" xsi:type="Concatenate">
                                       <operand xsi:type="Coalesce">
                                          <operand localId="114" locator="37:88-37:146" xsi:type="Concatenate">
                                             <operand xsi:type="Coalesce">
                                                <operand localId="112" locator="37:88-37:139" xsi:type="Concatenate">
                                                   <operand xsi:type="Coalesce">
                                                      <operand localId="108" locator="37:88-37:117" valueType="t:String" value="Invalid FHIR Quantity code: " xsi:type="Literal"/>
                                                      <operand valueType="t:String" value="" xsi:type="Literal"/>
                                                   </operand>
                                                   <operand xsi:type="Coalesce">
                                                      <operand localId="111" locator="37:121-37:139" path="value" xsi:type="Property">
                                                         <source localId="110" locator="37:121-37:133" path="unit" xsi:type="Property">
                                                            <source localId="109" locator="37:121-37:128" name="quantity" xsi:type="OperandRef"/>
                                                         </source>
                                                      </operand>
                                                      <operand valueType="t:String" value="" xsi:type="Literal"/>
                                                   </operand>
                                                </operand>
                                                <operand valueType="t:String" value="" xsi:type="Literal"/>
                                             </operand>
                                             <operand xsi:type="Coalesce">
                                                <operand localId="113" locator="37:143-37:146" valueType="t:String" value=" (" xsi:type="Literal"/>
                                                <operand valueType="t:String" value="" xsi:type="Literal"/>
                                             </operand>
                                          </operand>
                                          <operand valueType="t:String" value="" xsi:type="Literal"/>
                                       </operand>
                                       <operand xsi:type="Coalesce">
                                          <operand localId="117" locator="37:150-37:170" path="value" xsi:type="Property">
                                             <source localId="116" locator="37:150-37:164" path="system" xsi:type="Property">
                                                <source localId="115" locator="37:150-37:157" name="quantity" xsi:type="OperandRef"/>
                                             </source>
                                          </operand>
                                          <operand valueType="t:String" value="" xsi:type="Literal"/>
                                       </operand>
                                    </operand>
                                    <operand valueType="t:String" value="" xsi:type="Literal"/>
                                 </operand>
                                 <operand xsi:type="Coalesce">
                                    <operand localId="119" locator="37:174-37:176" valueType="t:String" value="|" xsi:type="Literal"/>
                                    <operand valueType="t:String" value="" xsi:type="Literal"/>
                                 </operand>
                              </operand>
                              <operand valueType="t:String" value="" xsi:type="Literal"/>
                           </operand>
                           <operand xsi:type="Coalesce">
                              <operand localId="123" locator="37:180-37:198" path="value" xsi:type="Property">
                                 <source localId="122" locator="37:180-37:192" path="code" xsi:type="Property">
                                    <source localId="121" locator="37:180-37:187" name="quantity" xsi:type="OperandRef"/>
                                 </source>
                              </operand>
                              <operand valueType="t:String" value="" xsi:type="Literal"/>
                           </operand>
                        </operand>
                        <operand valueType="t:String" value="" xsi:type="Literal"/>
                     </operand>
                     <operand xsi:type="Coalesce">
                        <operand localId="125" locator="37:202-37:204" valueType="t:String" value=")" xsi:type="Literal"/>
                        <operand valueType="t:String" value="" xsi:type="Literal"/>
                     </operand>
                  </message>
               </operand>
            </else>
         </expression>
         <operand name="quantity">
            <operandTypeSpecifier localId="55" locator="27:37-27:49" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="194" locator="40:1-49:7" name="ToQuantityIgnoringComparator" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="194">
               <a:s>define function ToQuantityIgnoringComparator(quantity </a:s>
               <a:s r="130">
                  <a:s>FHIR.Quantity</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="193">
                  <a:s r="193">
                     <a:s>case
        </a:s>
                     <a:s r="134">
                        <a:s>when </a:s>
                        <a:s r="132">
                           <a:s r="131">
                              <a:s>quantity</a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s r="133"> then null</a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="139">
                        <a:s>when </a:s>
                        <a:s r="137">
                           <a:s r="136">
                              <a:s r="135">
                                 <a:s>quantity</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="136">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s r="138"> then null</a:s>
                     </a:s>
                     <a:s>
        </a:s>
                     <a:s r="168">
                        <a:s>when </a:s>
                        <a:s r="154">
                           <a:s r="148">
                              <a:s r="142">
                                 <a:s r="141">
                                    <a:s r="140">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="141">
                                       <a:s>system</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> is null</a:s>
                              </a:s>
                              <a:s> or </a:s>
                              <a:s r="147">
                                 <a:s r="145">
                                    <a:s r="144">
                                       <a:s r="143">
                                          <a:s>quantity</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="144">
                                          <a:s>system</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="145">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> = </a:s>
                                 <a:s r="146">
                                    <a:s>'http://unitsofmeasure.org'</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
              or </a:s>
                           <a:s r="153">
                              <a:s r="151">
                                 <a:s r="150">
                                    <a:s r="149">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="150">
                                       <a:s>system</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="151">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="152">
                                 <a:s>'http://hl7.org/fhirpath/CodeSystem/calendar-units'</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s> then
            </a:s>
                        <a:s r="167">
                           <a:s>System.Quantity { </a:s>
                           <a:s>
                              <a:s>value: </a:s>
                              <a:s r="157">
                                 <a:s r="156">
                                    <a:s r="155">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="156">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="157">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s>
                              <a:s>unit: </a:s>
                              <a:s r="166">
                                 <a:s>ToCalendarUnit(</a:s>
                                 <a:s r="165">
                                    <a:s>Coalesce(</a:s>
                                    <a:s r="160">
                                       <a:s r="159">
                                          <a:s r="158">
                                             <a:s>quantity</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="159">
                                             <a:s>code</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="160">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="163">
                                       <a:s r="162">
                                          <a:s r="161">
                                             <a:s>quantity</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="162">
                                             <a:s>unit</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="163">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="164">
                                       <a:s>'1'</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
        else
            </a:s>
                     <a:s r="192">
                        <a:s r="169">Message(null, true, </a:s>
                        <a:s r="171">
                           <a:s>'FHIRHelpers.ToQuantity.InvalidFHIRQuantity'</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="172">
                           <a:s>'Error'</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="191">
                           <a:s r="189">
                              <a:s r="185">
                                 <a:s r="183">
                                    <a:s r="179">
                                       <a:s r="177">
                                          <a:s r="173">
                                             <a:s>'Invalid FHIR Quantity code: '</a:s>
                                          </a:s>
                                          <a:s> &amp; </a:s>
                                          <a:s r="176">
                                             <a:s r="175">
                                                <a:s r="174">
                                                   <a:s>quantity</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="175">
                                                   <a:s>unit</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="176">
                                                <a:s>value</a:s>
                                             </a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> &amp; </a:s>
                                       <a:s r="178">
                                          <a:s>' ('</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> &amp; </a:s>
                                    <a:s r="182">
                                       <a:s r="181">
                                          <a:s r="180">
                                             <a:s>quantity</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="181">
                                             <a:s>system</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="182">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> &amp; </a:s>
                                 <a:s r="184">
                                    <a:s>'|'</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> &amp; </a:s>
                              <a:s r="188">
                                 <a:s r="187">
                                    <a:s r="186">
                                       <a:s>quantity</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="187">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="188">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s> &amp; </a:s>
                           <a:s r="190">
                              <a:s>')'</a:s>
                           </a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                     <a:s>
    end</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="193" locator="41:5-49:7" xsi:type="Case">
            <caseItem localId="134" locator="42:9-42:39">
               <when localId="132" locator="42:14-42:29" xsi:type="IsNull">
                  <operand localId="131" locator="42:14-42:21" name="quantity" xsi:type="OperandRef"/>
               </when>
               <then asType="t:Quantity" xsi:type="As">
                  <operand localId="133" locator="42:36-42:39" xsi:type="Null"/>
               </then>
            </caseItem>
            <caseItem localId="139" locator="43:9-43:45">
               <when localId="137" locator="43:14-43:35" xsi:type="IsNull">
                  <operand localId="136" locator="43:14-43:27" path="value" xsi:type="Property">
                     <source localId="135" locator="43:14-43:21" name="quantity" xsi:type="OperandRef"/>
                  </operand>
               </when>
               <then asType="t:Quantity" xsi:type="As">
                  <operand localId="138" locator="43:42-43:45" xsi:type="Null"/>
               </then>
            </caseItem>
            <caseItem localId="168" locator="44:9-46:138">
               <when localId="154" locator="44:14-45:92" xsi:type="Or">
                  <operand localId="148" locator="44:14-44:91" xsi:type="Or">
                     <operand localId="142" locator="44:14-44:36" xsi:type="IsNull">
                        <operand localId="141" locator="44:14-44:28" path="system" xsi:type="Property">
                           <source localId="140" locator="44:14-44:21" name="quantity" xsi:type="OperandRef"/>
                        </operand>
                     </operand>
                     <operand localId="147" locator="44:41-44:91" xsi:type="Equal">
                        <operand localId="145" locator="44:41-44:61" path="value" xsi:type="Property">
                           <source localId="144" locator="44:41-44:55" path="system" xsi:type="Property">
                              <source localId="143" locator="44:41-44:48" name="quantity" xsi:type="OperandRef"/>
                           </source>
                        </operand>
                        <operand localId="146" locator="44:65-44:91" valueType="t:String" value="http://unitsofmeasure.org" xsi:type="Literal"/>
                     </operand>
                  </operand>
                  <operand localId="153" locator="45:18-45:92" xsi:type="Equal">
                     <operand localId="151" locator="45:18-45:38" path="value" xsi:type="Property">
                        <source localId="150" locator="45:18-45:32" path="system" xsi:type="Property">
                           <source localId="149" locator="45:18-45:25" name="quantity" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="152" locator="45:42-45:92" valueType="t:String" value="http://hl7.org/fhirpath/CodeSystem/calendar-units" xsi:type="Literal"/>
                  </operand>
               </when>
               <then localId="167" locator="46:13-46:138" classType="t:Quantity" xsi:type="Instance">
                  <element name="value">
                     <value localId="157" locator="46:38-46:57" path="value" xsi:type="Property">
                        <source localId="156" locator="46:38-46:51" path="value" xsi:type="Property">
                           <source localId="155" locator="46:38-46:45" name="quantity" xsi:type="OperandRef"/>
                        </source>
                     </value>
                  </element>
                  <element name="unit">
                     <value localId="166" locator="46:66-46:136" name="ToCalendarUnit" xsi:type="FunctionRef">
                        <operand localId="165" locator="46:81-46:135" xsi:type="Coalesce">
                           <operand localId="160" locator="46:90-46:108" path="value" xsi:type="Property">
                              <source localId="159" locator="46:90-46:102" path="code" xsi:type="Property">
                                 <source localId="158" locator="46:90-46:97" name="quantity" xsi:type="OperandRef"/>
                              </source>
                           </operand>
                           <operand localId="163" locator="46:111-46:129" path="value" xsi:type="Property">
                              <source localId="162" locator="46:111-46:123" path="unit" xsi:type="Property">
                                 <source localId="161" locator="46:111-46:118" name="quantity" xsi:type="OperandRef"/>
                              </source>
                           </operand>
                           <operand localId="164" locator="46:132-46:134" valueType="t:String" value="1" xsi:type="Literal"/>
                        </operand>
                     </value>
                  </element>
               </then>
            </caseItem>
            <else asType="t:Quantity" xsi:type="As">
               <operand localId="192" locator="48:13-48:205" xsi:type="Message">
                  <source localId="169" locator="48:21-48:24" xsi:type="Null"/>
                  <condition localId="170" locator="48:27-48:30" valueType="t:Boolean" value="true" xsi:type="Literal"/>
                  <code localId="171" locator="48:33-48:76" valueType="t:String" value="FHIRHelpers.ToQuantity.InvalidFHIRQuantity" xsi:type="Literal"/>
                  <severity localId="172" locator="48:79-48:85" valueType="t:String" value="Error" xsi:type="Literal"/>
                  <message localId="191" locator="48:88-48:204" xsi:type="Concatenate">
                     <operand xsi:type="Coalesce">
                        <operand localId="189" locator="48:88-48:198" xsi:type="Concatenate">
                           <operand xsi:type="Coalesce">
                              <operand localId="185" locator="48:88-48:176" xsi:type="Concatenate">
                                 <operand xsi:type="Coalesce">
                                    <operand localId="183" locator="48:88-48:170" xsi:type="Concatenate">
                                       <operand xsi:type="Coalesce">
                                          <operand localId="179" locator="48:88-48:146" xsi:type="Concatenate">
                                             <operand xsi:type="Coalesce">
                                                <operand localId="177" locator="48:88-48:139" xsi:type="Concatenate">
                                                   <operand xsi:type="Coalesce">
                                                      <operand localId="173" locator="48:88-48:117" valueType="t:String" value="Invalid FHIR Quantity code: " xsi:type="Literal"/>
                                                      <operand valueType="t:String" value="" xsi:type="Literal"/>
                                                   </operand>
                                                   <operand xsi:type="Coalesce">
                                                      <operand localId="176" locator="48:121-48:139" path="value" xsi:type="Property">
                                                         <source localId="175" locator="48:121-48:133" path="unit" xsi:type="Property">
                                                            <source localId="174" locator="48:121-48:128" name="quantity" xsi:type="OperandRef"/>
                                                         </source>
                                                      </operand>
                                                      <operand valueType="t:String" value="" xsi:type="Literal"/>
                                                   </operand>
                                                </operand>
                                                <operand valueType="t:String" value="" xsi:type="Literal"/>
                                             </operand>
                                             <operand xsi:type="Coalesce">
                                                <operand localId="178" locator="48:143-48:146" valueType="t:String" value=" (" xsi:type="Literal"/>
                                                <operand valueType="t:String" value="" xsi:type="Literal"/>
                                             </operand>
                                          </operand>
                                          <operand valueType="t:String" value="" xsi:type="Literal"/>
                                       </operand>
                                       <operand xsi:type="Coalesce">
                                          <operand localId="182" locator="48:150-48:170" path="value" xsi:type="Property">
                                             <source localId="181" locator="48:150-48:164" path="system" xsi:type="Property">
                                                <source localId="180" locator="48:150-48:157" name="quantity" xsi:type="OperandRef"/>
                                             </source>
                                          </operand>
                                          <operand valueType="t:String" value="" xsi:type="Literal"/>
                                       </operand>
                                    </operand>
                                    <operand valueType="t:String" value="" xsi:type="Literal"/>
                                 </operand>
                                 <operand xsi:type="Coalesce">
                                    <operand localId="184" locator="48:174-48:176" valueType="t:String" value="|" xsi:type="Literal"/>
                                    <operand valueType="t:String" value="" xsi:type="Literal"/>
                                 </operand>
                              </operand>
                              <operand valueType="t:String" value="" xsi:type="Literal"/>
                           </operand>
                           <operand xsi:type="Coalesce">
                              <operand localId="188" locator="48:180-48:198" path="value" xsi:type="Property">
                                 <source localId="187" locator="48:180-48:192" path="code" xsi:type="Property">
                                    <source localId="186" locator="48:180-48:187" name="quantity" xsi:type="OperandRef"/>
                                 </source>
                              </operand>
                              <operand valueType="t:String" value="" xsi:type="Literal"/>
                           </operand>
                        </operand>
                        <operand valueType="t:String" value="" xsi:type="Literal"/>
                     </operand>
                     <operand xsi:type="Coalesce">
                        <operand localId="190" locator="48:202-48:204" valueType="t:String" value=")" xsi:type="Literal"/>
                        <operand valueType="t:String" value="" xsi:type="Literal"/>
                     </operand>
                  </message>
               </operand>
            </else>
         </expression>
         <operand name="quantity">
            <operandTypeSpecifier localId="130" locator="40:55-40:67" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="233" locator="51:1-76:11" name="ToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="233">
               <a:s>define function ToInterval(quantity </a:s>
               <a:s r="195">
                  <a:s>FHIR.Quantity</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="232">
                  <a:s r="232">
                     <a:s>if </a:s>
                     <a:s r="197">
                        <a:s r="196">
                           <a:s>quantity</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="198"> then null else
        </a:s>
                     <a:s r="231">
                        <a:s>case </a:s>
                        <a:s r="201">
                           <a:s r="200">
                              <a:s r="199">
                                 <a:s>quantity</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="200">
                                 <a:s>comparator</a:s>
                              </a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="201">
                              <a:s>value</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
            </a:s>
                        <a:s r="207">
                           <a:s>when </a:s>
                           <a:s r="202">
                              <a:s>'&lt;'</a:s>
                           </a:s>
                           <a:s> then
                </a:s>
                           <a:s r="206">
                              <a:s r="203">Interval[
                    null,
                    </a:s>
                              <a:s r="205">
                                 <a:s>ToQuantityIgnoringComparator(</a:s>
                                 <a:s r="204">
                                    <a:s>quantity</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s>
                )</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
            </a:s>
                        <a:s r="213">
                           <a:s>when </a:s>
                           <a:s r="208">
                              <a:s>'&lt;='</a:s>
                           </a:s>
                           <a:s> then
                </a:s>
                           <a:s r="212">
                              <a:s r="209">Interval[
                    null,
                    </a:s>
                              <a:s r="211">
                                 <a:s>ToQuantityIgnoringComparator(</a:s>
                                 <a:s r="210">
                                    <a:s>quantity</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s>
                ]</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
            </a:s>
                        <a:s r="219">
                           <a:s>when </a:s>
                           <a:s r="214">
                              <a:s>'>='</a:s>
                           </a:s>
                           <a:s> then
                </a:s>
                           <a:s r="218">
                              <a:s>Interval[
                    </a:s>
                              <a:s r="216">
                                 <a:s>ToQuantityIgnoringComparator(</a:s>
                                 <a:s r="215">
                                    <a:s>quantity</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s r="217">,
                    null
                ]</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
            </a:s>
                        <a:s r="225">
                           <a:s>when </a:s>
                           <a:s r="220">
                              <a:s>'>'</a:s>
                           </a:s>
                           <a:s> then
                </a:s>
                           <a:s r="224">
                              <a:s>Interval(
                    </a:s>
                              <a:s r="222">
                                 <a:s>ToQuantityIgnoringComparator(</a:s>
                                 <a:s r="221">
                                    <a:s>quantity</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s r="223">,
                    null
                ]</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
            else
                </a:s>
                        <a:s r="230">
                           <a:s>Interval[</a:s>
                           <a:s r="227">
                              <a:s>ToQuantity(</a:s>
                              <a:s r="226">
                                 <a:s>quantity</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="229">
                              <a:s>ToQuantity(</a:s>
                              <a:s r="228">
                                 <a:s>quantity</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                           <a:s>]</a:s>
                        </a:s>
                        <a:s>
        end</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="232" locator="52:5-76:11" xsi:type="If">
            <condition localId="197" locator="52:8-52:23" xsi:type="IsNull">
               <operand localId="196" locator="52:8-52:15" name="quantity" xsi:type="OperandRef"/>
            </condition>
            <then xsi:type="As">
               <operand localId="198" locator="52:30-52:33" xsi:type="Null"/>
               <asTypeSpecifier xsi:type="IntervalTypeSpecifier">
                  <pointType name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
               </asTypeSpecifier>
            </then>
            <else localId="231" locator="53:9-76:11" xsi:type="Case">
               <comparand localId="201" locator="53:14-53:38" path="value" xsi:type="Property">
                  <source localId="200" locator="53:14-53:32" path="comparator" xsi:type="Property">
                     <source localId="199" locator="53:14-53:21" name="quantity" xsi:type="OperandRef"/>
                  </source>
               </comparand>
               <caseItem localId="207" locator="54:13-58:17">
                  <when localId="202" locator="54:18-54:20" valueType="t:String" value="&lt;" xsi:type="Literal"/>
                  <then localId="206" locator="55:17-58:17" lowClosed="true" highClosed="false" xsi:type="Interval">
                     <low asType="t:Quantity" xsi:type="As">
                        <operand localId="203" locator="56:21-56:24" xsi:type="Null"/>
                     </low>
                     <high localId="205" locator="57:21-57:58" name="ToQuantityIgnoringComparator" xsi:type="FunctionRef">
                        <operand localId="204" locator="57:50-57:57" name="quantity" xsi:type="OperandRef"/>
                     </high>
                  </then>
               </caseItem>
               <caseItem localId="213" locator="59:13-63:17">
                  <when localId="208" locator="59:18-59:21" valueType="t:String" value="&lt;=" xsi:type="Literal"/>
                  <then localId="212" locator="60:17-63:17" lowClosed="true" highClosed="true" xsi:type="Interval">
                     <low asType="t:Quantity" xsi:type="As">
                        <operand localId="209" locator="61:21-61:24" xsi:type="Null"/>
                     </low>
                     <high localId="211" locator="62:21-62:58" name="ToQuantityIgnoringComparator" xsi:type="FunctionRef">
                        <operand localId="210" locator="62:50-62:57" name="quantity" xsi:type="OperandRef"/>
                     </high>
                  </then>
               </caseItem>
               <caseItem localId="219" locator="64:13-68:17">
                  <when localId="214" locator="64:18-64:21" valueType="t:String" value=">=" xsi:type="Literal"/>
                  <then localId="218" locator="65:17-68:17" lowClosed="true" highClosed="true" xsi:type="Interval">
                     <low localId="216" locator="66:21-66:58" name="ToQuantityIgnoringComparator" xsi:type="FunctionRef">
                        <operand localId="215" locator="66:50-66:57" name="quantity" xsi:type="OperandRef"/>
                     </low>
                     <high asType="t:Quantity" xsi:type="As">
                        <operand localId="217" locator="67:21-67:24" xsi:type="Null"/>
                     </high>
                  </then>
               </caseItem>
               <caseItem localId="225" locator="69:13-73:17">
                  <when localId="220" locator="69:18-69:20" valueType="t:String" value=">" xsi:type="Literal"/>
                  <then localId="224" locator="70:17-73:17" lowClosed="false" highClosed="true" xsi:type="Interval">
                     <low localId="222" locator="71:21-71:58" name="ToQuantityIgnoringComparator" xsi:type="FunctionRef">
                        <operand localId="221" locator="71:50-71:57" name="quantity" xsi:type="OperandRef"/>
                     </low>
                     <high asType="t:Quantity" xsi:type="As">
                        <operand localId="223" locator="72:21-72:24" xsi:type="Null"/>
                     </high>
                  </then>
               </caseItem>
               <else localId="230" locator="75:17-75:68" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="227" locator="75:26-75:45" name="ToQuantity" xsi:type="FunctionRef">
                     <operand localId="226" locator="75:37-75:44" name="quantity" xsi:type="OperandRef"/>
                  </low>
                  <high localId="229" locator="75:48-75:67" name="ToQuantity" xsi:type="FunctionRef">
                     <operand localId="228" locator="75:59-75:66" name="quantity" xsi:type="OperandRef"/>
                  </high>
               </else>
            </else>
         </expression>
         <operand name="quantity">
            <operandTypeSpecifier localId="195" locator="51:37-51:49" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="246" locator="78:1-82:107" name="ToRatio" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="246">
               <a:s>define function ToRatio(ratio </a:s>
               <a:s r="234">
                  <a:s>FHIR.Ratio</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="245">
                  <a:s r="245">
                     <a:s>if </a:s>
                     <a:s r="236">
                        <a:s r="235">
                           <a:s>ratio</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="237"> then
        null
    else
        </a:s>
                     <a:s r="244">
                        <a:s>System.Ratio { </a:s>
                        <a:s>
                           <a:s>numerator: </a:s>
                           <a:s r="240">
                              <a:s>ToQuantity(</a:s>
                              <a:s r="239">
                                 <a:s r="238">
                                    <a:s>ratio</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="239">
                                    <a:s>numerator</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s>
                           <a:s>denominator: </a:s>
                           <a:s r="243">
                              <a:s>ToQuantity(</a:s>
                              <a:s r="242">
                                 <a:s r="241">
                                    <a:s>ratio</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="242">
                                    <a:s>denominator</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                        <a:s> }</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="245" locator="79:5-82:107" xsi:type="If">
            <condition localId="236" locator="79:8-79:20" xsi:type="IsNull">
               <operand localId="235" locator="79:8-79:12" name="ratio" xsi:type="OperandRef"/>
            </condition>
            <then asType="t:Ratio" xsi:type="As">
               <operand localId="237" locator="80:9-80:12" xsi:type="Null"/>
            </then>
            <else localId="244" locator="82:9-82:107" classType="t:Ratio" xsi:type="Instance">
               <element name="numerator">
                  <value localId="240" locator="82:35-82:61" name="ToQuantity" xsi:type="FunctionRef">
                     <operand localId="239" locator="82:46-82:60" path="numerator" xsi:type="Property">
                        <source localId="238" locator="82:46-82:50" name="ratio" xsi:type="OperandRef"/>
                     </operand>
                  </value>
               </element>
               <element name="denominator">
                  <value localId="243" locator="82:77-82:105" name="ToQuantity" xsi:type="FunctionRef">
                     <operand localId="242" locator="82:88-82:104" path="denominator" xsi:type="Property">
                        <source localId="241" locator="82:88-82:92" name="ratio" xsi:type="OperandRef"/>
                     </operand>
                  </value>
               </element>
            </else>
         </expression>
         <operand name="ratio">
            <operandTypeSpecifier localId="234" locator="78:31-78:40" name="fhir:Ratio" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="259" locator="84:1-88:63" name="ToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="259">
               <a:s>define function ToInterval(range </a:s>
               <a:s r="247">
                  <a:s>FHIR.Range</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="258">
                  <a:s r="258">
                     <a:s>if </a:s>
                     <a:s r="249">
                        <a:s r="248">
                           <a:s>range</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="250"> then
        null
    else
        </a:s>
                     <a:s r="257">
                        <a:s>Interval[</a:s>
                        <a:s r="253">
                           <a:s>ToQuantity(</a:s>
                           <a:s r="252">
                              <a:s r="251">
                                 <a:s>range</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="252">
                                 <a:s>low</a:s>
                              </a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="256">
                           <a:s>ToQuantity(</a:s>
                           <a:s r="255">
                              <a:s r="254">
                                 <a:s>range</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="255">
                                 <a:s>high</a:s>
                              </a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>]</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="258" locator="85:5-88:63" xsi:type="If">
            <condition localId="249" locator="85:8-85:20" xsi:type="IsNull">
               <operand localId="248" locator="85:8-85:12" name="range" xsi:type="OperandRef"/>
            </condition>
            <then xsi:type="As">
               <operand localId="250" locator="86:9-86:12" xsi:type="Null"/>
               <asTypeSpecifier xsi:type="IntervalTypeSpecifier">
                  <pointType name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
               </asTypeSpecifier>
            </then>
            <else localId="257" locator="88:9-88:63" lowClosed="true" highClosed="true" xsi:type="Interval">
               <low localId="253" locator="88:18-88:38" name="ToQuantity" xsi:type="FunctionRef">
                  <operand localId="252" locator="88:29-88:37" path="low" xsi:type="Property">
                     <source localId="251" locator="88:29-88:33" name="range" xsi:type="OperandRef"/>
                  </operand>
               </low>
               <high localId="256" locator="88:41-88:62" name="ToQuantity" xsi:type="FunctionRef">
                  <operand localId="255" locator="88:52-88:61" path="high" xsi:type="Property">
                     <source localId="254" locator="88:52-88:56" name="range" xsi:type="OperandRef"/>
                  </operand>
               </high>
            </else>
         </expression>
         <operand name="range">
            <operandTypeSpecifier localId="247" locator="84:34-84:43" name="fhir:Range" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="278" locator="90:1-99:9" name="ToCode" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="278">
               <a:s>define function ToCode(coding </a:s>
               <a:s r="260">
                  <a:s>FHIR.Coding</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="277">
                  <a:s r="277">
                     <a:s>if </a:s>
                     <a:s r="262">
                        <a:s r="261">
                           <a:s>coding</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="263"> then
        null
    else
        </a:s>
                     <a:s r="276">
                        <a:s>System.Code {
          </a:s>
                        <a:s>
                           <a:s>code: </a:s>
                           <a:s r="266">
                              <a:s r="265">
                                 <a:s r="264">
                                    <a:s>coding</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="265">
                                    <a:s>code</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="266">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
          </a:s>
                        <a:s>
                           <a:s>system: </a:s>
                           <a:s r="269">
                              <a:s r="268">
                                 <a:s r="267">
                                    <a:s>coding</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="268">
                                    <a:s>system</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="269">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
          </a:s>
                        <a:s>
                           <a:s>version: </a:s>
                           <a:s r="272">
                              <a:s r="271">
                                 <a:s r="270">
                                    <a:s>coding</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="271">
                                    <a:s>version</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="272">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
          </a:s>
                        <a:s>
                           <a:s>display: </a:s>
                           <a:s r="275">
                              <a:s r="274">
                                 <a:s r="273">
                                    <a:s>coding</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="274">
                                    <a:s>display</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="275">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
        }</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="277" locator="91:5-99:9" xsi:type="If">
            <condition localId="262" locator="91:8-91:21" xsi:type="IsNull">
               <operand localId="261" locator="91:8-91:13" name="coding" xsi:type="OperandRef"/>
            </condition>
            <then asType="t:Code" xsi:type="As">
               <operand localId="263" locator="92:9-92:12" xsi:type="Null"/>
            </then>
            <else localId="276" locator="94:9-99:9" classType="t:Code" xsi:type="Instance">
               <element name="code">
                  <value localId="266" locator="95:17-95:33" path="value" xsi:type="Property">
                     <source localId="265" locator="95:17-95:27" path="code" xsi:type="Property">
                        <source localId="264" locator="95:17-95:22" name="coding" xsi:type="OperandRef"/>
                     </source>
                  </value>
               </element>
               <element name="system">
                  <value localId="269" locator="96:19-96:37" path="value" xsi:type="Property">
                     <source localId="268" locator="96:19-96:31" path="system" xsi:type="Property">
                        <source localId="267" locator="96:19-96:24" name="coding" xsi:type="OperandRef"/>
                     </source>
                  </value>
               </element>
               <element name="version">
                  <value localId="272" locator="97:20-97:39" path="value" xsi:type="Property">
                     <source localId="271" locator="97:20-97:33" path="version" xsi:type="Property">
                        <source localId="270" locator="97:20-97:25" name="coding" xsi:type="OperandRef"/>
                     </source>
                  </value>
               </element>
               <element name="display">
                  <value localId="275" locator="98:20-98:39" path="value" xsi:type="Property">
                     <source localId="274" locator="98:20-98:33" path="display" xsi:type="Property">
                        <source localId="273" locator="98:20-98:25" name="coding" xsi:type="OperandRef"/>
                     </source>
                  </value>
               </element>
            </else>
         </expression>
         <operand name="coding">
            <operandTypeSpecifier localId="260" locator="90:31-90:41" name="fhir:Coding" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="294" locator="101:1-108:9" name="ToConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="294">
               <a:s>define function ToConcept(concept </a:s>
               <a:s r="279">
                  <a:s>FHIR.CodeableConcept</a:s>
               </a:s>
               <a:s>):
    </a:s>
               <a:s r="293">
                  <a:s r="293">
                     <a:s>if </a:s>
                     <a:s r="281">
                        <a:s r="280">
                           <a:s>concept</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="282"> then
        null
    else
        </a:s>
                     <a:s r="292">
                        <a:s>System.Concept {
            </a:s>
                        <a:s>
                           <a:s>codes: </a:s>
                           <a:s r="288">
                              <a:s>
                                 <a:s r="284">
                                    <a:s r="283">
                                       <a:s>
                                          <a:s>concept.coding</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> C</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> </a:s>
                              <a:s r="287">
                                 <a:s>return </a:s>
                                 <a:s r="286">
                                    <a:s>ToCode(</a:s>
                                    <a:s r="285">
                                       <a:s>C</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
            </a:s>
                        <a:s>
                           <a:s>display: </a:s>
                           <a:s r="291">
                              <a:s r="290">
                                 <a:s r="289">
                                    <a:s>concept</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="290">
                                    <a:s>text</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="291">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
        }</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="293" locator="102:5-108:9" xsi:type="If">
            <condition localId="281" locator="102:8-102:22" xsi:type="IsNull">
               <operand localId="280" locator="102:8-102:14" name="concept" xsi:type="OperandRef"/>
            </condition>
            <then asType="t:Concept" xsi:type="As">
               <operand localId="282" locator="103:9-103:12" xsi:type="Null"/>
            </then>
            <else localId="292" locator="105:9-108:9" classType="t:Concept" xsi:type="Instance">
               <element name="codes">
                  <value localId="288" locator="106:20-106:52" xsi:type="Query">
                     <source localId="284" locator="106:20-106:35" alias="C">
                        <expression localId="283" locator="106:20-106:33" path="coding" xsi:type="Property">
                           <source name="concept" xsi:type="OperandRef"/>
                        </expression>
                     </source>
                     <return localId="287" locator="106:37-106:52">
                        <expression localId="286" locator="106:44-106:52" name="ToCode" xsi:type="FunctionRef">
                           <operand localId="285" locator="106:51" name="C" xsi:type="AliasRef"/>
                        </expression>
                     </return>
                  </value>
               </element>
               <element name="display">
                  <value localId="291" locator="107:22-107:39" path="value" xsi:type="Property">
                     <source localId="290" locator="107:22-107:33" path="text" xsi:type="Property">
                        <source localId="289" locator="107:22-107:28" name="concept" xsi:type="OperandRef"/>
                     </source>
                  </value>
               </element>
            </else>
         </expression>
         <operand name="concept">
            <operandTypeSpecifier localId="279" locator="101:35-101:54" name="fhir:CodeableConcept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="298" locator="111:1-111:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="298">
               <a:s>define function ToString(value </a:s>
               <a:s r="295">
                  <a:s>AccountStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="297">
                  <a:s r="297">
                     <a:s r="296">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="297">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="297" locator="111:48-111:58" path="value" xsi:type="Property">
            <source localId="296" locator="111:48-111:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="295" locator="111:32-111:44" name="fhir:AccountStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="302" locator="112:1-112:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="302">
               <a:s>define function ToString(value </a:s>
               <a:s r="299">
                  <a:s>ActionCardinalityBehavior</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="301">
                  <a:s r="301">
                     <a:s r="300">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="301">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="301" locator="112:60-112:70" path="value" xsi:type="Property">
            <source localId="300" locator="112:60-112:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="299" locator="112:32-112:56" name="fhir:ActionCardinalityBehavior" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="306" locator="113:1-113:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="306">
               <a:s>define function ToString(value </a:s>
               <a:s r="303">
                  <a:s>ActionConditionKind</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="305">
                  <a:s r="305">
                     <a:s r="304">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="305">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="305" locator="113:54-113:64" path="value" xsi:type="Property">
            <source localId="304" locator="113:54-113:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="303" locator="113:32-113:50" name="fhir:ActionConditionKind" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="310" locator="114:1-114:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="310">
               <a:s>define function ToString(value </a:s>
               <a:s r="307">
                  <a:s>ActionGroupingBehavior</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="309">
                  <a:s r="309">
                     <a:s r="308">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="309">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="309" locator="114:57-114:67" path="value" xsi:type="Property">
            <source localId="308" locator="114:57-114:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="307" locator="114:32-114:53" name="fhir:ActionGroupingBehavior" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="314" locator="115:1-115:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="314">
               <a:s>define function ToString(value </a:s>
               <a:s r="311">
                  <a:s>ActionParticipantType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="313">
                  <a:s r="313">
                     <a:s r="312">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="313">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="313" locator="115:56-115:66" path="value" xsi:type="Property">
            <source localId="312" locator="115:56-115:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="311" locator="115:32-115:52" name="fhir:ActionParticipantType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="318" locator="116:1-116:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="318">
               <a:s>define function ToString(value </a:s>
               <a:s r="315">
                  <a:s>ActionPrecheckBehavior</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="317">
                  <a:s r="317">
                     <a:s r="316">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="317">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="317" locator="116:57-116:67" path="value" xsi:type="Property">
            <source localId="316" locator="116:57-116:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="315" locator="116:32-116:53" name="fhir:ActionPrecheckBehavior" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="322" locator="117:1-117:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="322">
               <a:s>define function ToString(value </a:s>
               <a:s r="319">
                  <a:s>ActionRelationshipType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="321">
                  <a:s r="321">
                     <a:s r="320">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="321">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="321" locator="117:57-117:67" path="value" xsi:type="Property">
            <source localId="320" locator="117:57-117:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="319" locator="117:32-117:53" name="fhir:ActionRelationshipType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="326" locator="118:1-118:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="326">
               <a:s>define function ToString(value </a:s>
               <a:s r="323">
                  <a:s>ActionRequiredBehavior</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="325">
                  <a:s r="325">
                     <a:s r="324">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="325">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="325" locator="118:57-118:67" path="value" xsi:type="Property">
            <source localId="324" locator="118:57-118:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="323" locator="118:32-118:53" name="fhir:ActionRequiredBehavior" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="330" locator="119:1-119:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="330">
               <a:s>define function ToString(value </a:s>
               <a:s r="327">
                  <a:s>ActionSelectionBehavior</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="329">
                  <a:s r="329">
                     <a:s r="328">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="329">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="329" locator="119:58-119:68" path="value" xsi:type="Property">
            <source localId="328" locator="119:58-119:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="327" locator="119:32-119:54" name="fhir:ActionSelectionBehavior" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="334" locator="120:1-120:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="334">
               <a:s>define function ToString(value </a:s>
               <a:s r="331">
                  <a:s>ActivityDefinitionKind</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="333">
                  <a:s r="333">
                     <a:s r="332">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="333">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="333" locator="120:57-120:67" path="value" xsi:type="Property">
            <source localId="332" locator="120:57-120:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="331" locator="120:32-120:53" name="fhir:ActivityDefinitionKind" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="338" locator="121:1-121:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="338">
               <a:s>define function ToString(value </a:s>
               <a:s r="335">
                  <a:s>ActivityParticipantType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="337">
                  <a:s r="337">
                     <a:s r="336">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="337">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="337" locator="121:58-121:68" path="value" xsi:type="Property">
            <source localId="336" locator="121:58-121:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="335" locator="121:32-121:54" name="fhir:ActivityParticipantType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="342" locator="122:1-122:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="342">
               <a:s>define function ToString(value </a:s>
               <a:s r="339">
                  <a:s>AddressType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="341">
                  <a:s r="341">
                     <a:s r="340">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="341">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="341" locator="122:46-122:56" path="value" xsi:type="Property">
            <source localId="340" locator="122:46-122:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="339" locator="122:32-122:42" name="fhir:AddressType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="346" locator="123:1-123:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="346">
               <a:s>define function ToString(value </a:s>
               <a:s r="343">
                  <a:s>AddressUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="345">
                  <a:s r="345">
                     <a:s r="344">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="345">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="345" locator="123:45-123:55" path="value" xsi:type="Property">
            <source localId="344" locator="123:45-123:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="343" locator="123:32-123:41" name="fhir:AddressUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="350" locator="124:1-124:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="350">
               <a:s>define function ToString(value </a:s>
               <a:s r="347">
                  <a:s>AdministrativeGender</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="349">
                  <a:s r="349">
                     <a:s r="348">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="349">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="349" locator="124:55-124:65" path="value" xsi:type="Property">
            <source localId="348" locator="124:55-124:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="347" locator="124:32-124:51" name="fhir:AdministrativeGender" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="354" locator="125:1-125:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="354">
               <a:s>define function ToString(value </a:s>
               <a:s r="351">
                  <a:s>AdverseEventActuality</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="353">
                  <a:s r="353">
                     <a:s r="352">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="353">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="353" locator="125:56-125:66" path="value" xsi:type="Property">
            <source localId="352" locator="125:56-125:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="351" locator="125:32-125:52" name="fhir:AdverseEventActuality" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="358" locator="126:1-126:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="358">
               <a:s>define function ToString(value </a:s>
               <a:s r="355">
                  <a:s>AggregationMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="357">
                  <a:s r="357">
                     <a:s r="356">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="357">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="357" locator="126:50-126:60" path="value" xsi:type="Property">
            <source localId="356" locator="126:50-126:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="355" locator="126:32-126:46" name="fhir:AggregationMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="362" locator="127:1-127:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="362">
               <a:s>define function ToString(value </a:s>
               <a:s r="359">
                  <a:s>AllergyIntoleranceCategory</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="361">
                  <a:s r="361">
                     <a:s r="360">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="361">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="361" locator="127:61-127:71" path="value" xsi:type="Property">
            <source localId="360" locator="127:61-127:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="359" locator="127:32-127:57" name="fhir:AllergyIntoleranceCategory" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="366" locator="128:1-128:74" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="366">
               <a:s>define function ToString(value </a:s>
               <a:s r="363">
                  <a:s>AllergyIntoleranceCriticality</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="365">
                  <a:s r="365">
                     <a:s r="364">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="365">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="365" locator="128:64-128:74" path="value" xsi:type="Property">
            <source localId="364" locator="128:64-128:68" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="363" locator="128:32-128:60" name="fhir:AllergyIntoleranceCriticality" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="370" locator="129:1-129:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="370">
               <a:s>define function ToString(value </a:s>
               <a:s r="367">
                  <a:s>AllergyIntoleranceSeverity</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="369">
                  <a:s r="369">
                     <a:s r="368">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="369">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="369" locator="129:61-129:71" path="value" xsi:type="Property">
            <source localId="368" locator="129:61-129:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="367" locator="129:32-129:57" name="fhir:AllergyIntoleranceSeverity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="374" locator="130:1-130:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="374">
               <a:s>define function ToString(value </a:s>
               <a:s r="371">
                  <a:s>AllergyIntoleranceType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="373">
                  <a:s r="373">
                     <a:s r="372">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="373">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="373" locator="130:57-130:67" path="value" xsi:type="Property">
            <source localId="372" locator="130:57-130:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="371" locator="130:32-130:53" name="fhir:AllergyIntoleranceType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="378" locator="131:1-131:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="378">
               <a:s>define function ToString(value </a:s>
               <a:s r="375">
                  <a:s>AppointmentStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="377">
                  <a:s r="377">
                     <a:s r="376">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="377">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="377" locator="131:52-131:62" path="value" xsi:type="Property">
            <source localId="376" locator="131:52-131:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="375" locator="131:32-131:48" name="fhir:AppointmentStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="382" locator="132:1-132:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="382">
               <a:s>define function ToString(value </a:s>
               <a:s r="379">
                  <a:s>AssertionDirectionType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="381">
                  <a:s r="381">
                     <a:s r="380">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="381">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="381" locator="132:57-132:67" path="value" xsi:type="Property">
            <source localId="380" locator="132:57-132:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="379" locator="132:32-132:53" name="fhir:AssertionDirectionType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="386" locator="133:1-133:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="386">
               <a:s>define function ToString(value </a:s>
               <a:s r="383">
                  <a:s>AssertionOperatorType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="385">
                  <a:s r="385">
                     <a:s r="384">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="385">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="385" locator="133:56-133:66" path="value" xsi:type="Property">
            <source localId="384" locator="133:56-133:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="383" locator="133:32-133:52" name="fhir:AssertionOperatorType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="390" locator="134:1-134:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="390">
               <a:s>define function ToString(value </a:s>
               <a:s r="387">
                  <a:s>AssertionResponseTypes</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="389">
                  <a:s r="389">
                     <a:s r="388">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="389">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="389" locator="134:57-134:67" path="value" xsi:type="Property">
            <source localId="388" locator="134:57-134:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="387" locator="134:32-134:53" name="fhir:AssertionResponseTypes" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="394" locator="135:1-135:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="394">
               <a:s>define function ToString(value </a:s>
               <a:s r="391">
                  <a:s>AuditEventAction</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="393">
                  <a:s r="393">
                     <a:s r="392">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="393">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="393" locator="135:51-135:61" path="value" xsi:type="Property">
            <source localId="392" locator="135:51-135:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="391" locator="135:32-135:47" name="fhir:AuditEventAction" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="398" locator="136:1-136:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="398">
               <a:s>define function ToString(value </a:s>
               <a:s r="395">
                  <a:s>AuditEventAgentNetworkType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="397">
                  <a:s r="397">
                     <a:s r="396">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="397">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="397" locator="136:61-136:71" path="value" xsi:type="Property">
            <source localId="396" locator="136:61-136:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="395" locator="136:32-136:57" name="fhir:AuditEventAgentNetworkType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="402" locator="137:1-137:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="402">
               <a:s>define function ToString(value </a:s>
               <a:s r="399">
                  <a:s>AuditEventOutcome</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="401">
                  <a:s r="401">
                     <a:s r="400">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="401">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="401" locator="137:52-137:62" path="value" xsi:type="Property">
            <source localId="400" locator="137:52-137:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="399" locator="137:32-137:48" name="fhir:AuditEventOutcome" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="406" locator="138:1-138:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="406">
               <a:s>define function ToString(value </a:s>
               <a:s r="403">
                  <a:s>BindingStrength</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="405">
                  <a:s r="405">
                     <a:s r="404">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="405">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="405" locator="138:50-138:60" path="value" xsi:type="Property">
            <source localId="404" locator="138:50-138:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="403" locator="138:32-138:46" name="fhir:BindingStrength" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="410" locator="139:1-139:79" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="410">
               <a:s>define function ToString(value </a:s>
               <a:s r="407">
                  <a:s>BiologicallyDerivedProductCategory</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="409">
                  <a:s r="409">
                     <a:s r="408">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="409">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="409" locator="139:69-139:79" path="value" xsi:type="Property">
            <source localId="408" locator="139:69-139:73" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="407" locator="139:32-139:65" name="fhir:BiologicallyDerivedProductCategory" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="414" locator="140:1-140:77" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="414">
               <a:s>define function ToString(value </a:s>
               <a:s r="411">
                  <a:s>BiologicallyDerivedProductStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="413">
                  <a:s r="413">
                     <a:s r="412">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="413">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="413" locator="140:67-140:77" path="value" xsi:type="Property">
            <source localId="412" locator="140:67-140:71" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="411" locator="140:32-140:63" name="fhir:BiologicallyDerivedProductStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="418" locator="141:1-141:83" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="418">
               <a:s>define function ToString(value </a:s>
               <a:s r="415">
                  <a:s>BiologicallyDerivedProductStorageScale</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="417">
                  <a:s r="417">
                     <a:s r="416">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="417">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="417" locator="141:73-141:83" path="value" xsi:type="Property">
            <source localId="416" locator="141:73-141:77" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="415" locator="141:32-141:69" name="fhir:BiologicallyDerivedProductStorageScale" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="422" locator="142:1-142:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="422">
               <a:s>define function ToString(value </a:s>
               <a:s r="419">
                  <a:s>BundleType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="421">
                  <a:s r="421">
                     <a:s r="420">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="421">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="421" locator="142:45-142:55" path="value" xsi:type="Property">
            <source localId="420" locator="142:45-142:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="419" locator="142:32-142:41" name="fhir:BundleType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="426" locator="143:1-143:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="426">
               <a:s>define function ToString(value </a:s>
               <a:s r="423">
                  <a:s>CapabilityStatementKind</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="425">
                  <a:s r="425">
                     <a:s r="424">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="425">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="425" locator="143:58-143:68" path="value" xsi:type="Property">
            <source localId="424" locator="143:58-143:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="423" locator="143:32-143:54" name="fhir:CapabilityStatementKind" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="430" locator="144:1-144:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="430">
               <a:s>define function ToString(value </a:s>
               <a:s r="427">
                  <a:s>CarePlanActivityKind</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="429">
                  <a:s r="429">
                     <a:s r="428">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="429">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="429" locator="144:55-144:65" path="value" xsi:type="Property">
            <source localId="428" locator="144:55-144:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="427" locator="144:32-144:51" name="fhir:CarePlanActivityKind" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="434" locator="145:1-145:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="434">
               <a:s>define function ToString(value </a:s>
               <a:s r="431">
                  <a:s>CarePlanActivityStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="433">
                  <a:s r="433">
                     <a:s r="432">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="433">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="433" locator="145:57-145:67" path="value" xsi:type="Property">
            <source localId="432" locator="145:57-145:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="431" locator="145:32-145:53" name="fhir:CarePlanActivityStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="438" locator="146:1-146:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="438">
               <a:s>define function ToString(value </a:s>
               <a:s r="435">
                  <a:s>CarePlanIntent</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="437">
                  <a:s r="437">
                     <a:s r="436">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="437">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="437" locator="146:49-146:59" path="value" xsi:type="Property">
            <source localId="436" locator="146:49-146:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="435" locator="146:32-146:45" name="fhir:CarePlanIntent" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="442" locator="147:1-147:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="442">
               <a:s>define function ToString(value </a:s>
               <a:s r="439">
                  <a:s>CarePlanStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="441">
                  <a:s r="441">
                     <a:s r="440">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="441">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="441" locator="147:49-147:59" path="value" xsi:type="Property">
            <source localId="440" locator="147:49-147:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="439" locator="147:32-147:45" name="fhir:CarePlanStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="446" locator="148:1-148:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="446">
               <a:s>define function ToString(value </a:s>
               <a:s r="443">
                  <a:s>CareTeamStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="445">
                  <a:s r="445">
                     <a:s r="444">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="445">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="445" locator="148:49-148:59" path="value" xsi:type="Property">
            <source localId="444" locator="148:49-148:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="443" locator="148:32-148:45" name="fhir:CareTeamStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="450" locator="149:1-149:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="450">
               <a:s>define function ToString(value </a:s>
               <a:s r="447">
                  <a:s>CatalogEntryRelationType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="449">
                  <a:s r="449">
                     <a:s r="448">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="449">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="449" locator="149:59-149:69" path="value" xsi:type="Property">
            <source localId="448" locator="149:59-149:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="447" locator="149:32-149:55" name="fhir:CatalogEntryRelationType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="454" locator="150:1-150:83" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="454">
               <a:s>define function ToString(value </a:s>
               <a:s r="451">
                  <a:s>ChargeItemDefinitionPriceComponentType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="453">
                  <a:s r="453">
                     <a:s r="452">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="453">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="453" locator="150:73-150:83" path="value" xsi:type="Property">
            <source localId="452" locator="150:73-150:77" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="451" locator="150:32-150:69" name="fhir:ChargeItemDefinitionPriceComponentType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="458" locator="151:1-151:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="458">
               <a:s>define function ToString(value </a:s>
               <a:s r="455">
                  <a:s>ChargeItemStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="457">
                  <a:s r="457">
                     <a:s r="456">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="457">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="457" locator="151:51-151:61" path="value" xsi:type="Property">
            <source localId="456" locator="151:51-151:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="455" locator="151:32-151:47" name="fhir:ChargeItemStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="462" locator="152:1-152:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="462">
               <a:s>define function ToString(value </a:s>
               <a:s r="459">
                  <a:s>ClaimResponseStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="461">
                  <a:s r="461">
                     <a:s r="460">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="461">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="461" locator="152:54-152:64" path="value" xsi:type="Property">
            <source localId="460" locator="152:54-152:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="459" locator="152:32-152:50" name="fhir:ClaimResponseStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="466" locator="153:1-153:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="466">
               <a:s>define function ToString(value </a:s>
               <a:s r="463">
                  <a:s>ClaimStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="465">
                  <a:s r="465">
                     <a:s r="464">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="465">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="465" locator="153:46-153:56" path="value" xsi:type="Property">
            <source localId="464" locator="153:46-153:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="463" locator="153:32-153:42" name="fhir:ClaimStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="470" locator="154:1-154:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="470">
               <a:s>define function ToString(value </a:s>
               <a:s r="467">
                  <a:s>ClinicalImpressionStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="469">
                  <a:s r="469">
                     <a:s r="468">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="469">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="469" locator="154:59-154:69" path="value" xsi:type="Property">
            <source localId="468" locator="154:59-154:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="467" locator="154:32-154:55" name="fhir:ClinicalImpressionStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="474" locator="155:1-155:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="474">
               <a:s>define function ToString(value </a:s>
               <a:s r="471">
                  <a:s>CodeSearchSupport</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="473">
                  <a:s r="473">
                     <a:s r="472">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="473">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="473" locator="155:52-155:62" path="value" xsi:type="Property">
            <source localId="472" locator="155:52-155:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="471" locator="155:32-155:48" name="fhir:CodeSearchSupport" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="478" locator="156:1-156:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="478">
               <a:s>define function ToString(value </a:s>
               <a:s r="475">
                  <a:s>CodeSystemContentMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="477">
                  <a:s r="477">
                     <a:s r="476">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="477">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="477" locator="156:56-156:66" path="value" xsi:type="Property">
            <source localId="476" locator="156:56-156:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="475" locator="156:32-156:52" name="fhir:CodeSystemContentMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="482" locator="157:1-157:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="482">
               <a:s>define function ToString(value </a:s>
               <a:s r="479">
                  <a:s>CodeSystemHierarchyMeaning</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="481">
                  <a:s r="481">
                     <a:s r="480">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="481">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="481" locator="157:61-157:71" path="value" xsi:type="Property">
            <source localId="480" locator="157:61-157:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="479" locator="157:32-157:57" name="fhir:CodeSystemHierarchyMeaning" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="486" locator="158:1-158:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="486">
               <a:s>define function ToString(value </a:s>
               <a:s r="483">
                  <a:s>CommunicationPriority</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="485">
                  <a:s r="485">
                     <a:s r="484">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="485">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="485" locator="158:56-158:66" path="value" xsi:type="Property">
            <source localId="484" locator="158:56-158:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="483" locator="158:32-158:52" name="fhir:CommunicationPriority" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="490" locator="159:1-159:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="490">
               <a:s>define function ToString(value </a:s>
               <a:s r="487">
                  <a:s>CommunicationRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="489">
                  <a:s r="489">
                     <a:s r="488">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="489">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="489" locator="159:61-159:71" path="value" xsi:type="Property">
            <source localId="488" locator="159:61-159:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="487" locator="159:32-159:57" name="fhir:CommunicationRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="494" locator="160:1-160:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="494">
               <a:s>define function ToString(value </a:s>
               <a:s r="491">
                  <a:s>CommunicationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="493">
                  <a:s r="493">
                     <a:s r="492">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="493">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="493" locator="160:54-160:64" path="value" xsi:type="Property">
            <source localId="492" locator="160:54-160:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="491" locator="160:32-160:50" name="fhir:CommunicationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="498" locator="161:1-161:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="498">
               <a:s>define function ToString(value </a:s>
               <a:s r="495">
                  <a:s>CompartmentCode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="497">
                  <a:s r="497">
                     <a:s r="496">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="497">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="497" locator="161:50-161:60" path="value" xsi:type="Property">
            <source localId="496" locator="161:50-161:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="495" locator="161:32-161:46" name="fhir:CompartmentCode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="502" locator="162:1-162:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="502">
               <a:s>define function ToString(value </a:s>
               <a:s r="499">
                  <a:s>CompartmentType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="501">
                  <a:s r="501">
                     <a:s r="500">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="501">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="501" locator="162:50-162:60" path="value" xsi:type="Property">
            <source localId="500" locator="162:50-162:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="499" locator="162:32-162:46" name="fhir:CompartmentType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="506" locator="163:1-163:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="506">
               <a:s>define function ToString(value </a:s>
               <a:s r="503">
                  <a:s>CompositionAttestationMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="505">
                  <a:s r="505">
                     <a:s r="504">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="505">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="505" locator="163:61-163:71" path="value" xsi:type="Property">
            <source localId="504" locator="163:61-163:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="503" locator="163:32-163:57" name="fhir:CompositionAttestationMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="510" locator="164:1-164:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="510">
               <a:s>define function ToString(value </a:s>
               <a:s r="507">
                  <a:s>CompositionStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="509">
                  <a:s r="509">
                     <a:s r="508">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="509">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="509" locator="164:52-164:62" path="value" xsi:type="Property">
            <source localId="508" locator="164:52-164:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="507" locator="164:32-164:48" name="fhir:CompositionStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="514" locator="165:1-165:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="514">
               <a:s>define function ToString(value </a:s>
               <a:s r="511">
                  <a:s>ConceptMapEquivalence</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="513">
                  <a:s r="513">
                     <a:s r="512">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="513">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="513" locator="165:56-165:66" path="value" xsi:type="Property">
            <source localId="512" locator="165:56-165:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="511" locator="165:32-165:52" name="fhir:ConceptMapEquivalence" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="518" locator="166:1-166:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="518">
               <a:s>define function ToString(value </a:s>
               <a:s r="515">
                  <a:s>ConceptMapGroupUnmappedMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="517">
                  <a:s r="517">
                     <a:s r="516">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="517">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="517" locator="166:62-166:72" path="value" xsi:type="Property">
            <source localId="516" locator="166:62-166:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="515" locator="166:32-166:58" name="fhir:ConceptMapGroupUnmappedMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="522" locator="167:1-167:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="522">
               <a:s>define function ToString(value </a:s>
               <a:s r="519">
                  <a:s>ConditionalDeleteStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="521">
                  <a:s r="521">
                     <a:s r="520">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="521">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="521" locator="167:58-167:68" path="value" xsi:type="Property">
            <source localId="520" locator="167:58-167:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="519" locator="167:32-167:54" name="fhir:ConditionalDeleteStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="526" locator="168:1-168:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="526">
               <a:s>define function ToString(value </a:s>
               <a:s r="523">
                  <a:s>ConditionalReadStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="525">
                  <a:s r="525">
                     <a:s r="524">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="525">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="525" locator="168:56-168:66" path="value" xsi:type="Property">
            <source localId="524" locator="168:56-168:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="523" locator="168:32-168:52" name="fhir:ConditionalReadStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="530" locator="169:1-169:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="530">
               <a:s>define function ToString(value </a:s>
               <a:s r="527">
                  <a:s>ConsentDataMeaning</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="529">
                  <a:s r="529">
                     <a:s r="528">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="529">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="529" locator="169:53-169:63" path="value" xsi:type="Property">
            <source localId="528" locator="169:53-169:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="527" locator="169:32-169:49" name="fhir:ConsentDataMeaning" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="534" locator="170:1-170:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="534">
               <a:s>define function ToString(value </a:s>
               <a:s r="531">
                  <a:s>ConsentProvisionType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="533">
                  <a:s r="533">
                     <a:s r="532">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="533">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="533" locator="170:55-170:65" path="value" xsi:type="Property">
            <source localId="532" locator="170:55-170:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="531" locator="170:32-170:51" name="fhir:ConsentProvisionType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="538" locator="171:1-171:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="538">
               <a:s>define function ToString(value </a:s>
               <a:s r="535">
                  <a:s>ConsentState</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="537">
                  <a:s r="537">
                     <a:s r="536">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="537">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="537" locator="171:47-171:57" path="value" xsi:type="Property">
            <source localId="536" locator="171:47-171:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="535" locator="171:32-171:43" name="fhir:ConsentState" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="542" locator="172:1-172:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="542">
               <a:s>define function ToString(value </a:s>
               <a:s r="539">
                  <a:s>ConstraintSeverity</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="541">
                  <a:s r="541">
                     <a:s r="540">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="541">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="541" locator="172:53-172:63" path="value" xsi:type="Property">
            <source localId="540" locator="172:53-172:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="539" locator="172:32-172:49" name="fhir:ConstraintSeverity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="546" locator="173:1-173:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="546">
               <a:s>define function ToString(value </a:s>
               <a:s r="543">
                  <a:s>ContactPointSystem</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="545">
                  <a:s r="545">
                     <a:s r="544">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="545">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="545" locator="173:53-173:63" path="value" xsi:type="Property">
            <source localId="544" locator="173:53-173:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="543" locator="173:32-173:49" name="fhir:ContactPointSystem" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="550" locator="174:1-174:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="550">
               <a:s>define function ToString(value </a:s>
               <a:s r="547">
                  <a:s>ContactPointUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="549">
                  <a:s r="549">
                     <a:s r="548">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="549">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="549" locator="174:50-174:60" path="value" xsi:type="Property">
            <source localId="548" locator="174:50-174:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="547" locator="174:32-174:46" name="fhir:ContactPointUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="554" locator="175:1-175:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="554">
               <a:s>define function ToString(value </a:s>
               <a:s r="551">
                  <a:s>ContractPublicationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="553">
                  <a:s r="553">
                     <a:s r="552">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="553">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="553" locator="175:60-175:70" path="value" xsi:type="Property">
            <source localId="552" locator="175:60-175:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="551" locator="175:32-175:56" name="fhir:ContractPublicationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="558" locator="176:1-176:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="558">
               <a:s>define function ToString(value </a:s>
               <a:s r="555">
                  <a:s>ContractStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="557">
                  <a:s r="557">
                     <a:s r="556">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="557">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="557" locator="176:49-176:59" path="value" xsi:type="Property">
            <source localId="556" locator="176:49-176:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="555" locator="176:32-176:45" name="fhir:ContractStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="562" locator="177:1-177:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="562">
               <a:s>define function ToString(value </a:s>
               <a:s r="559">
                  <a:s>ContributorType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="561">
                  <a:s r="561">
                     <a:s r="560">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="561">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="561" locator="177:50-177:60" path="value" xsi:type="Property">
            <source localId="560" locator="177:50-177:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="559" locator="177:32-177:46" name="fhir:ContributorType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="566" locator="178:1-178:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="566">
               <a:s>define function ToString(value </a:s>
               <a:s r="563">
                  <a:s>CoverageStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="565">
                  <a:s r="565">
                     <a:s r="564">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="565">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="565" locator="178:49-178:59" path="value" xsi:type="Property">
            <source localId="564" locator="178:49-178:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="563" locator="178:32-178:45" name="fhir:CoverageStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="570" locator="179:1-179:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="570">
               <a:s>define function ToString(value </a:s>
               <a:s r="567">
                  <a:s>CurrencyCode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="569">
                  <a:s r="569">
                     <a:s r="568">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="569">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="569" locator="179:47-179:57" path="value" xsi:type="Property">
            <source localId="568" locator="179:47-179:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="567" locator="179:32-179:43" name="fhir:CurrencyCode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="574" locator="180:1-180:54" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="574">
               <a:s>define function ToString(value </a:s>
               <a:s r="571">
                  <a:s>DayOfWeek</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="573">
                  <a:s r="573">
                     <a:s r="572">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="573">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="573" locator="180:44-180:54" path="value" xsi:type="Property">
            <source localId="572" locator="180:44-180:48" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="571" locator="180:32-180:40" name="fhir:DayOfWeek" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="578" locator="181:1-181:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="578">
               <a:s>define function ToString(value </a:s>
               <a:s r="575">
                  <a:s>DaysOfWeek</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="577">
                  <a:s r="577">
                     <a:s r="576">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="577">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="577" locator="181:45-181:55" path="value" xsi:type="Property">
            <source localId="576" locator="181:45-181:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="575" locator="181:32-181:41" name="fhir:DaysOfWeek" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="582" locator="182:1-182:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="582">
               <a:s>define function ToString(value </a:s>
               <a:s r="579">
                  <a:s>DetectedIssueSeverity</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="581">
                  <a:s r="581">
                     <a:s r="580">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="581">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="581" locator="182:56-182:66" path="value" xsi:type="Property">
            <source localId="580" locator="182:56-182:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="579" locator="182:32-182:52" name="fhir:DetectedIssueSeverity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="586" locator="183:1-183:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="586">
               <a:s>define function ToString(value </a:s>
               <a:s r="583">
                  <a:s>DetectedIssueStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="585">
                  <a:s r="585">
                     <a:s r="584">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="585">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="585" locator="183:54-183:64" path="value" xsi:type="Property">
            <source localId="584" locator="183:54-183:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="583" locator="183:32-183:50" name="fhir:DetectedIssueStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="590" locator="184:1-184:73" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="590">
               <a:s>define function ToString(value </a:s>
               <a:s r="587">
                  <a:s>DeviceMetricCalibrationState</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="589">
                  <a:s r="589">
                     <a:s r="588">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="589">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="589" locator="184:63-184:73" path="value" xsi:type="Property">
            <source localId="588" locator="184:63-184:67" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="587" locator="184:32-184:59" name="fhir:DeviceMetricCalibrationState" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="594" locator="185:1-185:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="594">
               <a:s>define function ToString(value </a:s>
               <a:s r="591">
                  <a:s>DeviceMetricCalibrationType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="593">
                  <a:s r="593">
                     <a:s r="592">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="593">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="593" locator="185:62-185:72" path="value" xsi:type="Property">
            <source localId="592" locator="185:62-185:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="591" locator="185:32-185:58" name="fhir:DeviceMetricCalibrationType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="598" locator="186:1-186:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="598">
               <a:s>define function ToString(value </a:s>
               <a:s r="595">
                  <a:s>DeviceMetricCategory</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="597">
                  <a:s r="597">
                     <a:s r="596">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="597">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="597" locator="186:55-186:65" path="value" xsi:type="Property">
            <source localId="596" locator="186:55-186:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="595" locator="186:32-186:51" name="fhir:DeviceMetricCategory" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="602" locator="187:1-187:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="602">
               <a:s>define function ToString(value </a:s>
               <a:s r="599">
                  <a:s>DeviceMetricColor</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="601">
                  <a:s r="601">
                     <a:s r="600">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="601">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="601" locator="187:52-187:62" path="value" xsi:type="Property">
            <source localId="600" locator="187:52-187:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="599" locator="187:32-187:48" name="fhir:DeviceMetricColor" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="606" locator="188:1-188:74" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="606">
               <a:s>define function ToString(value </a:s>
               <a:s r="603">
                  <a:s>DeviceMetricOperationalStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="605">
                  <a:s r="605">
                     <a:s r="604">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="605">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="605" locator="188:64-188:74" path="value" xsi:type="Property">
            <source localId="604" locator="188:64-188:68" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="603" locator="188:32-188:60" name="fhir:DeviceMetricOperationalStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="610" locator="189:1-189:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="610">
               <a:s>define function ToString(value </a:s>
               <a:s r="607">
                  <a:s>DeviceNameType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="609">
                  <a:s r="609">
                     <a:s r="608">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="609">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="609" locator="189:49-189:59" path="value" xsi:type="Property">
            <source localId="608" locator="189:49-189:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="607" locator="189:32-189:45" name="fhir:DeviceNameType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="614" locator="190:1-190:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="614">
               <a:s>define function ToString(value </a:s>
               <a:s r="611">
                  <a:s>DeviceRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="613">
                  <a:s r="613">
                     <a:s r="612">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="613">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="613" locator="190:54-190:64" path="value" xsi:type="Property">
            <source localId="612" locator="190:54-190:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="611" locator="190:32-190:50" name="fhir:DeviceRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="618" locator="191:1-191:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="618">
               <a:s>define function ToString(value </a:s>
               <a:s r="615">
                  <a:s>DeviceUseStatementStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="617">
                  <a:s r="617">
                     <a:s r="616">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="617">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="617" locator="191:59-191:69" path="value" xsi:type="Property">
            <source localId="616" locator="191:59-191:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="615" locator="191:32-191:55" name="fhir:DeviceUseStatementStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="622" locator="192:1-192:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="622">
               <a:s>define function ToString(value </a:s>
               <a:s r="619">
                  <a:s>DiagnosticReportStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="621">
                  <a:s r="621">
                     <a:s r="620">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="621">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="621" locator="192:57-192:67" path="value" xsi:type="Property">
            <source localId="620" locator="192:57-192:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="619" locator="192:32-192:53" name="fhir:DiagnosticReportStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="626" locator="193:1-193:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="626">
               <a:s>define function ToString(value </a:s>
               <a:s r="623">
                  <a:s>DiscriminatorType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="625">
                  <a:s r="625">
                     <a:s r="624">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="625">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="625" locator="193:52-193:62" path="value" xsi:type="Property">
            <source localId="624" locator="193:52-193:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="623" locator="193:32-193:48" name="fhir:DiscriminatorType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="630" locator="194:1-194:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="630">
               <a:s>define function ToString(value </a:s>
               <a:s r="627">
                  <a:s>DocumentConfidentiality</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="629">
                  <a:s r="629">
                     <a:s r="628">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="629">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="629" locator="194:58-194:68" path="value" xsi:type="Property">
            <source localId="628" locator="194:58-194:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="627" locator="194:32-194:54" name="fhir:DocumentConfidentiality" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="634" locator="195:1-195:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="634">
               <a:s>define function ToString(value </a:s>
               <a:s r="631">
                  <a:s>DocumentMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="633">
                  <a:s r="633">
                     <a:s r="632">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="633">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="633" locator="195:47-195:57" path="value" xsi:type="Property">
            <source localId="632" locator="195:47-195:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="631" locator="195:32-195:43" name="fhir:DocumentMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="638" locator="196:1-196:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="638">
               <a:s>define function ToString(value </a:s>
               <a:s r="635">
                  <a:s>DocumentReferenceStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="637">
                  <a:s r="637">
                     <a:s r="636">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="637">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="637" locator="196:58-196:68" path="value" xsi:type="Property">
            <source localId="636" locator="196:58-196:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="635" locator="196:32-196:54" name="fhir:DocumentReferenceStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="642" locator="197:1-197:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="642">
               <a:s>define function ToString(value </a:s>
               <a:s r="639">
                  <a:s>DocumentRelationshipType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="641">
                  <a:s r="641">
                     <a:s r="640">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="641">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="641" locator="197:59-197:69" path="value" xsi:type="Property">
            <source localId="640" locator="197:59-197:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="639" locator="197:32-197:55" name="fhir:DocumentRelationshipType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="646" locator="198:1-198:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="646">
               <a:s>define function ToString(value </a:s>
               <a:s r="643">
                  <a:s>EligibilityRequestPurpose</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="645">
                  <a:s r="645">
                     <a:s r="644">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="645">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="645" locator="198:60-198:70" path="value" xsi:type="Property">
            <source localId="644" locator="198:60-198:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="643" locator="198:32-198:56" name="fhir:EligibilityRequestPurpose" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="650" locator="199:1-199:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="650">
               <a:s>define function ToString(value </a:s>
               <a:s r="647">
                  <a:s>EligibilityRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="649">
                  <a:s r="649">
                     <a:s r="648">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="649">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="649" locator="199:59-199:69" path="value" xsi:type="Property">
            <source localId="648" locator="199:59-199:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="647" locator="199:32-199:55" name="fhir:EligibilityRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="654" locator="200:1-200:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="654">
               <a:s>define function ToString(value </a:s>
               <a:s r="651">
                  <a:s>EligibilityResponsePurpose</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="653">
                  <a:s r="653">
                     <a:s r="652">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="653">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="653" locator="200:61-200:71" path="value" xsi:type="Property">
            <source localId="652" locator="200:61-200:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="651" locator="200:32-200:57" name="fhir:EligibilityResponsePurpose" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="658" locator="201:1-201:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="658">
               <a:s>define function ToString(value </a:s>
               <a:s r="655">
                  <a:s>EligibilityResponseStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="657">
                  <a:s r="657">
                     <a:s r="656">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="657">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="657" locator="201:60-201:70" path="value" xsi:type="Property">
            <source localId="656" locator="201:60-201:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="655" locator="201:32-201:56" name="fhir:EligibilityResponseStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="662" locator="202:1-202:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="662">
               <a:s>define function ToString(value </a:s>
               <a:s r="659">
                  <a:s>EnableWhenBehavior</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="661">
                  <a:s r="661">
                     <a:s r="660">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="661">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="661" locator="202:53-202:63" path="value" xsi:type="Property">
            <source localId="660" locator="202:53-202:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="659" locator="202:32-202:49" name="fhir:EnableWhenBehavior" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="666" locator="203:1-203:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="666">
               <a:s>define function ToString(value </a:s>
               <a:s r="663">
                  <a:s>EncounterLocationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="665">
                  <a:s r="665">
                     <a:s r="664">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="665">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="665" locator="203:58-203:68" path="value" xsi:type="Property">
            <source localId="664" locator="203:58-203:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="663" locator="203:32-203:54" name="fhir:EncounterLocationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="670" locator="204:1-204:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="670">
               <a:s>define function ToString(value </a:s>
               <a:s r="667">
                  <a:s>EncounterStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="669">
                  <a:s r="669">
                     <a:s r="668">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="669">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="669" locator="204:50-204:60" path="value" xsi:type="Property">
            <source localId="668" locator="204:50-204:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="667" locator="204:32-204:46" name="fhir:EncounterStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="674" locator="205:1-205:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="674">
               <a:s>define function ToString(value </a:s>
               <a:s r="671">
                  <a:s>EndpointStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="673">
                  <a:s r="673">
                     <a:s r="672">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="673">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="673" locator="205:49-205:59" path="value" xsi:type="Property">
            <source localId="672" locator="205:49-205:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="671" locator="205:32-205:45" name="fhir:EndpointStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="678" locator="206:1-206:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="678">
               <a:s>define function ToString(value </a:s>
               <a:s r="675">
                  <a:s>EnrollmentRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="677">
                  <a:s r="677">
                     <a:s r="676">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="677">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="677" locator="206:58-206:68" path="value" xsi:type="Property">
            <source localId="676" locator="206:58-206:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="675" locator="206:32-206:54" name="fhir:EnrollmentRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="682" locator="207:1-207:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="682">
               <a:s>define function ToString(value </a:s>
               <a:s r="679">
                  <a:s>EnrollmentResponseStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="681">
                  <a:s r="681">
                     <a:s r="680">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="681">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="681" locator="207:59-207:69" path="value" xsi:type="Property">
            <source localId="680" locator="207:59-207:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="679" locator="207:32-207:55" name="fhir:EnrollmentResponseStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="686" locator="208:1-208:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="686">
               <a:s>define function ToString(value </a:s>
               <a:s r="683">
                  <a:s>EpisodeOfCareStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="685">
                  <a:s r="685">
                     <a:s r="684">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="685">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="685" locator="208:54-208:64" path="value" xsi:type="Property">
            <source localId="684" locator="208:54-208:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="683" locator="208:32-208:50" name="fhir:EpisodeOfCareStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="690" locator="209:1-209:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="690">
               <a:s>define function ToString(value </a:s>
               <a:s r="687">
                  <a:s>EventCapabilityMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="689">
                  <a:s r="689">
                     <a:s r="688">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="689">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="689" locator="209:54-209:64" path="value" xsi:type="Property">
            <source localId="688" locator="209:54-209:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="687" locator="209:32-209:50" name="fhir:EventCapabilityMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="694" locator="210:1-210:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="694">
               <a:s>define function ToString(value </a:s>
               <a:s r="691">
                  <a:s>EventTiming</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="693">
                  <a:s r="693">
                     <a:s r="692">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="693">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="693" locator="210:46-210:56" path="value" xsi:type="Property">
            <source localId="692" locator="210:46-210:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="691" locator="210:32-210:42" name="fhir:EventTiming" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="698" locator="211:1-211:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="698">
               <a:s>define function ToString(value </a:s>
               <a:s r="695">
                  <a:s>EvidenceVariableType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="697">
                  <a:s r="697">
                     <a:s r="696">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="697">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="697" locator="211:55-211:65" path="value" xsi:type="Property">
            <source localId="696" locator="211:55-211:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="695" locator="211:32-211:51" name="fhir:EvidenceVariableType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="702" locator="212:1-212:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="702">
               <a:s>define function ToString(value </a:s>
               <a:s r="699">
                  <a:s>ExampleScenarioActorType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="701">
                  <a:s r="701">
                     <a:s r="700">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="701">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="701" locator="212:59-212:69" path="value" xsi:type="Property">
            <source localId="700" locator="212:59-212:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="699" locator="212:32-212:55" name="fhir:ExampleScenarioActorType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="706" locator="213:1-213:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="706">
               <a:s>define function ToString(value </a:s>
               <a:s r="703">
                  <a:s>ExplanationOfBenefitStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="705">
                  <a:s r="705">
                     <a:s r="704">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="705">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="705" locator="213:61-213:71" path="value" xsi:type="Property">
            <source localId="704" locator="213:61-213:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="703" locator="213:32-213:57" name="fhir:ExplanationOfBenefitStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="710" locator="214:1-214:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="710">
               <a:s>define function ToString(value </a:s>
               <a:s r="707">
                  <a:s>ExposureState</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="709">
                  <a:s r="709">
                     <a:s r="708">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="709">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="709" locator="214:48-214:58" path="value" xsi:type="Property">
            <source localId="708" locator="214:48-214:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="707" locator="214:32-214:44" name="fhir:ExposureState" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="714" locator="215:1-215:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="714">
               <a:s>define function ToString(value </a:s>
               <a:s r="711">
                  <a:s>ExtensionContextType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="713">
                  <a:s r="713">
                     <a:s r="712">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="713">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="713" locator="215:55-215:65" path="value" xsi:type="Property">
            <source localId="712" locator="215:55-215:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="711" locator="215:32-215:51" name="fhir:ExtensionContextType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="718" locator="216:1-216:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="718">
               <a:s>define function ToString(value </a:s>
               <a:s r="715">
                  <a:s>FHIRAllTypes</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="717">
                  <a:s r="717">
                     <a:s r="716">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="717">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="717" locator="216:47-216:57" path="value" xsi:type="Property">
            <source localId="716" locator="216:47-216:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="715" locator="216:32-216:43" name="fhir:FHIRAllTypes" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="722" locator="217:1-217:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="722">
               <a:s>define function ToString(value </a:s>
               <a:s r="719">
                  <a:s>FHIRDefinedType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="721">
                  <a:s r="721">
                     <a:s r="720">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="721">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="721" locator="217:50-217:60" path="value" xsi:type="Property">
            <source localId="720" locator="217:50-217:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="719" locator="217:32-217:46" name="fhir:FHIRDefinedType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="726" locator="218:1-218:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="726">
               <a:s>define function ToString(value </a:s>
               <a:s r="723">
                  <a:s>FHIRDeviceStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="725">
                  <a:s r="725">
                     <a:s r="724">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="725">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="725" locator="218:51-218:61" path="value" xsi:type="Property">
            <source localId="724" locator="218:51-218:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="723" locator="218:32-218:47" name="fhir:FHIRDeviceStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="730" locator="219:1-219:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="730">
               <a:s>define function ToString(value </a:s>
               <a:s r="727">
                  <a:s>FHIRResourceType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="729">
                  <a:s r="729">
                     <a:s r="728">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="729">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="729" locator="219:51-219:61" path="value" xsi:type="Property">
            <source localId="728" locator="219:51-219:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="727" locator="219:32-219:47" name="fhir:FHIRResourceType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="734" locator="220:1-220:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="734">
               <a:s>define function ToString(value </a:s>
               <a:s r="731">
                  <a:s>FHIRSubstanceStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="733">
                  <a:s r="733">
                     <a:s r="732">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="733">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="733" locator="220:54-220:64" path="value" xsi:type="Property">
            <source localId="732" locator="220:54-220:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="731" locator="220:32-220:50" name="fhir:FHIRSubstanceStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="738" locator="221:1-221:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="738">
               <a:s>define function ToString(value </a:s>
               <a:s r="735">
                  <a:s>FHIRVersion</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="737">
                  <a:s r="737">
                     <a:s r="736">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="737">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="737" locator="221:46-221:56" path="value" xsi:type="Property">
            <source localId="736" locator="221:46-221:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="735" locator="221:32-221:42" name="fhir:FHIRVersion" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="742" locator="222:1-222:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="742">
               <a:s>define function ToString(value </a:s>
               <a:s r="739">
                  <a:s>FamilyHistoryStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="741">
                  <a:s r="741">
                     <a:s r="740">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="741">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="741" locator="222:54-222:64" path="value" xsi:type="Property">
            <source localId="740" locator="222:54-222:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="739" locator="222:32-222:50" name="fhir:FamilyHistoryStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="746" locator="223:1-223:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="746">
               <a:s>define function ToString(value </a:s>
               <a:s r="743">
                  <a:s>FilterOperator</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="745">
                  <a:s r="745">
                     <a:s r="744">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="745">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="745" locator="223:49-223:59" path="value" xsi:type="Property">
            <source localId="744" locator="223:49-223:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="743" locator="223:32-223:45" name="fhir:FilterOperator" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="750" locator="224:1-224:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="750">
               <a:s>define function ToString(value </a:s>
               <a:s r="747">
                  <a:s>FlagStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="749">
                  <a:s r="749">
                     <a:s r="748">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="749">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="749" locator="224:45-224:55" path="value" xsi:type="Property">
            <source localId="748" locator="224:45-224:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="747" locator="224:32-224:41" name="fhir:FlagStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="754" locator="225:1-225:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="754">
               <a:s>define function ToString(value </a:s>
               <a:s r="751">
                  <a:s>GoalLifecycleStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="753">
                  <a:s r="753">
                     <a:s r="752">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="753">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="753" locator="225:54-225:64" path="value" xsi:type="Property">
            <source localId="752" locator="225:54-225:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="751" locator="225:32-225:50" name="fhir:GoalLifecycleStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="758" locator="226:1-226:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="758">
               <a:s>define function ToString(value </a:s>
               <a:s r="755">
                  <a:s>GraphCompartmentRule</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="757">
                  <a:s r="757">
                     <a:s r="756">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="757">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="757" locator="226:55-226:65" path="value" xsi:type="Property">
            <source localId="756" locator="226:55-226:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="755" locator="226:32-226:51" name="fhir:GraphCompartmentRule" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="762" locator="227:1-227:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="762">
               <a:s>define function ToString(value </a:s>
               <a:s r="759">
                  <a:s>GraphCompartmentUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="761">
                  <a:s r="761">
                     <a:s r="760">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="761">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="761" locator="227:54-227:64" path="value" xsi:type="Property">
            <source localId="760" locator="227:54-227:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="759" locator="227:32-227:50" name="fhir:GraphCompartmentUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="766" locator="228:1-228:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="766">
               <a:s>define function ToString(value </a:s>
               <a:s r="763">
                  <a:s>GroupMeasure</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="765">
                  <a:s r="765">
                     <a:s r="764">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="765">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="765" locator="228:47-228:57" path="value" xsi:type="Property">
            <source localId="764" locator="228:47-228:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="763" locator="228:32-228:43" name="fhir:GroupMeasure" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="770" locator="229:1-229:54" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="770">
               <a:s>define function ToString(value </a:s>
               <a:s r="767">
                  <a:s>GroupType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="769">
                  <a:s r="769">
                     <a:s r="768">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="769">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="769" locator="229:44-229:54" path="value" xsi:type="Property">
            <source localId="768" locator="229:44-229:48" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="767" locator="229:32-229:40" name="fhir:GroupType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="774" locator="230:1-230:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="774">
               <a:s>define function ToString(value </a:s>
               <a:s r="771">
                  <a:s>GuidanceResponseStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="773">
                  <a:s r="773">
                     <a:s r="772">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="773">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="773" locator="230:57-230:67" path="value" xsi:type="Property">
            <source localId="772" locator="230:57-230:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="771" locator="230:32-230:53" name="fhir:GuidanceResponseStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="778" locator="231:1-231:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="778">
               <a:s>define function ToString(value </a:s>
               <a:s r="775">
                  <a:s>GuidePageGeneration</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="777">
                  <a:s r="777">
                     <a:s r="776">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="777">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="777" locator="231:54-231:64" path="value" xsi:type="Property">
            <source localId="776" locator="231:54-231:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="775" locator="231:32-231:50" name="fhir:GuidePageGeneration" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="782" locator="232:1-232:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="782">
               <a:s>define function ToString(value </a:s>
               <a:s r="779">
                  <a:s>GuideParameterCode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="781">
                  <a:s r="781">
                     <a:s r="780">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="781">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="781" locator="232:53-232:63" path="value" xsi:type="Property">
            <source localId="780" locator="232:53-232:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="779" locator="232:32-232:49" name="fhir:GuideParameterCode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="786" locator="233:1-233:53" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="786">
               <a:s>define function ToString(value </a:s>
               <a:s r="783">
                  <a:s>HTTPVerb</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="785">
                  <a:s r="785">
                     <a:s r="784">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="785">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="785" locator="233:43-233:53" path="value" xsi:type="Property">
            <source localId="784" locator="233:43-233:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="783" locator="233:32-233:39" name="fhir:HTTPVerb" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="790" locator="234:1-234:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="790">
               <a:s>define function ToString(value </a:s>
               <a:s r="787">
                  <a:s>IdentifierUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="789">
                  <a:s r="789">
                     <a:s r="788">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="789">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="789" locator="234:48-234:58" path="value" xsi:type="Property">
            <source localId="788" locator="234:48-234:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="787" locator="234:32-234:44" name="fhir:IdentifierUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="794" locator="235:1-235:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="794">
               <a:s>define function ToString(value </a:s>
               <a:s r="791">
                  <a:s>IdentityAssuranceLevel</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="793">
                  <a:s r="793">
                     <a:s r="792">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="793">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="793" locator="235:57-235:67" path="value" xsi:type="Property">
            <source localId="792" locator="235:57-235:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="791" locator="235:32-235:53" name="fhir:IdentityAssuranceLevel" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="798" locator="236:1-236:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="798">
               <a:s>define function ToString(value </a:s>
               <a:s r="795">
                  <a:s>ImagingStudyStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="797">
                  <a:s r="797">
                     <a:s r="796">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="797">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="797" locator="236:53-236:63" path="value" xsi:type="Property">
            <source localId="796" locator="236:53-236:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="795" locator="236:32-236:49" name="fhir:ImagingStudyStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="802" locator="237:1-237:73" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="802">
               <a:s>define function ToString(value </a:s>
               <a:s r="799">
                  <a:s>ImmunizationEvaluationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="801">
                  <a:s r="801">
                     <a:s r="800">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="801">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="801" locator="237:63-237:73" path="value" xsi:type="Property">
            <source localId="800" locator="237:63-237:67" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="799" locator="237:32-237:59" name="fhir:ImmunizationEvaluationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="806" locator="238:1-238:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="806">
               <a:s>define function ToString(value </a:s>
               <a:s r="803">
                  <a:s>ImmunizationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="805">
                  <a:s r="805">
                     <a:s r="804">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="805">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="805" locator="238:53-238:63" path="value" xsi:type="Property">
            <source localId="804" locator="238:53-238:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="803" locator="238:32-238:49" name="fhir:ImmunizationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="810" locator="239:1-239:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="810">
               <a:s>define function ToString(value </a:s>
               <a:s r="807">
                  <a:s>InvoicePriceComponentType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="809">
                  <a:s r="809">
                     <a:s r="808">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="809">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="809" locator="239:60-239:70" path="value" xsi:type="Property">
            <source localId="808" locator="239:60-239:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="807" locator="239:32-239:56" name="fhir:InvoicePriceComponentType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="814" locator="240:1-240:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="814">
               <a:s>define function ToString(value </a:s>
               <a:s r="811">
                  <a:s>InvoiceStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="813">
                  <a:s r="813">
                     <a:s r="812">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="813">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="813" locator="240:48-240:58" path="value" xsi:type="Property">
            <source localId="812" locator="240:48-240:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="811" locator="240:32-240:44" name="fhir:InvoiceStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="818" locator="241:1-241:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="818">
               <a:s>define function ToString(value </a:s>
               <a:s r="815">
                  <a:s>IssueSeverity</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="817">
                  <a:s r="817">
                     <a:s r="816">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="817">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="817" locator="241:48-241:58" path="value" xsi:type="Property">
            <source localId="816" locator="241:48-241:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="815" locator="241:32-241:44" name="fhir:IssueSeverity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="822" locator="242:1-242:54" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="822">
               <a:s>define function ToString(value </a:s>
               <a:s r="819">
                  <a:s>IssueType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="821">
                  <a:s r="821">
                     <a:s r="820">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="821">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="821" locator="242:44-242:54" path="value" xsi:type="Property">
            <source localId="820" locator="242:44-242:48" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="819" locator="242:32-242:40" name="fhir:IssueType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="826" locator="243:1-243:53" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="826">
               <a:s>define function ToString(value </a:s>
               <a:s r="823">
                  <a:s>LinkType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="825">
                  <a:s r="825">
                     <a:s r="824">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="825">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="825" locator="243:43-243:53" path="value" xsi:type="Property">
            <source localId="824" locator="243:43-243:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="823" locator="243:32-243:39" name="fhir:LinkType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="830" locator="244:1-244:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="830">
               <a:s>define function ToString(value </a:s>
               <a:s r="827">
                  <a:s>LinkageType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="829">
                  <a:s r="829">
                     <a:s r="828">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="829">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="829" locator="244:46-244:56" path="value" xsi:type="Property">
            <source localId="828" locator="244:46-244:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="827" locator="244:32-244:42" name="fhir:LinkageType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="834" locator="245:1-245:53" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="834">
               <a:s>define function ToString(value </a:s>
               <a:s r="831">
                  <a:s>ListMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="833">
                  <a:s r="833">
                     <a:s r="832">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="833">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="833" locator="245:43-245:53" path="value" xsi:type="Property">
            <source localId="832" locator="245:43-245:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="831" locator="245:32-245:39" name="fhir:ListMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="838" locator="246:1-246:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="838">
               <a:s>define function ToString(value </a:s>
               <a:s r="835">
                  <a:s>ListStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="837">
                  <a:s r="837">
                     <a:s r="836">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="837">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="837" locator="246:45-246:55" path="value" xsi:type="Property">
            <source localId="836" locator="246:45-246:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="835" locator="246:32-246:41" name="fhir:ListStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="842" locator="247:1-247:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="842">
               <a:s>define function ToString(value </a:s>
               <a:s r="839">
                  <a:s>LocationMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="841">
                  <a:s r="841">
                     <a:s r="840">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="841">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="841" locator="247:47-247:57" path="value" xsi:type="Property">
            <source localId="840" locator="247:47-247:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="839" locator="247:32-247:43" name="fhir:LocationMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="846" locator="248:1-248:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="846">
               <a:s>define function ToString(value </a:s>
               <a:s r="843">
                  <a:s>LocationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="845">
                  <a:s r="845">
                     <a:s r="844">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="845">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="845" locator="248:49-248:59" path="value" xsi:type="Property">
            <source localId="844" locator="248:49-248:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="843" locator="248:32-248:45" name="fhir:LocationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="850" locator="249:1-249:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="850">
               <a:s>define function ToString(value </a:s>
               <a:s r="847">
                  <a:s>MeasureReportStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="849">
                  <a:s r="849">
                     <a:s r="848">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="849">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="849" locator="249:54-249:64" path="value" xsi:type="Property">
            <source localId="848" locator="249:54-249:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="847" locator="249:32-249:50" name="fhir:MeasureReportStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="854" locator="250:1-250:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="854">
               <a:s>define function ToString(value </a:s>
               <a:s r="851">
                  <a:s>MeasureReportType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="853">
                  <a:s r="853">
                     <a:s r="852">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="853">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="853" locator="250:52-250:62" path="value" xsi:type="Property">
            <source localId="852" locator="250:52-250:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="851" locator="250:32-250:48" name="fhir:MeasureReportType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="858" locator="251:1-251:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="858">
               <a:s>define function ToString(value </a:s>
               <a:s r="855">
                  <a:s>MediaStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="857">
                  <a:s r="857">
                     <a:s r="856">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="857">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="857" locator="251:46-251:56" path="value" xsi:type="Property">
            <source localId="856" locator="251:46-251:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="855" locator="251:32-251:42" name="fhir:MediaStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="862" locator="252:1-252:75" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="862">
               <a:s>define function ToString(value </a:s>
               <a:s r="859">
                  <a:s>MedicationAdministrationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="861">
                  <a:s r="861">
                     <a:s r="860">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="861">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="861" locator="252:65-252:75" path="value" xsi:type="Property">
            <source localId="860" locator="252:65-252:69" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="859" locator="252:32-252:61" name="fhir:MedicationAdministrationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="866" locator="253:1-253:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="866">
               <a:s>define function ToString(value </a:s>
               <a:s r="863">
                  <a:s>MedicationDispenseStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="865">
                  <a:s r="865">
                     <a:s r="864">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="865">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="865" locator="253:59-253:69" path="value" xsi:type="Property">
            <source localId="864" locator="253:59-253:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="863" locator="253:32-253:55" name="fhir:MedicationDispenseStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="870" locator="254:1-254:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="870">
               <a:s>define function ToString(value </a:s>
               <a:s r="867">
                  <a:s>MedicationKnowledgeStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="869">
                  <a:s r="869">
                     <a:s r="868">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="869">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="869" locator="254:60-254:70" path="value" xsi:type="Property">
            <source localId="868" locator="254:60-254:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="867" locator="254:32-254:56" name="fhir:MedicationKnowledgeStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="874" locator="255:1-255:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="874">
               <a:s>define function ToString(value </a:s>
               <a:s r="871">
                  <a:s>MedicationRequestIntent</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="873">
                  <a:s r="873">
                     <a:s r="872">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="873">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="873" locator="255:58-255:68" path="value" xsi:type="Property">
            <source localId="872" locator="255:58-255:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="871" locator="255:32-255:54" name="fhir:MedicationRequestIntent" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="878" locator="256:1-256:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="878">
               <a:s>define function ToString(value </a:s>
               <a:s r="875">
                  <a:s>MedicationRequestPriority</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="877">
                  <a:s r="877">
                     <a:s r="876">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="877">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="877" locator="256:60-256:70" path="value" xsi:type="Property">
            <source localId="876" locator="256:60-256:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="875" locator="256:32-256:56" name="fhir:MedicationRequestPriority" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="882" locator="257:1-257:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="882">
               <a:s>define function ToString(value </a:s>
               <a:s r="879">
                  <a:s>MedicationRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="881">
                  <a:s r="881">
                     <a:s r="880">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="881">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="881" locator="257:58-257:68" path="value" xsi:type="Property">
            <source localId="880" locator="257:58-257:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="879" locator="257:32-257:54" name="fhir:MedicationRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="886" locator="258:1-258:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="886">
               <a:s>define function ToString(value </a:s>
               <a:s r="883">
                  <a:s>MedicationStatementStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="885">
                  <a:s r="885">
                     <a:s r="884">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="885">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="885" locator="258:60-258:70" path="value" xsi:type="Property">
            <source localId="884" locator="258:60-258:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="883" locator="258:32-258:56" name="fhir:MedicationStatementStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="890" locator="259:1-259:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="890">
               <a:s>define function ToString(value </a:s>
               <a:s r="887">
                  <a:s>MedicationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="889">
                  <a:s r="889">
                     <a:s r="888">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="889">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="889" locator="259:51-259:61" path="value" xsi:type="Property">
            <source localId="888" locator="259:51-259:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="887" locator="259:32-259:47" name="fhir:MedicationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="894" locator="260:1-260:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="894">
               <a:s>define function ToString(value </a:s>
               <a:s r="891">
                  <a:s>MessageSignificanceCategory</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="893">
                  <a:s r="893">
                     <a:s r="892">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="893">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="893" locator="260:62-260:72" path="value" xsi:type="Property">
            <source localId="892" locator="260:62-260:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="891" locator="260:32-260:58" name="fhir:MessageSignificanceCategory" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="898" locator="261:1-261:75" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="898">
               <a:s>define function ToString(value </a:s>
               <a:s r="895">
                  <a:s>Messageheader_Response_Request</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="897">
                  <a:s r="897">
                     <a:s r="896">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="897">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="897" locator="261:65-261:75" path="value" xsi:type="Property">
            <source localId="896" locator="261:65-261:69" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="895" locator="261:32-261:61" name="fhir:Messageheader_Response_Request" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="902" locator="262:1-262:53" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="902">
               <a:s>define function ToString(value </a:s>
               <a:s r="899">
                  <a:s>MimeType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="901">
                  <a:s r="901">
                     <a:s r="900">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="901">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="901" locator="262:43-262:53" path="value" xsi:type="Property">
            <source localId="900" locator="262:43-262:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="899" locator="262:32-262:39" name="fhir:MimeType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="906" locator="263:1-263:52" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="906">
               <a:s>define function ToString(value </a:s>
               <a:s r="903">
                  <a:s>NameUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="905">
                  <a:s r="905">
                     <a:s r="904">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="905">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="905" locator="263:42-263:52" path="value" xsi:type="Property">
            <source localId="904" locator="263:42-263:46" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="903" locator="263:32-263:38" name="fhir:NameUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="910" locator="264:1-264:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="910">
               <a:s>define function ToString(value </a:s>
               <a:s r="907">
                  <a:s>NamingSystemIdentifierType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="909">
                  <a:s r="909">
                     <a:s r="908">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="909">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="909" locator="264:61-264:71" path="value" xsi:type="Property">
            <source localId="908" locator="264:61-264:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="907" locator="264:32-264:57" name="fhir:NamingSystemIdentifierType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="914" locator="265:1-265:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="914">
               <a:s>define function ToString(value </a:s>
               <a:s r="911">
                  <a:s>NamingSystemType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="913">
                  <a:s r="913">
                     <a:s r="912">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="913">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="913" locator="265:51-265:61" path="value" xsi:type="Property">
            <source localId="912" locator="265:51-265:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="911" locator="265:32-265:47" name="fhir:NamingSystemType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="918" locator="266:1-266:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="918">
               <a:s>define function ToString(value </a:s>
               <a:s r="915">
                  <a:s>NarrativeStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="917">
                  <a:s r="917">
                     <a:s r="916">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="917">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="917" locator="266:50-266:60" path="value" xsi:type="Property">
            <source localId="916" locator="266:50-266:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="915" locator="266:32-266:46" name="fhir:NarrativeStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="922" locator="267:1-267:53" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="922">
               <a:s>define function ToString(value </a:s>
               <a:s r="919">
                  <a:s>NoteType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="921">
                  <a:s r="921">
                     <a:s r="920">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="921">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="921" locator="267:43-267:53" path="value" xsi:type="Property">
            <source localId="920" locator="267:43-267:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="919" locator="267:32-267:39" name="fhir:NoteType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="926" locator="268:1-268:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="926">
               <a:s>define function ToString(value </a:s>
               <a:s r="923">
                  <a:s>NutritiionOrderIntent</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="925">
                  <a:s r="925">
                     <a:s r="924">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="925">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="925" locator="268:56-268:66" path="value" xsi:type="Property">
            <source localId="924" locator="268:56-268:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="923" locator="268:32-268:52" name="fhir:NutritiionOrderIntent" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="930" locator="269:1-269:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="930">
               <a:s>define function ToString(value </a:s>
               <a:s r="927">
                  <a:s>NutritionOrderStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="929">
                  <a:s r="929">
                     <a:s r="928">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="929">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="929" locator="269:55-269:65" path="value" xsi:type="Property">
            <source localId="928" locator="269:55-269:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="927" locator="269:32-269:51" name="fhir:NutritionOrderStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="934" locator="270:1-270:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="934">
               <a:s>define function ToString(value </a:s>
               <a:s r="931">
                  <a:s>ObservationDataType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="933">
                  <a:s r="933">
                     <a:s r="932">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="933">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="933" locator="270:54-270:64" path="value" xsi:type="Property">
            <source localId="932" locator="270:54-270:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="931" locator="270:32-270:50" name="fhir:ObservationDataType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="938" locator="271:1-271:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="938">
               <a:s>define function ToString(value </a:s>
               <a:s r="935">
                  <a:s>ObservationRangeCategory</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="937">
                  <a:s r="937">
                     <a:s r="936">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="937">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="937" locator="271:59-271:69" path="value" xsi:type="Property">
            <source localId="936" locator="271:59-271:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="935" locator="271:32-271:55" name="fhir:ObservationRangeCategory" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="942" locator="272:1-272:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="942">
               <a:s>define function ToString(value </a:s>
               <a:s r="939">
                  <a:s>ObservationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="941">
                  <a:s r="941">
                     <a:s r="940">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="941">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="941" locator="272:52-272:62" path="value" xsi:type="Property">
            <source localId="940" locator="272:52-272:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="939" locator="272:32-272:48" name="fhir:ObservationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="946" locator="273:1-273:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="946">
               <a:s>define function ToString(value </a:s>
               <a:s r="943">
                  <a:s>OperationKind</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="945">
                  <a:s r="945">
                     <a:s r="944">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="945">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="945" locator="273:48-273:58" path="value" xsi:type="Property">
            <source localId="944" locator="273:48-273:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="943" locator="273:32-273:44" name="fhir:OperationKind" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="950" locator="274:1-274:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="950">
               <a:s>define function ToString(value </a:s>
               <a:s r="947">
                  <a:s>OperationParameterUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="949">
                  <a:s r="949">
                     <a:s r="948">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="949">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="949" locator="274:56-274:66" path="value" xsi:type="Property">
            <source localId="948" locator="274:56-274:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="947" locator="274:32-274:52" name="fhir:OperationParameterUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="954" locator="275:1-275:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="954">
               <a:s>define function ToString(value </a:s>
               <a:s r="951">
                  <a:s>OrientationType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="953">
                  <a:s r="953">
                     <a:s r="952">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="953">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="953" locator="275:50-275:60" path="value" xsi:type="Property">
            <source localId="952" locator="275:50-275:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="951" locator="275:32-275:46" name="fhir:OrientationType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="958" locator="276:1-276:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="958">
               <a:s>define function ToString(value </a:s>
               <a:s r="955">
                  <a:s>ParameterUse</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="957">
                  <a:s r="957">
                     <a:s r="956">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="957">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="957" locator="276:47-276:57" path="value" xsi:type="Property">
            <source localId="956" locator="276:47-276:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="955" locator="276:32-276:43" name="fhir:ParameterUse" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="962" locator="277:1-277:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="962">
               <a:s>define function ToString(value </a:s>
               <a:s r="959">
                  <a:s>ParticipantRequired</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="961">
                  <a:s r="961">
                     <a:s r="960">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="961">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="961" locator="277:54-277:64" path="value" xsi:type="Property">
            <source localId="960" locator="277:54-277:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="959" locator="277:32-277:50" name="fhir:ParticipantRequired" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="966" locator="278:1-278:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="966">
               <a:s>define function ToString(value </a:s>
               <a:s r="963">
                  <a:s>ParticipantStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="965">
                  <a:s r="965">
                     <a:s r="964">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="965">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="965" locator="278:52-278:62" path="value" xsi:type="Property">
            <source localId="964" locator="278:52-278:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="963" locator="278:32-278:48" name="fhir:ParticipantStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="970" locator="279:1-279:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="970">
               <a:s>define function ToString(value </a:s>
               <a:s r="967">
                  <a:s>ParticipationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="969">
                  <a:s r="969">
                     <a:s r="968">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="969">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="969" locator="279:54-279:64" path="value" xsi:type="Property">
            <source localId="968" locator="279:54-279:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="967" locator="279:32-279:50" name="fhir:ParticipationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="974" locator="280:1-280:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="974">
               <a:s>define function ToString(value </a:s>
               <a:s r="971">
                  <a:s>PaymentNoticeStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="973">
                  <a:s r="973">
                     <a:s r="972">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="973">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="973" locator="280:54-280:64" path="value" xsi:type="Property">
            <source localId="972" locator="280:54-280:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="971" locator="280:32-280:50" name="fhir:PaymentNoticeStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="978" locator="281:1-281:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="978">
               <a:s>define function ToString(value </a:s>
               <a:s r="975">
                  <a:s>PaymentReconciliationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="977">
                  <a:s r="977">
                     <a:s r="976">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="977">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="977" locator="281:62-281:72" path="value" xsi:type="Property">
            <source localId="976" locator="281:62-281:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="975" locator="281:32-281:58" name="fhir:PaymentReconciliationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="982" locator="282:1-282:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="982">
               <a:s>define function ToString(value </a:s>
               <a:s r="979">
                  <a:s>ProcedureStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="981">
                  <a:s r="981">
                     <a:s r="980">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="981">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="981" locator="282:50-282:60" path="value" xsi:type="Property">
            <source localId="980" locator="282:50-282:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="979" locator="282:32-282:46" name="fhir:ProcedureStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="986" locator="283:1-283:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="986">
               <a:s>define function ToString(value </a:s>
               <a:s r="983">
                  <a:s>PropertyRepresentation</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="985">
                  <a:s r="985">
                     <a:s r="984">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="985">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="985" locator="283:57-283:67" path="value" xsi:type="Property">
            <source localId="984" locator="283:57-283:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="983" locator="283:32-283:53" name="fhir:PropertyRepresentation" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="990" locator="284:1-284:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="990">
               <a:s>define function ToString(value </a:s>
               <a:s r="987">
                  <a:s>PropertyType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="989">
                  <a:s r="989">
                     <a:s r="988">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="989">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="989" locator="284:47-284:57" path="value" xsi:type="Property">
            <source localId="988" locator="284:47-284:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="987" locator="284:32-284:43" name="fhir:PropertyType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="994" locator="285:1-285:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="994">
               <a:s>define function ToString(value </a:s>
               <a:s r="991">
                  <a:s>ProvenanceEntityRole</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="993">
                  <a:s r="993">
                     <a:s r="992">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="993">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="993" locator="285:55-285:65" path="value" xsi:type="Property">
            <source localId="992" locator="285:55-285:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="991" locator="285:32-285:51" name="fhir:ProvenanceEntityRole" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="998" locator="286:1-286:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="998">
               <a:s>define function ToString(value </a:s>
               <a:s r="995">
                  <a:s>PublicationStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="997">
                  <a:s r="997">
                     <a:s r="996">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="997">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="997" locator="286:52-286:62" path="value" xsi:type="Property">
            <source localId="996" locator="286:52-286:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="995" locator="286:32-286:48" name="fhir:PublicationStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1002" locator="287:1-287:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1002">
               <a:s>define function ToString(value </a:s>
               <a:s r="999">
                  <a:s>QualityType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1001">
                  <a:s r="1001">
                     <a:s r="1000">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1001">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1001" locator="287:46-287:56" path="value" xsi:type="Property">
            <source localId="1000" locator="287:46-287:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="999" locator="287:32-287:42" name="fhir:QualityType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1006" locator="288:1-288:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1006">
               <a:s>define function ToString(value </a:s>
               <a:s r="1003">
                  <a:s>QuantityComparator</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1005">
                  <a:s r="1005">
                     <a:s r="1004">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1005">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1005" locator="288:53-288:63" path="value" xsi:type="Property">
            <source localId="1004" locator="288:53-288:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1003" locator="288:32-288:49" name="fhir:QuantityComparator" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1010" locator="289:1-289:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1010">
               <a:s>define function ToString(value </a:s>
               <a:s r="1007">
                  <a:s>QuestionnaireItemOperator</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1009">
                  <a:s r="1009">
                     <a:s r="1008">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1009">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1009" locator="289:60-289:70" path="value" xsi:type="Property">
            <source localId="1008" locator="289:60-289:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1007" locator="289:32-289:56" name="fhir:QuestionnaireItemOperator" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1014" locator="290:1-290:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1014">
               <a:s>define function ToString(value </a:s>
               <a:s r="1011">
                  <a:s>QuestionnaireItemType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1013">
                  <a:s r="1013">
                     <a:s r="1012">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1013">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1013" locator="290:56-290:66" path="value" xsi:type="Property">
            <source localId="1012" locator="290:56-290:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1011" locator="290:32-290:52" name="fhir:QuestionnaireItemType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1018" locator="291:1-291:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1018">
               <a:s>define function ToString(value </a:s>
               <a:s r="1015">
                  <a:s>QuestionnaireResponseStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1017">
                  <a:s r="1017">
                     <a:s r="1016">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1017">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1017" locator="291:62-291:72" path="value" xsi:type="Property">
            <source localId="1016" locator="291:62-291:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1015" locator="291:32-291:58" name="fhir:QuestionnaireResponseStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1022" locator="292:1-292:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1022">
               <a:s>define function ToString(value </a:s>
               <a:s r="1019">
                  <a:s>ReferenceHandlingPolicy</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1021">
                  <a:s r="1021">
                     <a:s r="1020">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1021">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1021" locator="292:58-292:68" path="value" xsi:type="Property">
            <source localId="1020" locator="292:58-292:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1019" locator="292:32-292:54" name="fhir:ReferenceHandlingPolicy" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1026" locator="293:1-293:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1026">
               <a:s>define function ToString(value </a:s>
               <a:s r="1023">
                  <a:s>ReferenceVersionRules</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1025">
                  <a:s r="1025">
                     <a:s r="1024">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1025">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1025" locator="293:56-293:66" path="value" xsi:type="Property">
            <source localId="1024" locator="293:56-293:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1023" locator="293:32-293:52" name="fhir:ReferenceVersionRules" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1030" locator="294:1-294:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1030">
               <a:s>define function ToString(value </a:s>
               <a:s r="1027">
                  <a:s>ReferredDocumentStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1029">
                  <a:s r="1029">
                     <a:s r="1028">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1029">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1029" locator="294:57-294:67" path="value" xsi:type="Property">
            <source localId="1028" locator="294:57-294:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1027" locator="294:32-294:53" name="fhir:ReferredDocumentStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1034" locator="295:1-295:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1034">
               <a:s>define function ToString(value </a:s>
               <a:s r="1031">
                  <a:s>RelatedArtifactType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1033">
                  <a:s r="1033">
                     <a:s r="1032">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1033">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1033" locator="295:54-295:64" path="value" xsi:type="Property">
            <source localId="1032" locator="295:54-295:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1031" locator="295:32-295:50" name="fhir:RelatedArtifactType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1038" locator="296:1-296:62" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1038">
               <a:s>define function ToString(value </a:s>
               <a:s r="1035">
                  <a:s>RemittanceOutcome</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1037">
                  <a:s r="1037">
                     <a:s r="1036">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1037">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1037" locator="296:52-296:62" path="value" xsi:type="Property">
            <source localId="1036" locator="296:52-296:56" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1035" locator="296:32-296:48" name="fhir:RemittanceOutcome" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1042" locator="297:1-297:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1042">
               <a:s>define function ToString(value </a:s>
               <a:s r="1039">
                  <a:s>RepositoryType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1041">
                  <a:s r="1041">
                     <a:s r="1040">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1041">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1041" locator="297:49-297:59" path="value" xsi:type="Property">
            <source localId="1040" locator="297:49-297:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1039" locator="297:32-297:45" name="fhir:RepositoryType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1046" locator="298:1-298:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1046">
               <a:s>define function ToString(value </a:s>
               <a:s r="1043">
                  <a:s>RequestIntent</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1045">
                  <a:s r="1045">
                     <a:s r="1044">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1045">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1045" locator="298:48-298:58" path="value" xsi:type="Property">
            <source localId="1044" locator="298:48-298:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1043" locator="298:32-298:44" name="fhir:RequestIntent" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1050" locator="299:1-299:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1050">
               <a:s>define function ToString(value </a:s>
               <a:s r="1047">
                  <a:s>RequestPriority</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1049">
                  <a:s r="1049">
                     <a:s r="1048">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1049">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1049" locator="299:50-299:60" path="value" xsi:type="Property">
            <source localId="1048" locator="299:50-299:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1047" locator="299:32-299:46" name="fhir:RequestPriority" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1054" locator="300:1-300:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1054">
               <a:s>define function ToString(value </a:s>
               <a:s r="1051">
                  <a:s>RequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1053">
                  <a:s r="1053">
                     <a:s r="1052">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1053">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1053" locator="300:48-300:58" path="value" xsi:type="Property">
            <source localId="1052" locator="300:48-300:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1051" locator="300:32-300:44" name="fhir:RequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1058" locator="301:1-301:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1058">
               <a:s>define function ToString(value </a:s>
               <a:s r="1055">
                  <a:s>ResearchElementType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1057">
                  <a:s r="1057">
                     <a:s r="1056">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1057">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1057" locator="301:54-301:64" path="value" xsi:type="Property">
            <source localId="1056" locator="301:54-301:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1055" locator="301:32-301:50" name="fhir:ResearchElementType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1062" locator="302:1-302:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1062">
               <a:s>define function ToString(value </a:s>
               <a:s r="1059">
                  <a:s>ResearchStudyStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1061">
                  <a:s r="1061">
                     <a:s r="1060">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1061">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1061" locator="302:54-302:64" path="value" xsi:type="Property">
            <source localId="1060" locator="302:54-302:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1059" locator="302:32-302:50" name="fhir:ResearchStudyStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1066" locator="303:1-303:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1066">
               <a:s>define function ToString(value </a:s>
               <a:s r="1063">
                  <a:s>ResearchSubjectStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1065">
                  <a:s r="1065">
                     <a:s r="1064">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1065">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1065" locator="303:56-303:66" path="value" xsi:type="Property">
            <source localId="1064" locator="303:56-303:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1063" locator="303:32-303:52" name="fhir:ResearchSubjectStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1070" locator="304:1-304:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1070">
               <a:s>define function ToString(value </a:s>
               <a:s r="1067">
                  <a:s>ResourceType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1069">
                  <a:s r="1069">
                     <a:s r="1068">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1069">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1069" locator="304:47-304:57" path="value" xsi:type="Property">
            <source localId="1068" locator="304:47-304:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1067" locator="304:32-304:43" name="fhir:ResourceType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1074" locator="305:1-305:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1074">
               <a:s>define function ToString(value </a:s>
               <a:s r="1071">
                  <a:s>ResourceVersionPolicy</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1073">
                  <a:s r="1073">
                     <a:s r="1072">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1073">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1073" locator="305:56-305:66" path="value" xsi:type="Property">
            <source localId="1072" locator="305:56-305:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1071" locator="305:32-305:52" name="fhir:ResourceVersionPolicy" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1078" locator="306:1-306:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1078">
               <a:s>define function ToString(value </a:s>
               <a:s r="1075">
                  <a:s>ResponseType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1077">
                  <a:s r="1077">
                     <a:s r="1076">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1077">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1077" locator="306:47-306:57" path="value" xsi:type="Property">
            <source localId="1076" locator="306:47-306:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1075" locator="306:32-306:43" name="fhir:ResponseType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1082" locator="307:1-307:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1082">
               <a:s>define function ToString(value </a:s>
               <a:s r="1079">
                  <a:s>RestfulCapabilityMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1081">
                  <a:s r="1081">
                     <a:s r="1080">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1081">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1081" locator="307:56-307:66" path="value" xsi:type="Property">
            <source localId="1080" locator="307:56-307:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1079" locator="307:32-307:52" name="fhir:RestfulCapabilityMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1086" locator="308:1-308:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1086">
               <a:s>define function ToString(value </a:s>
               <a:s r="1083">
                  <a:s>RiskAssessmentStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1085">
                  <a:s r="1085">
                     <a:s r="1084">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1085">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1085" locator="308:55-308:65" path="value" xsi:type="Property">
            <source localId="1084" locator="308:55-308:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1083" locator="308:32-308:51" name="fhir:RiskAssessmentStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1090" locator="309:1-309:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1090">
               <a:s>define function ToString(value </a:s>
               <a:s r="1087">
                  <a:s>SPDXLicense</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1089">
                  <a:s r="1089">
                     <a:s r="1088">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1089">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1089" locator="309:46-309:56" path="value" xsi:type="Property">
            <source localId="1088" locator="309:46-309:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1087" locator="309:32-309:42" name="fhir:SPDXLicense" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1094" locator="310:1-310:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1094">
               <a:s>define function ToString(value </a:s>
               <a:s r="1091">
                  <a:s>SearchComparator</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1093">
                  <a:s r="1093">
                     <a:s r="1092">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1093">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1093" locator="310:51-310:61" path="value" xsi:type="Property">
            <source localId="1092" locator="310:51-310:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1091" locator="310:32-310:47" name="fhir:SearchComparator" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1098" locator="311:1-311:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1098">
               <a:s>define function ToString(value </a:s>
               <a:s r="1095">
                  <a:s>SearchEntryMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1097">
                  <a:s r="1097">
                     <a:s r="1096">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1097">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1097" locator="311:50-311:60" path="value" xsi:type="Property">
            <source localId="1096" locator="311:50-311:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1095" locator="311:32-311:46" name="fhir:SearchEntryMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1102" locator="312:1-312:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1102">
               <a:s>define function ToString(value </a:s>
               <a:s r="1099">
                  <a:s>SearchModifierCode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1101">
                  <a:s r="1101">
                     <a:s r="1100">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1101">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1101" locator="312:53-312:63" path="value" xsi:type="Property">
            <source localId="1100" locator="312:53-312:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1099" locator="312:32-312:49" name="fhir:SearchModifierCode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1106" locator="313:1-313:60" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1106">
               <a:s>define function ToString(value </a:s>
               <a:s r="1103">
                  <a:s>SearchParamType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1105">
                  <a:s r="1105">
                     <a:s r="1104">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1105">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1105" locator="313:50-313:60" path="value" xsi:type="Property">
            <source localId="1104" locator="313:50-313:54" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1103" locator="313:32-313:46" name="fhir:SearchParamType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1110" locator="314:1-314:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1110">
               <a:s>define function ToString(value </a:s>
               <a:s r="1107">
                  <a:s>SectionMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1109">
                  <a:s r="1109">
                     <a:s r="1108">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1109">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1109" locator="314:46-314:56" path="value" xsi:type="Property">
            <source localId="1108" locator="314:46-314:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1107" locator="314:32-314:42" name="fhir:SectionMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1114" locator="315:1-315:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1114">
               <a:s>define function ToString(value </a:s>
               <a:s r="1111">
                  <a:s>SequenceType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1113">
                  <a:s r="1113">
                     <a:s r="1112">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1113">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1113" locator="315:47-315:57" path="value" xsi:type="Property">
            <source localId="1112" locator="315:47-315:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1111" locator="315:32-315:43" name="fhir:SequenceType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1118" locator="316:1-316:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1118">
               <a:s>define function ToString(value </a:s>
               <a:s r="1115">
                  <a:s>ServiceRequestIntent</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1117">
                  <a:s r="1117">
                     <a:s r="1116">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1117">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1117" locator="316:55-316:65" path="value" xsi:type="Property">
            <source localId="1116" locator="316:55-316:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1115" locator="316:32-316:51" name="fhir:ServiceRequestIntent" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1122" locator="317:1-317:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1122">
               <a:s>define function ToString(value </a:s>
               <a:s r="1119">
                  <a:s>ServiceRequestPriority</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1121">
                  <a:s r="1121">
                     <a:s r="1120">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1121">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1121" locator="317:57-317:67" path="value" xsi:type="Property">
            <source localId="1120" locator="317:57-317:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1119" locator="317:32-317:53" name="fhir:ServiceRequestPriority" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1126" locator="318:1-318:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1126">
               <a:s>define function ToString(value </a:s>
               <a:s r="1123">
                  <a:s>ServiceRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1125">
                  <a:s r="1125">
                     <a:s r="1124">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1125">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1125" locator="318:55-318:65" path="value" xsi:type="Property">
            <source localId="1124" locator="318:55-318:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1123" locator="318:32-318:51" name="fhir:ServiceRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1130" locator="319:1-319:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1130">
               <a:s>define function ToString(value </a:s>
               <a:s r="1127">
                  <a:s>SlicingRules</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1129">
                  <a:s r="1129">
                     <a:s r="1128">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1129">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1129" locator="319:47-319:57" path="value" xsi:type="Property">
            <source localId="1128" locator="319:47-319:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1127" locator="319:32-319:43" name="fhir:SlicingRules" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1134" locator="320:1-320:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1134">
               <a:s>define function ToString(value </a:s>
               <a:s r="1131">
                  <a:s>SlotStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1133">
                  <a:s r="1133">
                     <a:s r="1132">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1133">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1133" locator="320:45-320:55" path="value" xsi:type="Property">
            <source localId="1132" locator="320:45-320:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1131" locator="320:32-320:41" name="fhir:SlotStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1138" locator="321:1-321:58" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1138">
               <a:s>define function ToString(value </a:s>
               <a:s r="1135">
                  <a:s>SortDirection</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1137">
                  <a:s r="1137">
                     <a:s r="1136">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1137">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1137" locator="321:48-321:58" path="value" xsi:type="Property">
            <source localId="1136" locator="321:48-321:52" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1135" locator="321:32-321:44" name="fhir:SortDirection" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1142" locator="322:1-322:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1142">
               <a:s>define function ToString(value </a:s>
               <a:s r="1139">
                  <a:s>SpecimenContainedPreference</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1141">
                  <a:s r="1141">
                     <a:s r="1140">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1141">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1141" locator="322:62-322:72" path="value" xsi:type="Property">
            <source localId="1140" locator="322:62-322:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1139" locator="322:32-322:58" name="fhir:SpecimenContainedPreference" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1146" locator="323:1-323:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1146">
               <a:s>define function ToString(value </a:s>
               <a:s r="1143">
                  <a:s>SpecimenStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1145">
                  <a:s r="1145">
                     <a:s r="1144">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1145">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1145" locator="323:49-323:59" path="value" xsi:type="Property">
            <source localId="1144" locator="323:49-323:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1143" locator="323:32-323:45" name="fhir:SpecimenStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1150" locator="324:1-324:51" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1150">
               <a:s>define function ToString(value </a:s>
               <a:s r="1147">
                  <a:s>Status</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1149">
                  <a:s r="1149">
                     <a:s r="1148">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1149">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1149" locator="324:41-324:51" path="value" xsi:type="Property">
            <source localId="1148" locator="324:41-324:45" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1147" locator="324:32-324:37" name="fhir:Status" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1154" locator="325:1-325:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1154">
               <a:s>define function ToString(value </a:s>
               <a:s r="1151">
                  <a:s>StrandType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1153">
                  <a:s r="1153">
                     <a:s r="1152">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1153">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1153" locator="325:45-325:55" path="value" xsi:type="Property">
            <source localId="1152" locator="325:45-325:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1151" locator="325:32-325:41" name="fhir:StrandType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1158" locator="326:1-326:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1158">
               <a:s>define function ToString(value </a:s>
               <a:s r="1155">
                  <a:s>StructureDefinitionKind</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1157">
                  <a:s r="1157">
                     <a:s r="1156">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1157">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1157" locator="326:58-326:68" path="value" xsi:type="Property">
            <source localId="1156" locator="326:58-326:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1155" locator="326:32-326:54" name="fhir:StructureDefinitionKind" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1162" locator="327:1-327:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1162">
               <a:s>define function ToString(value </a:s>
               <a:s r="1159">
                  <a:s>StructureMapContextType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1161">
                  <a:s r="1161">
                     <a:s r="1160">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1161">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1161" locator="327:58-327:68" path="value" xsi:type="Property">
            <source localId="1160" locator="327:58-327:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1159" locator="327:32-327:54" name="fhir:StructureMapContextType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1166" locator="328:1-328:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1166">
               <a:s>define function ToString(value </a:s>
               <a:s r="1163">
                  <a:s>StructureMapGroupTypeMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1165">
                  <a:s r="1165">
                     <a:s r="1164">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1165">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1165" locator="328:60-328:70" path="value" xsi:type="Property">
            <source localId="1164" locator="328:60-328:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1163" locator="328:32-328:56" name="fhir:StructureMapGroupTypeMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1170" locator="329:1-329:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1170">
               <a:s>define function ToString(value </a:s>
               <a:s r="1167">
                  <a:s>StructureMapInputMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1169">
                  <a:s r="1169">
                     <a:s r="1168">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1169">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1169" locator="329:56-329:66" path="value" xsi:type="Property">
            <source localId="1168" locator="329:56-329:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1167" locator="329:32-329:52" name="fhir:StructureMapInputMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1174" locator="330:1-330:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1174">
               <a:s>define function ToString(value </a:s>
               <a:s r="1171">
                  <a:s>StructureMapModelMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1173">
                  <a:s r="1173">
                     <a:s r="1172">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1173">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1173" locator="330:56-330:66" path="value" xsi:type="Property">
            <source localId="1172" locator="330:56-330:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1171" locator="330:32-330:52" name="fhir:StructureMapModelMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1178" locator="331:1-331:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1178">
               <a:s>define function ToString(value </a:s>
               <a:s r="1175">
                  <a:s>StructureMapSourceListMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1177">
                  <a:s r="1177">
                     <a:s r="1176">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1177">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1177" locator="331:61-331:71" path="value" xsi:type="Property">
            <source localId="1176" locator="331:61-331:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1175" locator="331:32-331:57" name="fhir:StructureMapSourceListMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1182" locator="332:1-332:71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1182">
               <a:s>define function ToString(value </a:s>
               <a:s r="1179">
                  <a:s>StructureMapTargetListMode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1181">
                  <a:s r="1181">
                     <a:s r="1180">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1181">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1181" locator="332:61-332:71" path="value" xsi:type="Property">
            <source localId="1180" locator="332:61-332:65" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1179" locator="332:32-332:57" name="fhir:StructureMapTargetListMode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1186" locator="333:1-333:66" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1186">
               <a:s>define function ToString(value </a:s>
               <a:s r="1183">
                  <a:s>StructureMapTransform</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1185">
                  <a:s r="1185">
                     <a:s r="1184">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1185">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1185" locator="333:56-333:66" path="value" xsi:type="Property">
            <source localId="1184" locator="333:56-333:60" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1183" locator="333:32-333:52" name="fhir:StructureMapTransform" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1190" locator="334:1-334:68" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1190">
               <a:s>define function ToString(value </a:s>
               <a:s r="1187">
                  <a:s>SubscriptionChannelType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1189">
                  <a:s r="1189">
                     <a:s r="1188">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1189">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1189" locator="334:58-334:68" path="value" xsi:type="Property">
            <source localId="1188" locator="334:58-334:62" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1187" locator="334:32-334:54" name="fhir:SubscriptionChannelType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1194" locator="335:1-335:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1194">
               <a:s>define function ToString(value </a:s>
               <a:s r="1191">
                  <a:s>SubscriptionStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1193">
                  <a:s r="1193">
                     <a:s r="1192">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1193">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1193" locator="335:53-335:63" path="value" xsi:type="Property">
            <source localId="1192" locator="335:53-335:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1191" locator="335:32-335:49" name="fhir:SubscriptionStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1198" locator="336:1-336:65" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1198">
               <a:s>define function ToString(value </a:s>
               <a:s r="1195">
                  <a:s>SupplyDeliveryStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1197">
                  <a:s r="1197">
                     <a:s r="1196">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1197">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1197" locator="336:55-336:65" path="value" xsi:type="Property">
            <source localId="1196" locator="336:55-336:59" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1195" locator="336:32-336:51" name="fhir:SupplyDeliveryStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1202" locator="337:1-337:64" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1202">
               <a:s>define function ToString(value </a:s>
               <a:s r="1199">
                  <a:s>SupplyRequestStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1201">
                  <a:s r="1201">
                     <a:s r="1200">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1201">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1201" locator="337:54-337:64" path="value" xsi:type="Property">
            <source localId="1200" locator="337:54-337:58" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1199" locator="337:32-337:50" name="fhir:SupplyRequestStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1206" locator="338:1-338:69" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1206">
               <a:s>define function ToString(value </a:s>
               <a:s r="1203">
                  <a:s>SystemRestfulInteraction</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1205">
                  <a:s r="1205">
                     <a:s r="1204">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1205">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1205" locator="338:59-338:69" path="value" xsi:type="Property">
            <source localId="1204" locator="338:59-338:63" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1203" locator="338:32-338:55" name="fhir:SystemRestfulInteraction" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1210" locator="339:1-339:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1210">
               <a:s>define function ToString(value </a:s>
               <a:s r="1207">
                  <a:s>TaskIntent</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1209">
                  <a:s r="1209">
                     <a:s r="1208">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1209">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1209" locator="339:45-339:55" path="value" xsi:type="Property">
            <source localId="1208" locator="339:45-339:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1207" locator="339:32-339:41" name="fhir:TaskIntent" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1214" locator="340:1-340:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1214">
               <a:s>define function ToString(value </a:s>
               <a:s r="1211">
                  <a:s>TaskPriority</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1213">
                  <a:s r="1213">
                     <a:s r="1212">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1213">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1213" locator="340:47-340:57" path="value" xsi:type="Property">
            <source localId="1212" locator="340:47-340:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1211" locator="340:32-340:43" name="fhir:TaskPriority" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1218" locator="341:1-341:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1218">
               <a:s>define function ToString(value </a:s>
               <a:s r="1215">
                  <a:s>TaskStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1217">
                  <a:s r="1217">
                     <a:s r="1216">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1217">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1217" locator="341:45-341:55" path="value" xsi:type="Property">
            <source localId="1216" locator="341:45-341:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1215" locator="341:32-341:41" name="fhir:TaskStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1222" locator="342:1-342:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1222">
               <a:s>define function ToString(value </a:s>
               <a:s r="1219">
                  <a:s>TestReportActionResult</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1221">
                  <a:s r="1221">
                     <a:s r="1220">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1221">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1221" locator="342:57-342:67" path="value" xsi:type="Property">
            <source localId="1220" locator="342:57-342:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1219" locator="342:32-342:53" name="fhir:TestReportActionResult" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1226" locator="343:1-343:70" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1226">
               <a:s>define function ToString(value </a:s>
               <a:s r="1223">
                  <a:s>TestReportParticipantType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1225">
                  <a:s r="1225">
                     <a:s r="1224">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1225">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1225" locator="343:60-343:70" path="value" xsi:type="Property">
            <source localId="1224" locator="343:60-343:64" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1223" locator="343:32-343:56" name="fhir:TestReportParticipantType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1230" locator="344:1-344:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1230">
               <a:s>define function ToString(value </a:s>
               <a:s r="1227">
                  <a:s>TestReportResult</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1229">
                  <a:s r="1229">
                     <a:s r="1228">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1229">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1229" locator="344:51-344:61" path="value" xsi:type="Property">
            <source localId="1228" locator="344:51-344:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1227" locator="344:32-344:47" name="fhir:TestReportResult" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1234" locator="345:1-345:61" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1234">
               <a:s>define function ToString(value </a:s>
               <a:s r="1231">
                  <a:s>TestReportStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1233">
                  <a:s r="1233">
                     <a:s r="1232">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1233">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1233" locator="345:51-345:61" path="value" xsi:type="Property">
            <source localId="1232" locator="345:51-345:55" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1231" locator="345:32-345:47" name="fhir:TestReportStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1238" locator="346:1-346:72" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1238">
               <a:s>define function ToString(value </a:s>
               <a:s r="1235">
                  <a:s>TestScriptRequestMethodCode</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1237">
                  <a:s r="1237">
                     <a:s r="1236">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1237">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1237" locator="346:62-346:72" path="value" xsi:type="Property">
            <source localId="1236" locator="346:62-346:66" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1235" locator="346:32-346:58" name="fhir:TestScriptRequestMethodCode" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1242" locator="347:1-347:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1242">
               <a:s>define function ToString(value </a:s>
               <a:s r="1239">
                  <a:s>TriggerType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1241">
                  <a:s r="1241">
                     <a:s r="1240">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1241">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1241" locator="347:46-347:56" path="value" xsi:type="Property">
            <source localId="1240" locator="347:46-347:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1239" locator="347:32-347:42" name="fhir:TriggerType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1246" locator="348:1-348:63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1246">
               <a:s>define function ToString(value </a:s>
               <a:s r="1243">
                  <a:s>TypeDerivationRule</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1245">
                  <a:s r="1245">
                     <a:s r="1244">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1245">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1245" locator="348:53-348:63" path="value" xsi:type="Property">
            <source localId="1244" locator="348:53-348:57" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1243" locator="348:32-348:49" name="fhir:TypeDerivationRule" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1250" locator="349:1-349:67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1250">
               <a:s>define function ToString(value </a:s>
               <a:s r="1247">
                  <a:s>TypeRestfulInteraction</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1249">
                  <a:s r="1249">
                     <a:s r="1248">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1249">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1249" locator="349:57-349:67" path="value" xsi:type="Property">
            <source localId="1248" locator="349:57-349:61" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1247" locator="349:32-349:53" name="fhir:TypeRestfulInteraction" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1254" locator="350:1-350:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1254">
               <a:s>define function ToString(value </a:s>
               <a:s r="1251">
                  <a:s>UDIEntryType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1253">
                  <a:s r="1253">
                     <a:s r="1252">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1253">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1253" locator="350:47-350:57" path="value" xsi:type="Property">
            <source localId="1252" locator="350:47-350:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1251" locator="350:32-350:43" name="fhir:UDIEntryType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1258" locator="351:1-351:56" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1258">
               <a:s>define function ToString(value </a:s>
               <a:s r="1255">
                  <a:s>UnitsOfTime</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1257">
                  <a:s r="1257">
                     <a:s r="1256">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1257">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1257" locator="351:46-351:56" path="value" xsi:type="Property">
            <source localId="1256" locator="351:46-351:50" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1255" locator="351:32-351:42" name="fhir:UnitsOfTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1262" locator="352:1-352:48" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1262">
               <a:s>define function ToString(value </a:s>
               <a:s r="1259">
                  <a:s>Use</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1261">
                  <a:s r="1261">
                     <a:s r="1260">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1261">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1261" locator="352:38-352:48" path="value" xsi:type="Property">
            <source localId="1260" locator="352:38-352:42" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1259" locator="352:32-352:34" name="fhir:Use" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1266" locator="353:1-353:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1266">
               <a:s>define function ToString(value </a:s>
               <a:s r="1263">
                  <a:s>VariableType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1265">
                  <a:s r="1265">
                     <a:s r="1264">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1265">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1265" locator="353:47-353:57" path="value" xsi:type="Property">
            <source localId="1264" locator="353:47-353:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1263" locator="353:32-353:43" name="fhir:VariableType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1270" locator="354:1-354:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1270">
               <a:s>define function ToString(value </a:s>
               <a:s r="1267">
                  <a:s>VisionBase</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1269">
                  <a:s r="1269">
                     <a:s r="1268">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1269">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1269" locator="354:45-354:55" path="value" xsi:type="Property">
            <source localId="1268" locator="354:45-354:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1267" locator="354:32-354:41" name="fhir:VisionBase" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1274" locator="355:1-355:55" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1274">
               <a:s>define function ToString(value </a:s>
               <a:s r="1271">
                  <a:s>VisionEyes</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1273">
                  <a:s r="1273">
                     <a:s r="1272">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1273">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1273" locator="355:45-355:55" path="value" xsi:type="Property">
            <source localId="1272" locator="355:45-355:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1271" locator="355:32-355:41" name="fhir:VisionEyes" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1278" locator="356:1-356:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1278">
               <a:s>define function ToString(value </a:s>
               <a:s r="1275">
                  <a:s>VisionStatus</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1277">
                  <a:s r="1277">
                     <a:s r="1276">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1277">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1277" locator="356:47-356:57" path="value" xsi:type="Property">
            <source localId="1276" locator="356:47-356:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1275" locator="356:32-356:43" name="fhir:VisionStatus" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1282" locator="357:1-357:59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1282">
               <a:s>define function ToString(value </a:s>
               <a:s r="1279">
                  <a:s>XPathUsageType</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1281">
                  <a:s r="1281">
                     <a:s r="1280">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1281">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1281" locator="357:49-357:59" path="value" xsi:type="Property">
            <source localId="1280" locator="357:49-357:53" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1279" locator="357:32-357:45" name="fhir:XPathUsageType" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1286" locator="358:1-358:57" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1286">
               <a:s>define function ToString(value </a:s>
               <a:s r="1283">
                  <a:s>base64Binary</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1285">
                  <a:s r="1285">
                     <a:s r="1284">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1285">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1285" locator="358:47-358:57" path="value" xsi:type="Property">
            <source localId="1284" locator="358:47-358:51" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1283" locator="358:32-358:43" name="fhir:base64Binary" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1290" locator="359:1-359:53" name="ToBoolean" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1290">
               <a:s>define function ToBoolean(value </a:s>
               <a:s r="1287">
                  <a:s>boolean</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1289">
                  <a:s r="1289">
                     <a:s r="1288">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1289">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1289" locator="359:43-359:53" path="value" xsi:type="Property">
            <source localId="1288" locator="359:43-359:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1287" locator="359:33-359:39" name="fhir:boolean" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1294" locator="360:1-360:47" name="ToDate" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1294">
               <a:s>define function ToDate(value </a:s>
               <a:s r="1291">
                  <a:s>date</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1293">
                  <a:s r="1293">
                     <a:s r="1292">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1293">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1293" locator="360:37-360:47" path="value" xsi:type="Property">
            <source localId="1292" locator="360:37-360:41" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1291" locator="360:30-360:33" name="fhir:date" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1298" locator="361:1-361:55" name="ToDateTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1298">
               <a:s>define function ToDateTime(value </a:s>
               <a:s r="1295">
                  <a:s>dateTime</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1297">
                  <a:s r="1297">
                     <a:s r="1296">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1297">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1297" locator="361:45-361:55" path="value" xsi:type="Property">
            <source localId="1296" locator="361:45-361:49" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1295" locator="361:34-361:41" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1302" locator="362:1-362:53" name="ToDecimal" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1302">
               <a:s>define function ToDecimal(value </a:s>
               <a:s r="1299">
                  <a:s>decimal</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1301">
                  <a:s r="1301">
                     <a:s r="1300">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1301">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1301" locator="362:43-362:53" path="value" xsi:type="Property">
            <source localId="1300" locator="362:43-362:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1299" locator="362:33-362:39" name="fhir:decimal" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1306" locator="363:1-363:54" name="ToDateTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1306">
               <a:s>define function ToDateTime(value </a:s>
               <a:s r="1303">
                  <a:s>instant</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1305">
                  <a:s r="1305">
                     <a:s r="1304">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1305">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1305" locator="363:44-363:54" path="value" xsi:type="Property">
            <source localId="1304" locator="363:44-363:48" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1303" locator="363:34-363:40" name="fhir:instant" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1310" locator="364:1-364:53" name="ToInteger" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1310">
               <a:s>define function ToInteger(value </a:s>
               <a:s r="1307">
                  <a:s>integer</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1309">
                  <a:s r="1309">
                     <a:s r="1308">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1309">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1309" locator="364:43-364:53" path="value" xsi:type="Property">
            <source localId="1308" locator="364:43-364:47" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1307" locator="364:33-364:39" name="fhir:integer" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1314" locator="365:1-365:51" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1314">
               <a:s>define function ToString(value </a:s>
               <a:s r="1311">
                  <a:s>string</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1313">
                  <a:s r="1313">
                     <a:s r="1312">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1313">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1313" locator="365:41-365:51" path="value" xsi:type="Property">
            <source localId="1312" locator="365:41-365:45" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1311" locator="365:32-365:37" name="fhir:string" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1318" locator="366:1-366:47" name="ToTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1318">
               <a:s>define function ToTime(value </a:s>
               <a:s r="1315">
                  <a:s>time</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1317">
                  <a:s r="1317">
                     <a:s r="1316">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1317">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1317" locator="366:37-366:47" path="value" xsi:type="Property">
            <source localId="1316" locator="366:37-366:41" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1315" locator="366:30-366:33" name="fhir:time" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1322" locator="367:1-367:48" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1322">
               <a:s>define function ToString(value </a:s>
               <a:s r="1319">
                  <a:s>uri</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1321">
                  <a:s r="1321">
                     <a:s r="1320">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1321">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1321" locator="367:38-367:48" path="value" xsi:type="Property">
            <source localId="1320" locator="367:38-367:42" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1319" locator="367:32-367:34" name="fhir:uri" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1326" locator="368:1-368:50" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1326">
               <a:s>define function ToString(value </a:s>
               <a:s r="1323">
                  <a:s>xhtml</a:s>
               </a:s>
               <a:s>): </a:s>
               <a:s r="1325">
                  <a:s r="1325">
                     <a:s r="1324">
                        <a:s>value</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1325">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1325" locator="368:40-368:50" path="value" xsi:type="Property">
            <source localId="1324" locator="368:40-368:44" name="value" xsi:type="OperandRef"/>
         </expression>
         <operand name="value">
            <operandTypeSpecifier localId="1323" locator="368:32-368:36" name="fhir:xhtml" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
   </statements>
</library>
"
  }, {
    "contentType": "application/elm+json",
    "data": "{
  "library" : {
    "type" : "Library",
    "identifier" : {
      "type" : "VersionedIdentifier",
      "id" : "FHIRHelpers",
      "system" : "http://fhir.org/guides/ohsuhypertensionig",
      "version" : "4.0.1"
    },
    "schemaIdentifier" : {
      "type" : "VersionedIdentifier",
      "id" : "urn:hl7-org:elm",
      "version" : "r1"
    },
    "usings" : {
      "type" : "Library$Usings",
      "def" : [ {
        "type" : "UsingDef",
        "localIdentifier" : "System",
        "uri" : "urn:hl7-org:elm-types:r1"
      }, {
        "type" : "UsingDef",
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "using " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ " version ", "'4.0.1'" ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1"
          }
        } ],
        "localId" : "1",
        "locator" : "3:1-3:26",
        "localIdentifier" : "FHIR",
        "uri" : "http://hl7.org/fhir",
        "version" : "4.0.1"
      } ]
    },
    "statements" : {
      "type" : "Library$Statements",
      "def" : [ {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "2",
            "locator" : "5:35-5:45",
            "name" : "{http://hl7.org/fhir}Period"
          },
          "name" : "period"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToInterval", "(", "period", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Period" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "2"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "if " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "period" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "3"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " is null" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "4"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ " then\n        ", "null", "\n    else\n        " ],
                        "r" : "5"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "if " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "period" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "6"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "\"start\"" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "7"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "7"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " is null" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "8"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "Interval(" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "period" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "9"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "\"start\"" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "10"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "10"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "11"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "11"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "period" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "12"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "\"end\"" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "13"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "13"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "14"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "14"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "]" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "15"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n        else\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "Interval[" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "period" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "16"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "\"start\"" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "17"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "17"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "18"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "18"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "period" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "19"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "\"end\"" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "20"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "20"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "21"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "21"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "]" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "22"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "23"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "24"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "24"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "25"
          }
        } ],
        "expression" : {
          "type" : "If",
          "condition" : {
            "type" : "IsNull",
            "operand" : {
              "type" : "OperandRef",
              "localId" : "3",
              "locator" : "6:8-6:13",
              "name" : "period"
            },
            "localId" : "4",
            "locator" : "6:8-6:21"
          },
          "then" : {
            "type" : "As",
            "asTypeSpecifier" : {
              "type" : "IntervalTypeSpecifier",
              "pointType" : {
                "type" : "NamedTypeSpecifier",
                "name" : "{urn:hl7-org:elm-types:r1}DateTime"
              }
            },
            "operand" : {
              "type" : "Null",
              "localId" : "5",
              "locator" : "7:9-7:12"
            }
          },
          "else" : {
            "type" : "If",
            "condition" : {
              "type" : "IsNull",
              "operand" : {
                "type" : "Property",
                "source" : {
                  "type" : "OperandRef",
                  "localId" : "6",
                  "locator" : "9:12-9:17",
                  "name" : "period"
                },
                "localId" : "7",
                "locator" : "9:12-9:25",
                "path" : "start"
              },
              "localId" : "8",
              "locator" : "9:12-9:33"
            },
            "then" : {
              "type" : "Interval",
              "low" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "9",
                    "locator" : "10:22-10:27",
                    "name" : "period"
                  },
                  "localId" : "10",
                  "locator" : "10:22-10:35",
                  "path" : "start"
                },
                "localId" : "11",
                "locator" : "10:22-10:41",
                "path" : "value"
              },
              "high" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "12",
                    "locator" : "10:44-10:49",
                    "name" : "period"
                  },
                  "localId" : "13",
                  "locator" : "10:44-10:55",
                  "path" : "end"
                },
                "localId" : "14",
                "locator" : "10:44-10:61",
                "path" : "value"
              },
              "localId" : "15",
              "locator" : "10:13-10:62",
              "lowClosed" : false,
              "highClosed" : true
            },
            "else" : {
              "type" : "Interval",
              "low" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "16",
                    "locator" : "12:22-12:27",
                    "name" : "period"
                  },
                  "localId" : "17",
                  "locator" : "12:22-12:35",
                  "path" : "start"
                },
                "localId" : "18",
                "locator" : "12:22-12:41",
                "path" : "value"
              },
              "high" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "19",
                    "locator" : "12:44-12:49",
                    "name" : "period"
                  },
                  "localId" : "20",
                  "locator" : "12:44-12:55",
                  "path" : "end"
                },
                "localId" : "21",
                "locator" : "12:44-12:61",
                "path" : "value"
              },
              "localId" : "22",
              "locator" : "12:13-12:62",
              "lowClosed" : true,
              "highClosed" : true
            },
            "localId" : "23",
            "locator" : "9:9-12:62"
          },
          "localId" : "24",
          "locator" : "6:5-12:62"
        },
        "localId" : "25",
        "locator" : "5:1-12:62",
        "name" : "ToInterval",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "26",
            "locator" : "14:37-14:49",
            "name" : "{urn:hl7-org:elm-types:r1}String"
          },
          "name" : "unit"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToCalendarUnit", "(", "unit", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "System", ".", "String" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "26"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "case " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "unit" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "27"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'ms'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "28"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'millisecond'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "29"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "30"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'s'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "31"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'second'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "32"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "33"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'min'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "34"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'minute'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "35"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "36"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'h'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "37"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'hour'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "38"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "39"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'d'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "40"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'day'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "41"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "42"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'wk'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "43"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'week'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "44"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "45"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'mo'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "46"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'month'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "47"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "48"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'a'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "49"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'year'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "50"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "51"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        else " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "unit" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "52"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n    end" ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "53"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "53"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "54"
          }
        } ],
        "expression" : {
          "type" : "Case",
          "comparand" : {
            "type" : "OperandRef",
            "localId" : "27",
            "locator" : "15:10-15:13",
            "name" : "unit"
          },
          "caseItem" : [ {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "28",
              "locator" : "16:14-16:17",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "ms"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "29",
              "locator" : "16:24-16:36",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "millisecond"
            },
            "localId" : "30",
            "locator" : "16:9-16:36"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "31",
              "locator" : "17:14-17:16",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "s"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "32",
              "locator" : "17:23-17:30",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "second"
            },
            "localId" : "33",
            "locator" : "17:9-17:30"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "34",
              "locator" : "18:14-18:18",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "min"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "35",
              "locator" : "18:25-18:32",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "minute"
            },
            "localId" : "36",
            "locator" : "18:9-18:32"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "37",
              "locator" : "19:14-19:16",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "h"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "38",
              "locator" : "19:23-19:28",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "hour"
            },
            "localId" : "39",
            "locator" : "19:9-19:28"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "40",
              "locator" : "20:14-20:16",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "d"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "41",
              "locator" : "20:23-20:27",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "day"
            },
            "localId" : "42",
            "locator" : "20:9-20:27"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "43",
              "locator" : "21:14-21:17",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "wk"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "44",
              "locator" : "21:24-21:29",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "week"
            },
            "localId" : "45",
            "locator" : "21:9-21:29"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "46",
              "locator" : "22:14-22:17",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "mo"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "47",
              "locator" : "22:24-22:30",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "month"
            },
            "localId" : "48",
            "locator" : "22:9-22:30"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Literal",
              "localId" : "49",
              "locator" : "23:14-23:16",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "a"
            },
            "then" : {
              "type" : "Literal",
              "localId" : "50",
              "locator" : "23:23-23:28",
              "valueType" : "{urn:hl7-org:elm-types:r1}String",
              "value" : "year"
            },
            "localId" : "51",
            "locator" : "23:9-23:28"
          } ],
          "else" : {
            "type" : "OperandRef",
            "localId" : "52",
            "locator" : "24:14-24:17",
            "name" : "unit"
          },
          "localId" : "53",
          "locator" : "15:5-25:7"
        },
        "localId" : "54",
        "locator" : "14:1-25:7",
        "name" : "ToCalendarUnit",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "55",
            "locator" : "27:37-27:49",
            "name" : "{http://hl7.org/fhir}Quantity"
          },
          "name" : "quantity"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToQuantity", "(", "quantity", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Quantity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "55"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "case\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "quantity" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "56"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " is null" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "57"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then ", "null" ],
                            "r" : "58"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "59"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "quantity" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "60"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "61"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "61"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " is null" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "62"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then ", "null" ],
                            "r" : "63"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "64"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "quantity" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "65"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "comparator" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "66"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "66"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " is not null" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "67"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "Message", "(", "null", ", ", "true", ", " ],
                                "r" : "68"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'FHIRHelpers.ToQuantity.ComparatorQuantityNotSupported'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "70"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'Error'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "71"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'FHIR Quantity value has a comparator and cannot be converted to a System.Quantity value.'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "72"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ")" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "73"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "74"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "75"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "system" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "76"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "76"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ " is null" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "77"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " or " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "quantity" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "78"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "system" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "79"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "79"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "value" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "80"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "80"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ " ", "=", " " ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "'http://unitsofmeasure.org'" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "81"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "82"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "83"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "\n              or " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "84"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "system" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "85"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "85"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "value" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "86"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "86"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " ", "=", " " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "'http://hl7.org/fhirpath/CodeSystem/calendar-units'" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "87"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "88"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "89"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "System", ".", "Quantity", " { " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "value", ": " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "90"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "value" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "91"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "91"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "value" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "92"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "92"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "unit", ": " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "ToCalendarUnit", "(" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "Coalesce", "(" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "quantity" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "93"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "." ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "code" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "94"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "94"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "value" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "95"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "95"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ", " ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "quantity" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "96"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "." ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "unit" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "97"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "97"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "value" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "98"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "98"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ", " ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "'1'" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "99"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ")" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "100"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ ")" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "101"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " }" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "102"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "103"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        else\n            " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "Message", "(", "null", ", ", "true", ", " ],
                            "r" : "104"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'FHIRHelpers.ToQuantity.InvalidFHIRQuantity'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "106"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ", " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'Error'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "107"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ", " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "'Invalid FHIR Quantity code: '" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "108"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ " & " ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ {
                                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                              "value" : {
                                                                "s" : [ "quantity" ]
                                                              },
                                                              "nil" : false,
                                                              "globalScope" : true,
                                                              "typeSubstituted" : false
                                                            } ],
                                                            "r" : "109"
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        }, {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ "." ]
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        }, {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ {
                                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                              "value" : {
                                                                "s" : [ "unit" ]
                                                              },
                                                              "nil" : false,
                                                              "globalScope" : true,
                                                              "typeSubstituted" : false
                                                            } ],
                                                            "r" : "110"
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        } ],
                                                        "r" : "110"
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    }, {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "." ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    }, {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ "value" ]
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        } ],
                                                        "r" : "111"
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "111"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "112"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ " & " ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "' ('" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "113"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "114"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ " & " ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "quantity" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "115"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "." ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "system" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "116"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "116"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "value" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "117"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "117"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "118"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ " & " ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "'|'" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "119"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "120"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " & " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "121"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "code" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "122"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "122"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "value" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "123"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "123"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "124"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " & " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "')'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "125"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "126"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ")" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "127"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n    end" ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "128"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "128"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "129"
          }
        } ],
        "expression" : {
          "type" : "Case",
          "caseItem" : [ {
            "type" : "CaseItem",
            "when" : {
              "type" : "IsNull",
              "operand" : {
                "type" : "OperandRef",
                "localId" : "56",
                "locator" : "29:14-29:21",
                "name" : "quantity"
              },
              "localId" : "57",
              "locator" : "29:14-29:29"
            },
            "then" : {
              "type" : "As",
              "operand" : {
                "type" : "Null",
                "localId" : "58",
                "locator" : "29:36-29:39"
              },
              "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "59",
            "locator" : "29:9-29:39"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "IsNull",
              "operand" : {
                "type" : "Property",
                "source" : {
                  "type" : "OperandRef",
                  "localId" : "60",
                  "locator" : "30:14-30:21",
                  "name" : "quantity"
                },
                "localId" : "61",
                "locator" : "30:14-30:27",
                "path" : "value"
              },
              "localId" : "62",
              "locator" : "30:14-30:35"
            },
            "then" : {
              "type" : "As",
              "operand" : {
                "type" : "Null",
                "localId" : "63",
                "locator" : "30:42-30:45"
              },
              "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "64",
            "locator" : "30:9-30:45"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Not",
              "operand" : {
                "type" : "IsNull",
                "operand" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "65",
                    "locator" : "31:14-31:21",
                    "name" : "quantity"
                  },
                  "localId" : "66",
                  "locator" : "31:14-31:32",
                  "path" : "comparator"
                },
                "locator" : "31:14-31:44"
              },
              "localId" : "67",
              "locator" : "31:14-31:44"
            },
            "then" : {
              "type" : "As",
              "operand" : {
                "type" : "Message",
                "source" : {
                  "type" : "Null",
                  "localId" : "68",
                  "locator" : "32:21-32:24"
                },
                "condition" : {
                  "type" : "Literal",
                  "localId" : "69",
                  "locator" : "32:27-32:30",
                  "valueType" : "{urn:hl7-org:elm-types:r1}Boolean",
                  "value" : "true"
                },
                "code" : {
                  "type" : "Literal",
                  "localId" : "70",
                  "locator" : "32:33-32:87",
                  "valueType" : "{urn:hl7-org:elm-types:r1}String",
                  "value" : "FHIRHelpers.ToQuantity.ComparatorQuantityNotSupported"
                },
                "severity" : {
                  "type" : "Literal",
                  "localId" : "71",
                  "locator" : "32:90-32:96",
                  "valueType" : "{urn:hl7-org:elm-types:r1}String",
                  "value" : "Error"
                },
                "message" : {
                  "type" : "Literal",
                  "localId" : "72",
                  "locator" : "32:99-32:188",
                  "valueType" : "{urn:hl7-org:elm-types:r1}String",
                  "value" : "FHIR Quantity value has a comparator and cannot be converted to a System.Quantity value."
                },
                "localId" : "73",
                "locator" : "32:13-32:189"
              },
              "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "74",
            "locator" : "31:9-32:189"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Or",
              "operand" : [ {
                "type" : "Or",
                "operand" : [ {
                  "type" : "IsNull",
                  "operand" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "localId" : "75",
                      "locator" : "33:14-33:21",
                      "name" : "quantity"
                    },
                    "localId" : "76",
                    "locator" : "33:14-33:28",
                    "path" : "system"
                  },
                  "localId" : "77",
                  "locator" : "33:14-33:36"
                }, {
                  "type" : "Equal",
                  "operand" : [ {
                    "type" : "Property",
                    "source" : {
                      "type" : "Property",
                      "source" : {
                        "type" : "OperandRef",
                        "localId" : "78",
                        "locator" : "33:41-33:48",
                        "name" : "quantity"
                      },
                      "localId" : "79",
                      "locator" : "33:41-33:55",
                      "path" : "system"
                    },
                    "localId" : "80",
                    "locator" : "33:41-33:61",
                    "path" : "value"
                  }, {
                    "type" : "Literal",
                    "localId" : "81",
                    "locator" : "33:65-33:91",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : "http://unitsofmeasure.org"
                  } ],
                  "localId" : "82",
                  "locator" : "33:41-33:91"
                } ],
                "localId" : "83",
                "locator" : "33:14-33:91"
              }, {
                "type" : "Equal",
                "operand" : [ {
                  "type" : "Property",
                  "source" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "localId" : "84",
                      "locator" : "34:18-34:25",
                      "name" : "quantity"
                    },
                    "localId" : "85",
                    "locator" : "34:18-34:32",
                    "path" : "system"
                  },
                  "localId" : "86",
                  "locator" : "34:18-34:38",
                  "path" : "value"
                }, {
                  "type" : "Literal",
                  "localId" : "87",
                  "locator" : "34:42-34:92",
                  "valueType" : "{urn:hl7-org:elm-types:r1}String",
                  "value" : "http://hl7.org/fhirpath/CodeSystem/calendar-units"
                } ],
                "localId" : "88",
                "locator" : "34:18-34:92"
              } ],
              "localId" : "89",
              "locator" : "33:14-34:92"
            },
            "then" : {
              "type" : "Instance",
              "element" : [ {
                "type" : "InstanceElement",
                "value" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "localId" : "90",
                      "locator" : "35:38-35:45",
                      "name" : "quantity"
                    },
                    "localId" : "91",
                    "locator" : "35:38-35:51",
                    "path" : "value"
                  },
                  "localId" : "92",
                  "locator" : "35:38-35:57",
                  "path" : "value"
                },
                "name" : "value"
              }, {
                "type" : "InstanceElement",
                "value" : {
                  "type" : "FunctionRef",
                  "operand" : [ {
                    "type" : "Coalesce",
                    "operand" : [ {
                      "type" : "Property",
                      "source" : {
                        "type" : "Property",
                        "source" : {
                          "type" : "OperandRef",
                          "localId" : "93",
                          "locator" : "35:90-35:97",
                          "name" : "quantity"
                        },
                        "localId" : "94",
                        "locator" : "35:90-35:102",
                        "path" : "code"
                      },
                      "localId" : "95",
                      "locator" : "35:90-35:108",
                      "path" : "value"
                    }, {
                      "type" : "Property",
                      "source" : {
                        "type" : "Property",
                        "source" : {
                          "type" : "OperandRef",
                          "localId" : "96",
                          "locator" : "35:111-35:118",
                          "name" : "quantity"
                        },
                        "localId" : "97",
                        "locator" : "35:111-35:123",
                        "path" : "unit"
                      },
                      "localId" : "98",
                      "locator" : "35:111-35:129",
                      "path" : "value"
                    }, {
                      "type" : "Literal",
                      "localId" : "99",
                      "locator" : "35:132-35:134",
                      "valueType" : "{urn:hl7-org:elm-types:r1}String",
                      "value" : "1"
                    } ],
                    "localId" : "100",
                    "locator" : "35:81-35:135"
                  } ],
                  "localId" : "101",
                  "locator" : "35:66-35:136",
                  "name" : "ToCalendarUnit"
                },
                "name" : "unit"
              } ],
              "localId" : "102",
              "locator" : "35:13-35:138",
              "classType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "103",
            "locator" : "33:9-35:138"
          } ],
          "else" : {
            "type" : "As",
            "operand" : {
              "type" : "Message",
              "source" : {
                "type" : "Null",
                "localId" : "104",
                "locator" : "37:21-37:24"
              },
              "condition" : {
                "type" : "Literal",
                "localId" : "105",
                "locator" : "37:27-37:30",
                "valueType" : "{urn:hl7-org:elm-types:r1}Boolean",
                "value" : "true"
              },
              "code" : {
                "type" : "Literal",
                "localId" : "106",
                "locator" : "37:33-37:76",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : "FHIRHelpers.ToQuantity.InvalidFHIRQuantity"
              },
              "severity" : {
                "type" : "Literal",
                "localId" : "107",
                "locator" : "37:79-37:85",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : "Error"
              },
              "message" : {
                "type" : "Concatenate",
                "operand" : [ {
                  "type" : "Coalesce",
                  "operand" : [ {
                    "type" : "Concatenate",
                    "operand" : [ {
                      "type" : "Coalesce",
                      "operand" : [ {
                        "type" : "Concatenate",
                        "operand" : [ {
                          "type" : "Coalesce",
                          "operand" : [ {
                            "type" : "Concatenate",
                            "operand" : [ {
                              "type" : "Coalesce",
                              "operand" : [ {
                                "type" : "Concatenate",
                                "operand" : [ {
                                  "type" : "Coalesce",
                                  "operand" : [ {
                                    "type" : "Concatenate",
                                    "operand" : [ {
                                      "type" : "Coalesce",
                                      "operand" : [ {
                                        "type" : "Literal",
                                        "localId" : "108",
                                        "locator" : "37:88-37:117",
                                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                        "value" : "Invalid FHIR Quantity code: "
                                      }, {
                                        "type" : "Literal",
                                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                        "value" : ""
                                      } ]
                                    }, {
                                      "type" : "Coalesce",
                                      "operand" : [ {
                                        "type" : "Property",
                                        "source" : {
                                          "type" : "Property",
                                          "source" : {
                                            "type" : "OperandRef",
                                            "localId" : "109",
                                            "locator" : "37:121-37:128",
                                            "name" : "quantity"
                                          },
                                          "localId" : "110",
                                          "locator" : "37:121-37:133",
                                          "path" : "unit"
                                        },
                                        "localId" : "111",
                                        "locator" : "37:121-37:139",
                                        "path" : "value"
                                      }, {
                                        "type" : "Literal",
                                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                        "value" : ""
                                      } ]
                                    } ],
                                    "localId" : "112",
                                    "locator" : "37:88-37:139"
                                  }, {
                                    "type" : "Literal",
                                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                    "value" : ""
                                  } ]
                                }, {
                                  "type" : "Coalesce",
                                  "operand" : [ {
                                    "type" : "Literal",
                                    "localId" : "113",
                                    "locator" : "37:143-37:146",
                                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                    "value" : " ("
                                  }, {
                                    "type" : "Literal",
                                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                    "value" : ""
                                  } ]
                                } ],
                                "localId" : "114",
                                "locator" : "37:88-37:146"
                              }, {
                                "type" : "Literal",
                                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                "value" : ""
                              } ]
                            }, {
                              "type" : "Coalesce",
                              "operand" : [ {
                                "type" : "Property",
                                "source" : {
                                  "type" : "Property",
                                  "source" : {
                                    "type" : "OperandRef",
                                    "localId" : "115",
                                    "locator" : "37:150-37:157",
                                    "name" : "quantity"
                                  },
                                  "localId" : "116",
                                  "locator" : "37:150-37:164",
                                  "path" : "system"
                                },
                                "localId" : "117",
                                "locator" : "37:150-37:170",
                                "path" : "value"
                              }, {
                                "type" : "Literal",
                                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                "value" : ""
                              } ]
                            } ],
                            "localId" : "118",
                            "locator" : "37:88-37:170"
                          }, {
                            "type" : "Literal",
                            "valueType" : "{urn:hl7-org:elm-types:r1}String",
                            "value" : ""
                          } ]
                        }, {
                          "type" : "Coalesce",
                          "operand" : [ {
                            "type" : "Literal",
                            "localId" : "119",
                            "locator" : "37:174-37:176",
                            "valueType" : "{urn:hl7-org:elm-types:r1}String",
                            "value" : "|"
                          }, {
                            "type" : "Literal",
                            "valueType" : "{urn:hl7-org:elm-types:r1}String",
                            "value" : ""
                          } ]
                        } ],
                        "localId" : "120",
                        "locator" : "37:88-37:176"
                      }, {
                        "type" : "Literal",
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : ""
                      } ]
                    }, {
                      "type" : "Coalesce",
                      "operand" : [ {
                        "type" : "Property",
                        "source" : {
                          "type" : "Property",
                          "source" : {
                            "type" : "OperandRef",
                            "localId" : "121",
                            "locator" : "37:180-37:187",
                            "name" : "quantity"
                          },
                          "localId" : "122",
                          "locator" : "37:180-37:192",
                          "path" : "code"
                        },
                        "localId" : "123",
                        "locator" : "37:180-37:198",
                        "path" : "value"
                      }, {
                        "type" : "Literal",
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : ""
                      } ]
                    } ],
                    "localId" : "124",
                    "locator" : "37:88-37:198"
                  }, {
                    "type" : "Literal",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : ""
                  } ]
                }, {
                  "type" : "Coalesce",
                  "operand" : [ {
                    "type" : "Literal",
                    "localId" : "125",
                    "locator" : "37:202-37:204",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : ")"
                  }, {
                    "type" : "Literal",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : ""
                  } ]
                } ],
                "localId" : "126",
                "locator" : "37:88-37:204"
              },
              "localId" : "127",
              "locator" : "37:13-37:205"
            },
            "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
          },
          "localId" : "128",
          "locator" : "28:5-38:7"
        },
        "localId" : "129",
        "locator" : "27:1-38:7",
        "name" : "ToQuantity",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "130",
            "locator" : "40:55-40:67",
            "name" : "{http://hl7.org/fhir}Quantity"
          },
          "name" : "quantity"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToQuantityIgnoringComparator", "(", "quantity", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Quantity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "130"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "case\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "quantity" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "131"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " is null" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "132"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then ", "null" ],
                            "r" : "133"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "134"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "quantity" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "135"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "136"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "136"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " is null" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "137"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then ", "null" ],
                            "r" : "138"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "139"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "when " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "140"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "system" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "141"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "141"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ " is null" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "142"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " or " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "quantity" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "143"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "system" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "144"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "144"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "value" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "145"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "145"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ " ", "=", " " ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "'http://unitsofmeasure.org'" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "146"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "147"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "148"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "\n              or " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "149"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "system" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "150"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "150"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "value" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "151"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "151"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " ", "=", " " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "'http://hl7.org/fhirpath/CodeSystem/calendar-units'" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "152"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "153"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "154"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " then\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "System", ".", "Quantity", " { " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "value", ": " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "155"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "value" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "156"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "156"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "value" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "157"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "157"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "unit", ": " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "ToCalendarUnit", "(" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "Coalesce", "(" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "quantity" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "158"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "." ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "code" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "159"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "159"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "value" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "160"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "160"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ", " ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "quantity" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "161"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "." ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "unit" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "162"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "162"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "value" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "163"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "163"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ", " ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "'1'" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "164"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ")" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "165"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ ")" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "166"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " }" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "167"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "168"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n        else\n            " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "Message", "(", "null", ", ", "true", ", " ],
                            "r" : "169"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'FHIRHelpers.ToQuantity.InvalidFHIRQuantity'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "171"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ", " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "'Error'" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "172"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ", " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "'Invalid FHIR Quantity code: '" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "173"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ " & " ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ {
                                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                              "value" : {
                                                                "s" : [ "quantity" ]
                                                              },
                                                              "nil" : false,
                                                              "globalScope" : true,
                                                              "typeSubstituted" : false
                                                            } ],
                                                            "r" : "174"
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        }, {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ "." ]
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        }, {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ {
                                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                              "value" : {
                                                                "s" : [ "unit" ]
                                                              },
                                                              "nil" : false,
                                                              "globalScope" : true,
                                                              "typeSubstituted" : false
                                                            } ],
                                                            "r" : "175"
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        } ],
                                                        "r" : "175"
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    }, {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "." ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    }, {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ {
                                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                          "value" : {
                                                            "s" : [ "value" ]
                                                          },
                                                          "nil" : false,
                                                          "globalScope" : true,
                                                          "typeSubstituted" : false
                                                        } ],
                                                        "r" : "176"
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "176"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "177"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ " & " ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "' ('" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "178"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "179"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ " & " ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "quantity" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "180"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "." ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                }, {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ {
                                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                      "value" : {
                                                        "s" : [ "system" ]
                                                      },
                                                      "nil" : false,
                                                      "globalScope" : true,
                                                      "typeSubstituted" : false
                                                    } ],
                                                    "r" : "181"
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "181"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "." ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            }, {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "value" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ],
                                                "r" : "182"
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "182"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "183"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ " & " ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "'|'" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "184"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "185"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " & " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "quantity" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "186"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "." ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "code" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "187"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "187"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "value" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "188"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "188"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "189"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " & " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "')'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "190"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "191"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ")" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "192"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "\n    end" ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "193"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "193"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "194"
          }
        } ],
        "expression" : {
          "type" : "Case",
          "caseItem" : [ {
            "type" : "CaseItem",
            "when" : {
              "type" : "IsNull",
              "operand" : {
                "type" : "OperandRef",
                "localId" : "131",
                "locator" : "42:14-42:21",
                "name" : "quantity"
              },
              "localId" : "132",
              "locator" : "42:14-42:29"
            },
            "then" : {
              "type" : "As",
              "operand" : {
                "type" : "Null",
                "localId" : "133",
                "locator" : "42:36-42:39"
              },
              "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "134",
            "locator" : "42:9-42:39"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "IsNull",
              "operand" : {
                "type" : "Property",
                "source" : {
                  "type" : "OperandRef",
                  "localId" : "135",
                  "locator" : "43:14-43:21",
                  "name" : "quantity"
                },
                "localId" : "136",
                "locator" : "43:14-43:27",
                "path" : "value"
              },
              "localId" : "137",
              "locator" : "43:14-43:35"
            },
            "then" : {
              "type" : "As",
              "operand" : {
                "type" : "Null",
                "localId" : "138",
                "locator" : "43:42-43:45"
              },
              "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "139",
            "locator" : "43:9-43:45"
          }, {
            "type" : "CaseItem",
            "when" : {
              "type" : "Or",
              "operand" : [ {
                "type" : "Or",
                "operand" : [ {
                  "type" : "IsNull",
                  "operand" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "localId" : "140",
                      "locator" : "44:14-44:21",
                      "name" : "quantity"
                    },
                    "localId" : "141",
                    "locator" : "44:14-44:28",
                    "path" : "system"
                  },
                  "localId" : "142",
                  "locator" : "44:14-44:36"
                }, {
                  "type" : "Equal",
                  "operand" : [ {
                    "type" : "Property",
                    "source" : {
                      "type" : "Property",
                      "source" : {
                        "type" : "OperandRef",
                        "localId" : "143",
                        "locator" : "44:41-44:48",
                        "name" : "quantity"
                      },
                      "localId" : "144",
                      "locator" : "44:41-44:55",
                      "path" : "system"
                    },
                    "localId" : "145",
                    "locator" : "44:41-44:61",
                    "path" : "value"
                  }, {
                    "type" : "Literal",
                    "localId" : "146",
                    "locator" : "44:65-44:91",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : "http://unitsofmeasure.org"
                  } ],
                  "localId" : "147",
                  "locator" : "44:41-44:91"
                } ],
                "localId" : "148",
                "locator" : "44:14-44:91"
              }, {
                "type" : "Equal",
                "operand" : [ {
                  "type" : "Property",
                  "source" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "localId" : "149",
                      "locator" : "45:18-45:25",
                      "name" : "quantity"
                    },
                    "localId" : "150",
                    "locator" : "45:18-45:32",
                    "path" : "system"
                  },
                  "localId" : "151",
                  "locator" : "45:18-45:38",
                  "path" : "value"
                }, {
                  "type" : "Literal",
                  "localId" : "152",
                  "locator" : "45:42-45:92",
                  "valueType" : "{urn:hl7-org:elm-types:r1}String",
                  "value" : "http://hl7.org/fhirpath/CodeSystem/calendar-units"
                } ],
                "localId" : "153",
                "locator" : "45:18-45:92"
              } ],
              "localId" : "154",
              "locator" : "44:14-45:92"
            },
            "then" : {
              "type" : "Instance",
              "element" : [ {
                "type" : "InstanceElement",
                "value" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "localId" : "155",
                      "locator" : "46:38-46:45",
                      "name" : "quantity"
                    },
                    "localId" : "156",
                    "locator" : "46:38-46:51",
                    "path" : "value"
                  },
                  "localId" : "157",
                  "locator" : "46:38-46:57",
                  "path" : "value"
                },
                "name" : "value"
              }, {
                "type" : "InstanceElement",
                "value" : {
                  "type" : "FunctionRef",
                  "operand" : [ {
                    "type" : "Coalesce",
                    "operand" : [ {
                      "type" : "Property",
                      "source" : {
                        "type" : "Property",
                        "source" : {
                          "type" : "OperandRef",
                          "localId" : "158",
                          "locator" : "46:90-46:97",
                          "name" : "quantity"
                        },
                        "localId" : "159",
                        "locator" : "46:90-46:102",
                        "path" : "code"
                      },
                      "localId" : "160",
                      "locator" : "46:90-46:108",
                      "path" : "value"
                    }, {
                      "type" : "Property",
                      "source" : {
                        "type" : "Property",
                        "source" : {
                          "type" : "OperandRef",
                          "localId" : "161",
                          "locator" : "46:111-46:118",
                          "name" : "quantity"
                        },
                        "localId" : "162",
                        "locator" : "46:111-46:123",
                        "path" : "unit"
                      },
                      "localId" : "163",
                      "locator" : "46:111-46:129",
                      "path" : "value"
                    }, {
                      "type" : "Literal",
                      "localId" : "164",
                      "locator" : "46:132-46:134",
                      "valueType" : "{urn:hl7-org:elm-types:r1}String",
                      "value" : "1"
                    } ],
                    "localId" : "165",
                    "locator" : "46:81-46:135"
                  } ],
                  "localId" : "166",
                  "locator" : "46:66-46:136",
                  "name" : "ToCalendarUnit"
                },
                "name" : "unit"
              } ],
              "localId" : "167",
              "locator" : "46:13-46:138",
              "classType" : "{urn:hl7-org:elm-types:r1}Quantity"
            },
            "localId" : "168",
            "locator" : "44:9-46:138"
          } ],
          "else" : {
            "type" : "As",
            "operand" : {
              "type" : "Message",
              "source" : {
                "type" : "Null",
                "localId" : "169",
                "locator" : "48:21-48:24"
              },
              "condition" : {
                "type" : "Literal",
                "localId" : "170",
                "locator" : "48:27-48:30",
                "valueType" : "{urn:hl7-org:elm-types:r1}Boolean",
                "value" : "true"
              },
              "code" : {
                "type" : "Literal",
                "localId" : "171",
                "locator" : "48:33-48:76",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : "FHIRHelpers.ToQuantity.InvalidFHIRQuantity"
              },
              "severity" : {
                "type" : "Literal",
                "localId" : "172",
                "locator" : "48:79-48:85",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : "Error"
              },
              "message" : {
                "type" : "Concatenate",
                "operand" : [ {
                  "type" : "Coalesce",
                  "operand" : [ {
                    "type" : "Concatenate",
                    "operand" : [ {
                      "type" : "Coalesce",
                      "operand" : [ {
                        "type" : "Concatenate",
                        "operand" : [ {
                          "type" : "Coalesce",
                          "operand" : [ {
                            "type" : "Concatenate",
                            "operand" : [ {
                              "type" : "Coalesce",
                              "operand" : [ {
                                "type" : "Concatenate",
                                "operand" : [ {
                                  "type" : "Coalesce",
                                  "operand" : [ {
                                    "type" : "Concatenate",
                                    "operand" : [ {
                                      "type" : "Coalesce",
                                      "operand" : [ {
                                        "type" : "Literal",
                                        "localId" : "173",
                                        "locator" : "48:88-48:117",
                                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                        "value" : "Invalid FHIR Quantity code: "
                                      }, {
                                        "type" : "Literal",
                                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                        "value" : ""
                                      } ]
                                    }, {
                                      "type" : "Coalesce",
                                      "operand" : [ {
                                        "type" : "Property",
                                        "source" : {
                                          "type" : "Property",
                                          "source" : {
                                            "type" : "OperandRef",
                                            "localId" : "174",
                                            "locator" : "48:121-48:128",
                                            "name" : "quantity"
                                          },
                                          "localId" : "175",
                                          "locator" : "48:121-48:133",
                                          "path" : "unit"
                                        },
                                        "localId" : "176",
                                        "locator" : "48:121-48:139",
                                        "path" : "value"
                                      }, {
                                        "type" : "Literal",
                                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                        "value" : ""
                                      } ]
                                    } ],
                                    "localId" : "177",
                                    "locator" : "48:88-48:139"
                                  }, {
                                    "type" : "Literal",
                                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                    "value" : ""
                                  } ]
                                }, {
                                  "type" : "Coalesce",
                                  "operand" : [ {
                                    "type" : "Literal",
                                    "localId" : "178",
                                    "locator" : "48:143-48:146",
                                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                    "value" : " ("
                                  }, {
                                    "type" : "Literal",
                                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                    "value" : ""
                                  } ]
                                } ],
                                "localId" : "179",
                                "locator" : "48:88-48:146"
                              }, {
                                "type" : "Literal",
                                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                "value" : ""
                              } ]
                            }, {
                              "type" : "Coalesce",
                              "operand" : [ {
                                "type" : "Property",
                                "source" : {
                                  "type" : "Property",
                                  "source" : {
                                    "type" : "OperandRef",
                                    "localId" : "180",
                                    "locator" : "48:150-48:157",
                                    "name" : "quantity"
                                  },
                                  "localId" : "181",
                                  "locator" : "48:150-48:164",
                                  "path" : "system"
                                },
                                "localId" : "182",
                                "locator" : "48:150-48:170",
                                "path" : "value"
                              }, {
                                "type" : "Literal",
                                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                "value" : ""
                              } ]
                            } ],
                            "localId" : "183",
                            "locator" : "48:88-48:170"
                          }, {
                            "type" : "Literal",
                            "valueType" : "{urn:hl7-org:elm-types:r1}String",
                            "value" : ""
                          } ]
                        }, {
                          "type" : "Coalesce",
                          "operand" : [ {
                            "type" : "Literal",
                            "localId" : "184",
                            "locator" : "48:174-48:176",
                            "valueType" : "{urn:hl7-org:elm-types:r1}String",
                            "value" : "|"
                          }, {
                            "type" : "Literal",
                            "valueType" : "{urn:hl7-org:elm-types:r1}String",
                            "value" : ""
                          } ]
                        } ],
                        "localId" : "185",
                        "locator" : "48:88-48:176"
                      }, {
                        "type" : "Literal",
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : ""
                      } ]
                    }, {
                      "type" : "Coalesce",
                      "operand" : [ {
                        "type" : "Property",
                        "source" : {
                          "type" : "Property",
                          "source" : {
                            "type" : "OperandRef",
                            "localId" : "186",
                            "locator" : "48:180-48:187",
                            "name" : "quantity"
                          },
                          "localId" : "187",
                          "locator" : "48:180-48:192",
                          "path" : "code"
                        },
                        "localId" : "188",
                        "locator" : "48:180-48:198",
                        "path" : "value"
                      }, {
                        "type" : "Literal",
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : ""
                      } ]
                    } ],
                    "localId" : "189",
                    "locator" : "48:88-48:198"
                  }, {
                    "type" : "Literal",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : ""
                  } ]
                }, {
                  "type" : "Coalesce",
                  "operand" : [ {
                    "type" : "Literal",
                    "localId" : "190",
                    "locator" : "48:202-48:204",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : ")"
                  }, {
                    "type" : "Literal",
                    "valueType" : "{urn:hl7-org:elm-types:r1}String",
                    "value" : ""
                  } ]
                } ],
                "localId" : "191",
                "locator" : "48:88-48:204"
              },
              "localId" : "192",
              "locator" : "48:13-48:205"
            },
            "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
          },
          "localId" : "193",
          "locator" : "41:5-49:7"
        },
        "localId" : "194",
        "locator" : "40:1-49:7",
        "name" : "ToQuantityIgnoringComparator",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "195",
            "locator" : "51:37-51:49",
            "name" : "{http://hl7.org/fhir}Quantity"
          },
          "name" : "quantity"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToInterval", "(", "quantity", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Quantity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "195"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "if " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "quantity" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "196"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " is null" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "197"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ " then ", "null", " else\n        " ],
                        "r" : "198"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "case " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "quantity" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "199"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "comparator" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "200"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "200"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "." ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "value" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "201"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "201"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "when " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'<'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "202"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " then\n                " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "Interval[\n                    ", "null", ",\n                    " ],
                                    "r" : "203"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "ToQuantityIgnoringComparator", "(" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "quantity" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "204"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ ")" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "205"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "\n                )" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "206"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "207"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "when " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'<='" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "208"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " then\n                " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "Interval[\n                    ", "null", ",\n                    " ],
                                    "r" : "209"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "ToQuantityIgnoringComparator", "(" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "quantity" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "210"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ ")" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "211"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "\n                ]" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "212"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "213"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "when " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'>='" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "214"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " then\n                " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "Interval[\n                    " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "ToQuantityIgnoringComparator", "(" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "quantity" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "215"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ ")" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "216"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ ",\n                    ", "null", "\n                ]" ],
                                    "r" : "217"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "218"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "219"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "when " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "'>'" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "220"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ " then\n                " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "Interval(\n                    " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "ToQuantityIgnoringComparator", "(" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "quantity" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "221"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ ")" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "222"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ ",\n                    ", "null", "\n                ]" ],
                                    "r" : "223"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "224"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "225"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n            else\n                " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "Interval[" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "ToQuantity", "(" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "quantity" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "226"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ ")" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "227"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ", " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "ToQuantity", "(" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "quantity" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "228"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ ")" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "229"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "]" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "230"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n        end" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "231"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "232"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "232"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "233"
          }
        } ],
        "expression" : {
          "type" : "If",
          "condition" : {
            "type" : "IsNull",
            "operand" : {
              "type" : "OperandRef",
              "localId" : "196",
              "locator" : "52:8-52:15",
              "name" : "quantity"
            },
            "localId" : "197",
            "locator" : "52:8-52:23"
          },
          "then" : {
            "type" : "As",
            "asTypeSpecifier" : {
              "type" : "IntervalTypeSpecifier",
              "pointType" : {
                "type" : "NamedTypeSpecifier",
                "name" : "{urn:hl7-org:elm-types:r1}Quantity"
              }
            },
            "operand" : {
              "type" : "Null",
              "localId" : "198",
              "locator" : "52:30-52:33"
            }
          },
          "else" : {
            "type" : "Case",
            "comparand" : {
              "type" : "Property",
              "source" : {
                "type" : "Property",
                "source" : {
                  "type" : "OperandRef",
                  "localId" : "199",
                  "locator" : "53:14-53:21",
                  "name" : "quantity"
                },
                "localId" : "200",
                "locator" : "53:14-53:32",
                "path" : "comparator"
              },
              "localId" : "201",
              "locator" : "53:14-53:38",
              "path" : "value"
            },
            "caseItem" : [ {
              "type" : "CaseItem",
              "when" : {
                "type" : "Literal",
                "localId" : "202",
                "locator" : "54:18-54:20",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : "<"
              },
              "then" : {
                "type" : "Interval",
                "low" : {
                  "type" : "As",
                  "operand" : {
                    "type" : "Null",
                    "localId" : "203",
                    "locator" : "56:21-56:24"
                  },
                  "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
                },
                "high" : {
                  "type" : "FunctionRef",
                  "operand" : [ {
                    "type" : "OperandRef",
                    "localId" : "204",
                    "locator" : "57:50-57:57",
                    "name" : "quantity"
                  } ],
                  "localId" : "205",
                  "locator" : "57:21-57:58",
                  "name" : "ToQuantityIgnoringComparator"
                },
                "localId" : "206",
                "locator" : "55:17-58:17",
                "lowClosed" : true,
                "highClosed" : false
              },
              "localId" : "207",
              "locator" : "54:13-58:17"
            }, {
              "type" : "CaseItem",
              "when" : {
                "type" : "Literal",
                "localId" : "208",
                "locator" : "59:18-59:21",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : "<="
              },
              "then" : {
                "type" : "Interval",
                "low" : {
                  "type" : "As",
                  "operand" : {
                    "type" : "Null",
                    "localId" : "209",
                    "locator" : "61:21-61:24"
                  },
                  "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
                },
                "high" : {
                  "type" : "FunctionRef",
                  "operand" : [ {
                    "type" : "OperandRef",
                    "localId" : "210",
                    "locator" : "62:50-62:57",
                    "name" : "quantity"
                  } ],
                  "localId" : "211",
                  "locator" : "62:21-62:58",
                  "name" : "ToQuantityIgnoringComparator"
                },
                "localId" : "212",
                "locator" : "60:17-63:17",
                "lowClosed" : true,
                "highClosed" : true
              },
              "localId" : "213",
              "locator" : "59:13-63:17"
            }, {
              "type" : "CaseItem",
              "when" : {
                "type" : "Literal",
                "localId" : "214",
                "locator" : "64:18-64:21",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : ">="
              },
              "then" : {
                "type" : "Interval",
                "low" : {
                  "type" : "FunctionRef",
                  "operand" : [ {
                    "type" : "OperandRef",
                    "localId" : "215",
                    "locator" : "66:50-66:57",
                    "name" : "quantity"
                  } ],
                  "localId" : "216",
                  "locator" : "66:21-66:58",
                  "name" : "ToQuantityIgnoringComparator"
                },
                "high" : {
                  "type" : "As",
                  "operand" : {
                    "type" : "Null",
                    "localId" : "217",
                    "locator" : "67:21-67:24"
                  },
                  "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
                },
                "localId" : "218",
                "locator" : "65:17-68:17",
                "lowClosed" : true,
                "highClosed" : true
              },
              "localId" : "219",
              "locator" : "64:13-68:17"
            }, {
              "type" : "CaseItem",
              "when" : {
                "type" : "Literal",
                "localId" : "220",
                "locator" : "69:18-69:20",
                "valueType" : "{urn:hl7-org:elm-types:r1}String",
                "value" : ">"
              },
              "then" : {
                "type" : "Interval",
                "low" : {
                  "type" : "FunctionRef",
                  "operand" : [ {
                    "type" : "OperandRef",
                    "localId" : "221",
                    "locator" : "71:50-71:57",
                    "name" : "quantity"
                  } ],
                  "localId" : "222",
                  "locator" : "71:21-71:58",
                  "name" : "ToQuantityIgnoringComparator"
                },
                "high" : {
                  "type" : "As",
                  "operand" : {
                    "type" : "Null",
                    "localId" : "223",
                    "locator" : "72:21-72:24"
                  },
                  "asType" : "{urn:hl7-org:elm-types:r1}Quantity"
                },
                "localId" : "224",
                "locator" : "70:17-73:17",
                "lowClosed" : false,
                "highClosed" : true
              },
              "localId" : "225",
              "locator" : "69:13-73:17"
            } ],
            "else" : {
              "type" : "Interval",
              "low" : {
                "type" : "FunctionRef",
                "operand" : [ {
                  "type" : "OperandRef",
                  "localId" : "226",
                  "locator" : "75:37-75:44",
                  "name" : "quantity"
                } ],
                "localId" : "227",
                "locator" : "75:26-75:45",
                "name" : "ToQuantity"
              },
              "high" : {
                "type" : "FunctionRef",
                "operand" : [ {
                  "type" : "OperandRef",
                  "localId" : "228",
                  "locator" : "75:59-75:66",
                  "name" : "quantity"
                } ],
                "localId" : "229",
                "locator" : "75:48-75:67",
                "name" : "ToQuantity"
              },
              "localId" : "230",
              "locator" : "75:17-75:68",
              "lowClosed" : true,
              "highClosed" : true
            },
            "localId" : "231",
            "locator" : "53:9-76:11"
          },
          "localId" : "232",
          "locator" : "52:5-76:11"
        },
        "localId" : "233",
        "locator" : "51:1-76:11",
        "name" : "ToInterval",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "234",
            "locator" : "78:31-78:40",
            "name" : "{http://hl7.org/fhir}Ratio"
          },
          "name" : "ratio"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToRatio", "(", "ratio", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Ratio" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "234"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "if " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "ratio" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "235"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " is null" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "236"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ " then\n        ", "null", "\n    else\n        " ],
                        "r" : "237"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "System", ".", "Ratio", " { " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "numerator", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "ToQuantity", "(" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "ratio" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "238"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "numerator" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "239"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "239"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ ")" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "240"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ", " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "denominator", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "ToQuantity", "(" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "ratio" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "241"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "denominator" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "242"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "242"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ ")" ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "243"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " }" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "244"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "245"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "245"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "246"
          }
        } ],
        "expression" : {
          "type" : "If",
          "condition" : {
            "type" : "IsNull",
            "operand" : {
              "type" : "OperandRef",
              "localId" : "235",
              "locator" : "79:8-79:12",
              "name" : "ratio"
            },
            "localId" : "236",
            "locator" : "79:8-79:20"
          },
          "then" : {
            "type" : "As",
            "operand" : {
              "type" : "Null",
              "localId" : "237",
              "locator" : "80:9-80:12"
            },
            "asType" : "{urn:hl7-org:elm-types:r1}Ratio"
          },
          "else" : {
            "type" : "Instance",
            "element" : [ {
              "type" : "InstanceElement",
              "value" : {
                "type" : "FunctionRef",
                "operand" : [ {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "238",
                    "locator" : "82:46-82:50",
                    "name" : "ratio"
                  },
                  "localId" : "239",
                  "locator" : "82:46-82:60",
                  "path" : "numerator"
                } ],
                "localId" : "240",
                "locator" : "82:35-82:61",
                "name" : "ToQuantity"
              },
              "name" : "numerator"
            }, {
              "type" : "InstanceElement",
              "value" : {
                "type" : "FunctionRef",
                "operand" : [ {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "241",
                    "locator" : "82:88-82:92",
                    "name" : "ratio"
                  },
                  "localId" : "242",
                  "locator" : "82:88-82:104",
                  "path" : "denominator"
                } ],
                "localId" : "243",
                "locator" : "82:77-82:105",
                "name" : "ToQuantity"
              },
              "name" : "denominator"
            } ],
            "localId" : "244",
            "locator" : "82:9-82:107",
            "classType" : "{urn:hl7-org:elm-types:r1}Ratio"
          },
          "localId" : "245",
          "locator" : "79:5-82:107"
        },
        "localId" : "246",
        "locator" : "78:1-82:107",
        "name" : "ToRatio",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "247",
            "locator" : "84:34-84:43",
            "name" : "{http://hl7.org/fhir}Range"
          },
          "name" : "range"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToInterval", "(", "range", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Range" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "247"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "if " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "range" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "248"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " is null" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "249"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ " then\n        ", "null", "\n    else\n        " ],
                        "r" : "250"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "Interval[" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "ToQuantity", "(" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "range" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "251"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "low" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "252"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "252"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ")" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "253"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ", " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "ToQuantity", "(" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "range" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "254"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "high" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "255"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "255"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ ")" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "256"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "]" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "257"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "258"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "258"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "259"
          }
        } ],
        "expression" : {
          "type" : "If",
          "condition" : {
            "type" : "IsNull",
            "operand" : {
              "type" : "OperandRef",
              "localId" : "248",
              "locator" : "85:8-85:12",
              "name" : "range"
            },
            "localId" : "249",
            "locator" : "85:8-85:20"
          },
          "then" : {
            "type" : "As",
            "asTypeSpecifier" : {
              "type" : "IntervalTypeSpecifier",
              "pointType" : {
                "type" : "NamedTypeSpecifier",
                "name" : "{urn:hl7-org:elm-types:r1}Quantity"
              }
            },
            "operand" : {
              "type" : "Null",
              "localId" : "250",
              "locator" : "86:9-86:12"
            }
          },
          "else" : {
            "type" : "Interval",
            "low" : {
              "type" : "FunctionRef",
              "operand" : [ {
                "type" : "Property",
                "source" : {
                  "type" : "OperandRef",
                  "localId" : "251",
                  "locator" : "88:29-88:33",
                  "name" : "range"
                },
                "localId" : "252",
                "locator" : "88:29-88:37",
                "path" : "low"
              } ],
              "localId" : "253",
              "locator" : "88:18-88:38",
              "name" : "ToQuantity"
            },
            "high" : {
              "type" : "FunctionRef",
              "operand" : [ {
                "type" : "Property",
                "source" : {
                  "type" : "OperandRef",
                  "localId" : "254",
                  "locator" : "88:52-88:56",
                  "name" : "range"
                },
                "localId" : "255",
                "locator" : "88:52-88:61",
                "path" : "high"
              } ],
              "localId" : "256",
              "locator" : "88:41-88:62",
              "name" : "ToQuantity"
            },
            "localId" : "257",
            "locator" : "88:9-88:63",
            "lowClosed" : true,
            "highClosed" : true
          },
          "localId" : "258",
          "locator" : "85:5-88:63"
        },
        "localId" : "259",
        "locator" : "84:1-88:63",
        "name" : "ToInterval",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "260",
            "locator" : "90:31-90:41",
            "name" : "{http://hl7.org/fhir}Coding"
          },
          "name" : "coding"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToCode", "(", "coding", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "Coding" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "260"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "if " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "coding" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "261"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " is null" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "262"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ " then\n        ", "null", "\n    else\n        " ],
                        "r" : "263"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "System", ".", "Code", " {\n          " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "code", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "coding" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "264"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "code" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "265"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "265"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "266"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "266"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ",\n          " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "system", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "coding" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "267"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "system" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "268"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "268"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "269"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "269"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ",\n          " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "version", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "coding" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "270"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "version" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "271"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "271"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "272"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "272"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ",\n          " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "display", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "coding" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "273"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "display" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "274"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "274"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "275"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "275"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n        }" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "276"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "277"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "277"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "278"
          }
        } ],
        "expression" : {
          "type" : "If",
          "condition" : {
            "type" : "IsNull",
            "operand" : {
              "type" : "OperandRef",
              "localId" : "261",
              "locator" : "91:8-91:13",
              "name" : "coding"
            },
            "localId" : "262",
            "locator" : "91:8-91:21"
          },
          "then" : {
            "type" : "As",
            "operand" : {
              "type" : "Null",
              "localId" : "263",
              "locator" : "92:9-92:12"
            },
            "asType" : "{urn:hl7-org:elm-types:r1}Code"
          },
          "else" : {
            "type" : "Instance",
            "element" : [ {
              "type" : "InstanceElement",
              "value" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "264",
                    "locator" : "95:17-95:22",
                    "name" : "coding"
                  },
                  "localId" : "265",
                  "locator" : "95:17-95:27",
                  "path" : "code"
                },
                "localId" : "266",
                "locator" : "95:17-95:33",
                "path" : "value"
              },
              "name" : "code"
            }, {
              "type" : "InstanceElement",
              "value" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "267",
                    "locator" : "96:19-96:24",
                    "name" : "coding"
                  },
                  "localId" : "268",
                  "locator" : "96:19-96:31",
                  "path" : "system"
                },
                "localId" : "269",
                "locator" : "96:19-96:37",
                "path" : "value"
              },
              "name" : "system"
            }, {
              "type" : "InstanceElement",
              "value" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "270",
                    "locator" : "97:20-97:25",
                    "name" : "coding"
                  },
                  "localId" : "271",
                  "locator" : "97:20-97:33",
                  "path" : "version"
                },
                "localId" : "272",
                "locator" : "97:20-97:39",
                "path" : "value"
              },
              "name" : "version"
            }, {
              "type" : "InstanceElement",
              "value" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "273",
                    "locator" : "98:20-98:25",
                    "name" : "coding"
                  },
                  "localId" : "274",
                  "locator" : "98:20-98:33",
                  "path" : "display"
                },
                "localId" : "275",
                "locator" : "98:20-98:39",
                "path" : "value"
              },
              "name" : "display"
            } ],
            "localId" : "276",
            "locator" : "94:9-99:9",
            "classType" : "{urn:hl7-org:elm-types:r1}Code"
          },
          "localId" : "277",
          "locator" : "91:5-99:9"
        },
        "localId" : "278",
        "locator" : "90:1-99:9",
        "name" : "ToCode",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "279",
            "locator" : "101:35-101:54",
            "name" : "{http://hl7.org/fhir}CodeableConcept"
          },
          "name" : "concept"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToConcept", "(", "concept", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIR", ".", "CodeableConcept" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "279"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "):\n    " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "if " ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "concept" ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ],
                            "r" : "280"
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ " is null" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "281"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ " then\n        ", "null", "\n    else\n        " ],
                        "r" : "282"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "System", ".", "Concept", " {\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "codes", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ {
                                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                                  "value" : {
                                                    "s" : [ "concept", ".", "coding" ]
                                                  },
                                                  "nil" : false,
                                                  "globalScope" : true,
                                                  "typeSubstituted" : false
                                                } ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "283"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ " ", "C" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "284"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ " " ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "return " ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "ToCode", "(" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ {
                                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                              "value" : {
                                                "s" : [ "C" ]
                                              },
                                              "nil" : false,
                                              "globalScope" : true,
                                              "typeSubstituted" : false
                                            } ],
                                            "r" : "285"
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        }, {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ ")" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "286"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "287"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "288"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ ",\n            " ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ "display", ": " ]
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            }, {
                              "name" : "{urn:hl7-org:cql-annotations:r1}s",
                              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                              "value" : {
                                "s" : [ {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "concept" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "289"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "." ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    }, {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ {
                                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                          "value" : {
                                            "s" : [ "text" ]
                                          },
                                          "nil" : false,
                                          "globalScope" : true,
                                          "typeSubstituted" : false
                                        } ],
                                        "r" : "290"
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "290"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ "." ]
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                }, {
                                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                  "value" : {
                                    "s" : [ {
                                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                                      "value" : {
                                        "s" : [ "value" ]
                                      },
                                      "nil" : false,
                                      "globalScope" : true,
                                      "typeSubstituted" : false
                                    } ],
                                    "r" : "291"
                                  },
                                  "nil" : false,
                                  "globalScope" : true,
                                  "typeSubstituted" : false
                                } ],
                                "r" : "291"
                              },
                              "nil" : false,
                              "globalScope" : true,
                              "typeSubstituted" : false
                            } ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        }, {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "\n        }" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "292"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "293"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "293"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "294"
          }
        } ],
        "expression" : {
          "type" : "If",
          "condition" : {
            "type" : "IsNull",
            "operand" : {
              "type" : "OperandRef",
              "localId" : "280",
              "locator" : "102:8-102:14",
              "name" : "concept"
            },
            "localId" : "281",
            "locator" : "102:8-102:22"
          },
          "then" : {
            "type" : "As",
            "operand" : {
              "type" : "Null",
              "localId" : "282",
              "locator" : "103:9-103:12"
            },
            "asType" : "{urn:hl7-org:elm-types:r1}Concept"
          },
          "else" : {
            "type" : "Instance",
            "element" : [ {
              "type" : "InstanceElement",
              "value" : {
                "type" : "Query",
                "source" : [ {
                  "type" : "AliasedQuerySource",
                  "expression" : {
                    "type" : "Property",
                    "source" : {
                      "type" : "OperandRef",
                      "name" : "concept"
                    },
                    "localId" : "283",
                    "locator" : "106:20-106:33",
                    "path" : "coding"
                  },
                  "localId" : "284",
                  "locator" : "106:20-106:35",
                  "alias" : "C"
                } ],
                "relationship" : [ ],
                "return" : {
                  "type" : "ReturnClause",
                  "expression" : {
                    "type" : "FunctionRef",
                    "operand" : [ {
                      "type" : "AliasRef",
                      "localId" : "285",
                      "locator" : "106:51",
                      "name" : "C"
                    } ],
                    "localId" : "286",
                    "locator" : "106:44-106:52",
                    "name" : "ToCode"
                  },
                  "localId" : "287",
                  "locator" : "106:37-106:52"
                },
                "localId" : "288",
                "locator" : "106:20-106:52"
              },
              "name" : "codes"
            }, {
              "type" : "InstanceElement",
              "value" : {
                "type" : "Property",
                "source" : {
                  "type" : "Property",
                  "source" : {
                    "type" : "OperandRef",
                    "localId" : "289",
                    "locator" : "107:22-107:28",
                    "name" : "concept"
                  },
                  "localId" : "290",
                  "locator" : "107:22-107:33",
                  "path" : "text"
                },
                "localId" : "291",
                "locator" : "107:22-107:39",
                "path" : "value"
              },
              "name" : "display"
            } ],
            "localId" : "292",
            "locator" : "105:9-108:9",
            "classType" : "{urn:hl7-org:elm-types:r1}Concept"
          },
          "localId" : "293",
          "locator" : "102:5-108:9"
        },
        "localId" : "294",
        "locator" : "101:1-108:9",
        "name" : "ToConcept",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "295",
            "locator" : "111:32-111:44",
            "name" : "{http://hl7.org/fhir}AccountStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AccountStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "295"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "296"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "297"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "297"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "297"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "298"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "296",
            "locator" : "111:48-111:52",
            "name" : "value"
          },
          "localId" : "297",
          "locator" : "111:48-111:58",
          "path" : "value"
        },
        "localId" : "298",
        "locator" : "111:1-111:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "299",
            "locator" : "112:32-112:56",
            "name" : "{http://hl7.org/fhir}ActionCardinalityBehavior"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionCardinalityBehavior" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "299"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "300"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "301"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "301"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "301"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "302"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "300",
            "locator" : "112:60-112:64",
            "name" : "value"
          },
          "localId" : "301",
          "locator" : "112:60-112:70",
          "path" : "value"
        },
        "localId" : "302",
        "locator" : "112:1-112:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "303",
            "locator" : "113:32-113:50",
            "name" : "{http://hl7.org/fhir}ActionConditionKind"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionConditionKind" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "303"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "304"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "305"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "305"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "305"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "306"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "304",
            "locator" : "113:54-113:58",
            "name" : "value"
          },
          "localId" : "305",
          "locator" : "113:54-113:64",
          "path" : "value"
        },
        "localId" : "306",
        "locator" : "113:1-113:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "307",
            "locator" : "114:32-114:53",
            "name" : "{http://hl7.org/fhir}ActionGroupingBehavior"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionGroupingBehavior" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "307"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "308"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "309"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "309"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "309"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "310"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "308",
            "locator" : "114:57-114:61",
            "name" : "value"
          },
          "localId" : "309",
          "locator" : "114:57-114:67",
          "path" : "value"
        },
        "localId" : "310",
        "locator" : "114:1-114:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "311",
            "locator" : "115:32-115:52",
            "name" : "{http://hl7.org/fhir}ActionParticipantType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionParticipantType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "311"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "312"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "313"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "313"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "313"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "314"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "312",
            "locator" : "115:56-115:60",
            "name" : "value"
          },
          "localId" : "313",
          "locator" : "115:56-115:66",
          "path" : "value"
        },
        "localId" : "314",
        "locator" : "115:1-115:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "315",
            "locator" : "116:32-116:53",
            "name" : "{http://hl7.org/fhir}ActionPrecheckBehavior"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionPrecheckBehavior" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "315"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "316"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "317"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "317"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "317"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "318"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "316",
            "locator" : "116:57-116:61",
            "name" : "value"
          },
          "localId" : "317",
          "locator" : "116:57-116:67",
          "path" : "value"
        },
        "localId" : "318",
        "locator" : "116:1-116:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "319",
            "locator" : "117:32-117:53",
            "name" : "{http://hl7.org/fhir}ActionRelationshipType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionRelationshipType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "319"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "320"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "321"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "321"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "321"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "322"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "320",
            "locator" : "117:57-117:61",
            "name" : "value"
          },
          "localId" : "321",
          "locator" : "117:57-117:67",
          "path" : "value"
        },
        "localId" : "322",
        "locator" : "117:1-117:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "323",
            "locator" : "118:32-118:53",
            "name" : "{http://hl7.org/fhir}ActionRequiredBehavior"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionRequiredBehavior" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "323"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "324"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "325"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "325"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "325"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "326"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "324",
            "locator" : "118:57-118:61",
            "name" : "value"
          },
          "localId" : "325",
          "locator" : "118:57-118:67",
          "path" : "value"
        },
        "localId" : "326",
        "locator" : "118:1-118:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "327",
            "locator" : "119:32-119:54",
            "name" : "{http://hl7.org/fhir}ActionSelectionBehavior"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActionSelectionBehavior" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "327"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "328"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "329"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "329"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "329"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "330"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "328",
            "locator" : "119:58-119:62",
            "name" : "value"
          },
          "localId" : "329",
          "locator" : "119:58-119:68",
          "path" : "value"
        },
        "localId" : "330",
        "locator" : "119:1-119:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "331",
            "locator" : "120:32-120:53",
            "name" : "{http://hl7.org/fhir}ActivityDefinitionKind"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActivityDefinitionKind" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "331"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "332"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "333"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "333"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "333"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "334"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "332",
            "locator" : "120:57-120:61",
            "name" : "value"
          },
          "localId" : "333",
          "locator" : "120:57-120:67",
          "path" : "value"
        },
        "localId" : "334",
        "locator" : "120:1-120:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "335",
            "locator" : "121:32-121:54",
            "name" : "{http://hl7.org/fhir}ActivityParticipantType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ActivityParticipantType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "335"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "336"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "337"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "337"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "337"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "338"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "336",
            "locator" : "121:58-121:62",
            "name" : "value"
          },
          "localId" : "337",
          "locator" : "121:58-121:68",
          "path" : "value"
        },
        "localId" : "338",
        "locator" : "121:1-121:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "339",
            "locator" : "122:32-122:42",
            "name" : "{http://hl7.org/fhir}AddressType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AddressType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "339"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "340"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "341"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "341"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "341"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "342"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "340",
            "locator" : "122:46-122:50",
            "name" : "value"
          },
          "localId" : "341",
          "locator" : "122:46-122:56",
          "path" : "value"
        },
        "localId" : "342",
        "locator" : "122:1-122:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "343",
            "locator" : "123:32-123:41",
            "name" : "{http://hl7.org/fhir}AddressUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AddressUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "343"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "344"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "345"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "345"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "345"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "346"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "344",
            "locator" : "123:45-123:49",
            "name" : "value"
          },
          "localId" : "345",
          "locator" : "123:45-123:55",
          "path" : "value"
        },
        "localId" : "346",
        "locator" : "123:1-123:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "347",
            "locator" : "124:32-124:51",
            "name" : "{http://hl7.org/fhir}AdministrativeGender"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AdministrativeGender" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "347"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "348"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "349"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "349"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "349"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "350"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "348",
            "locator" : "124:55-124:59",
            "name" : "value"
          },
          "localId" : "349",
          "locator" : "124:55-124:65",
          "path" : "value"
        },
        "localId" : "350",
        "locator" : "124:1-124:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "351",
            "locator" : "125:32-125:52",
            "name" : "{http://hl7.org/fhir}AdverseEventActuality"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AdverseEventActuality" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "351"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "352"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "353"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "353"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "353"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "354"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "352",
            "locator" : "125:56-125:60",
            "name" : "value"
          },
          "localId" : "353",
          "locator" : "125:56-125:66",
          "path" : "value"
        },
        "localId" : "354",
        "locator" : "125:1-125:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "355",
            "locator" : "126:32-126:46",
            "name" : "{http://hl7.org/fhir}AggregationMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AggregationMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "355"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "356"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "357"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "357"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "357"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "358"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "356",
            "locator" : "126:50-126:54",
            "name" : "value"
          },
          "localId" : "357",
          "locator" : "126:50-126:60",
          "path" : "value"
        },
        "localId" : "358",
        "locator" : "126:1-126:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "359",
            "locator" : "127:32-127:57",
            "name" : "{http://hl7.org/fhir}AllergyIntoleranceCategory"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AllergyIntoleranceCategory" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "359"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "360"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "361"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "361"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "361"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "362"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "360",
            "locator" : "127:61-127:65",
            "name" : "value"
          },
          "localId" : "361",
          "locator" : "127:61-127:71",
          "path" : "value"
        },
        "localId" : "362",
        "locator" : "127:1-127:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "363",
            "locator" : "128:32-128:60",
            "name" : "{http://hl7.org/fhir}AllergyIntoleranceCriticality"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AllergyIntoleranceCriticality" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "363"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "364"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "365"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "365"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "365"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "366"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "364",
            "locator" : "128:64-128:68",
            "name" : "value"
          },
          "localId" : "365",
          "locator" : "128:64-128:74",
          "path" : "value"
        },
        "localId" : "366",
        "locator" : "128:1-128:74",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "367",
            "locator" : "129:32-129:57",
            "name" : "{http://hl7.org/fhir}AllergyIntoleranceSeverity"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AllergyIntoleranceSeverity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "367"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "368"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "369"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "369"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "369"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "370"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "368",
            "locator" : "129:61-129:65",
            "name" : "value"
          },
          "localId" : "369",
          "locator" : "129:61-129:71",
          "path" : "value"
        },
        "localId" : "370",
        "locator" : "129:1-129:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "371",
            "locator" : "130:32-130:53",
            "name" : "{http://hl7.org/fhir}AllergyIntoleranceType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AllergyIntoleranceType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "371"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "372"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "373"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "373"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "373"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "374"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "372",
            "locator" : "130:57-130:61",
            "name" : "value"
          },
          "localId" : "373",
          "locator" : "130:57-130:67",
          "path" : "value"
        },
        "localId" : "374",
        "locator" : "130:1-130:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "375",
            "locator" : "131:32-131:48",
            "name" : "{http://hl7.org/fhir}AppointmentStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AppointmentStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "375"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "376"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "377"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "377"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "377"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "378"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "376",
            "locator" : "131:52-131:56",
            "name" : "value"
          },
          "localId" : "377",
          "locator" : "131:52-131:62",
          "path" : "value"
        },
        "localId" : "378",
        "locator" : "131:1-131:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "379",
            "locator" : "132:32-132:53",
            "name" : "{http://hl7.org/fhir}AssertionDirectionType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AssertionDirectionType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "379"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "380"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "381"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "381"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "381"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "382"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "380",
            "locator" : "132:57-132:61",
            "name" : "value"
          },
          "localId" : "381",
          "locator" : "132:57-132:67",
          "path" : "value"
        },
        "localId" : "382",
        "locator" : "132:1-132:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "383",
            "locator" : "133:32-133:52",
            "name" : "{http://hl7.org/fhir}AssertionOperatorType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AssertionOperatorType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "383"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "384"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "385"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "385"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "385"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "386"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "384",
            "locator" : "133:56-133:60",
            "name" : "value"
          },
          "localId" : "385",
          "locator" : "133:56-133:66",
          "path" : "value"
        },
        "localId" : "386",
        "locator" : "133:1-133:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "387",
            "locator" : "134:32-134:53",
            "name" : "{http://hl7.org/fhir}AssertionResponseTypes"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AssertionResponseTypes" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "387"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "388"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "389"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "389"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "389"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "390"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "388",
            "locator" : "134:57-134:61",
            "name" : "value"
          },
          "localId" : "389",
          "locator" : "134:57-134:67",
          "path" : "value"
        },
        "localId" : "390",
        "locator" : "134:1-134:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "391",
            "locator" : "135:32-135:47",
            "name" : "{http://hl7.org/fhir}AuditEventAction"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AuditEventAction" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "391"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "392"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "393"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "393"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "393"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "394"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "392",
            "locator" : "135:51-135:55",
            "name" : "value"
          },
          "localId" : "393",
          "locator" : "135:51-135:61",
          "path" : "value"
        },
        "localId" : "394",
        "locator" : "135:1-135:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "395",
            "locator" : "136:32-136:57",
            "name" : "{http://hl7.org/fhir}AuditEventAgentNetworkType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AuditEventAgentNetworkType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "395"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "396"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "397"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "397"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "397"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "398"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "396",
            "locator" : "136:61-136:65",
            "name" : "value"
          },
          "localId" : "397",
          "locator" : "136:61-136:71",
          "path" : "value"
        },
        "localId" : "398",
        "locator" : "136:1-136:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "399",
            "locator" : "137:32-137:48",
            "name" : "{http://hl7.org/fhir}AuditEventOutcome"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "AuditEventOutcome" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "399"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "400"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "401"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "401"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "401"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "402"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "400",
            "locator" : "137:52-137:56",
            "name" : "value"
          },
          "localId" : "401",
          "locator" : "137:52-137:62",
          "path" : "value"
        },
        "localId" : "402",
        "locator" : "137:1-137:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "403",
            "locator" : "138:32-138:46",
            "name" : "{http://hl7.org/fhir}BindingStrength"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "BindingStrength" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "403"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "404"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "405"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "405"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "405"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "406"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "404",
            "locator" : "138:50-138:54",
            "name" : "value"
          },
          "localId" : "405",
          "locator" : "138:50-138:60",
          "path" : "value"
        },
        "localId" : "406",
        "locator" : "138:1-138:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "407",
            "locator" : "139:32-139:65",
            "name" : "{http://hl7.org/fhir}BiologicallyDerivedProductCategory"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "BiologicallyDerivedProductCategory" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "407"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "408"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "409"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "409"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "409"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "410"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "408",
            "locator" : "139:69-139:73",
            "name" : "value"
          },
          "localId" : "409",
          "locator" : "139:69-139:79",
          "path" : "value"
        },
        "localId" : "410",
        "locator" : "139:1-139:79",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "411",
            "locator" : "140:32-140:63",
            "name" : "{http://hl7.org/fhir}BiologicallyDerivedProductStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "BiologicallyDerivedProductStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "411"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "412"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "413"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "413"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "413"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "414"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "412",
            "locator" : "140:67-140:71",
            "name" : "value"
          },
          "localId" : "413",
          "locator" : "140:67-140:77",
          "path" : "value"
        },
        "localId" : "414",
        "locator" : "140:1-140:77",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "415",
            "locator" : "141:32-141:69",
            "name" : "{http://hl7.org/fhir}BiologicallyDerivedProductStorageScale"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "BiologicallyDerivedProductStorageScale" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "415"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "416"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "417"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "417"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "417"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "418"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "416",
            "locator" : "141:73-141:77",
            "name" : "value"
          },
          "localId" : "417",
          "locator" : "141:73-141:83",
          "path" : "value"
        },
        "localId" : "418",
        "locator" : "141:1-141:83",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "419",
            "locator" : "142:32-142:41",
            "name" : "{http://hl7.org/fhir}BundleType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "BundleType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "419"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "420"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "421"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "421"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "421"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "422"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "420",
            "locator" : "142:45-142:49",
            "name" : "value"
          },
          "localId" : "421",
          "locator" : "142:45-142:55",
          "path" : "value"
        },
        "localId" : "422",
        "locator" : "142:1-142:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "423",
            "locator" : "143:32-143:54",
            "name" : "{http://hl7.org/fhir}CapabilityStatementKind"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CapabilityStatementKind" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "423"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "424"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "425"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "425"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "425"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "426"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "424",
            "locator" : "143:58-143:62",
            "name" : "value"
          },
          "localId" : "425",
          "locator" : "143:58-143:68",
          "path" : "value"
        },
        "localId" : "426",
        "locator" : "143:1-143:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "427",
            "locator" : "144:32-144:51",
            "name" : "{http://hl7.org/fhir}CarePlanActivityKind"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CarePlanActivityKind" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "427"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "428"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "429"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "429"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "429"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "430"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "428",
            "locator" : "144:55-144:59",
            "name" : "value"
          },
          "localId" : "429",
          "locator" : "144:55-144:65",
          "path" : "value"
        },
        "localId" : "430",
        "locator" : "144:1-144:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "431",
            "locator" : "145:32-145:53",
            "name" : "{http://hl7.org/fhir}CarePlanActivityStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CarePlanActivityStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "431"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "432"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "433"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "433"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "433"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "434"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "432",
            "locator" : "145:57-145:61",
            "name" : "value"
          },
          "localId" : "433",
          "locator" : "145:57-145:67",
          "path" : "value"
        },
        "localId" : "434",
        "locator" : "145:1-145:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "435",
            "locator" : "146:32-146:45",
            "name" : "{http://hl7.org/fhir}CarePlanIntent"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CarePlanIntent" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "435"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "436"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "437"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "437"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "437"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "438"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "436",
            "locator" : "146:49-146:53",
            "name" : "value"
          },
          "localId" : "437",
          "locator" : "146:49-146:59",
          "path" : "value"
        },
        "localId" : "438",
        "locator" : "146:1-146:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "439",
            "locator" : "147:32-147:45",
            "name" : "{http://hl7.org/fhir}CarePlanStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CarePlanStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "439"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "440"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "441"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "441"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "441"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "442"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "440",
            "locator" : "147:49-147:53",
            "name" : "value"
          },
          "localId" : "441",
          "locator" : "147:49-147:59",
          "path" : "value"
        },
        "localId" : "442",
        "locator" : "147:1-147:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "443",
            "locator" : "148:32-148:45",
            "name" : "{http://hl7.org/fhir}CareTeamStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CareTeamStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "443"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "444"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "445"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "445"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "445"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "446"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "444",
            "locator" : "148:49-148:53",
            "name" : "value"
          },
          "localId" : "445",
          "locator" : "148:49-148:59",
          "path" : "value"
        },
        "localId" : "446",
        "locator" : "148:1-148:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "447",
            "locator" : "149:32-149:55",
            "name" : "{http://hl7.org/fhir}CatalogEntryRelationType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CatalogEntryRelationType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "447"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "448"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "449"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "449"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "449"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "450"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "448",
            "locator" : "149:59-149:63",
            "name" : "value"
          },
          "localId" : "449",
          "locator" : "149:59-149:69",
          "path" : "value"
        },
        "localId" : "450",
        "locator" : "149:1-149:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "451",
            "locator" : "150:32-150:69",
            "name" : "{http://hl7.org/fhir}ChargeItemDefinitionPriceComponentType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ChargeItemDefinitionPriceComponentType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "451"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "452"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "453"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "453"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "453"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "454"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "452",
            "locator" : "150:73-150:77",
            "name" : "value"
          },
          "localId" : "453",
          "locator" : "150:73-150:83",
          "path" : "value"
        },
        "localId" : "454",
        "locator" : "150:1-150:83",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "455",
            "locator" : "151:32-151:47",
            "name" : "{http://hl7.org/fhir}ChargeItemStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ChargeItemStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "455"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "456"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "457"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "457"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "457"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "458"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "456",
            "locator" : "151:51-151:55",
            "name" : "value"
          },
          "localId" : "457",
          "locator" : "151:51-151:61",
          "path" : "value"
        },
        "localId" : "458",
        "locator" : "151:1-151:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "459",
            "locator" : "152:32-152:50",
            "name" : "{http://hl7.org/fhir}ClaimResponseStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ClaimResponseStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "459"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "460"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "461"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "461"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "461"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "462"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "460",
            "locator" : "152:54-152:58",
            "name" : "value"
          },
          "localId" : "461",
          "locator" : "152:54-152:64",
          "path" : "value"
        },
        "localId" : "462",
        "locator" : "152:1-152:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "463",
            "locator" : "153:32-153:42",
            "name" : "{http://hl7.org/fhir}ClaimStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ClaimStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "463"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "464"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "465"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "465"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "465"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "466"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "464",
            "locator" : "153:46-153:50",
            "name" : "value"
          },
          "localId" : "465",
          "locator" : "153:46-153:56",
          "path" : "value"
        },
        "localId" : "466",
        "locator" : "153:1-153:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "467",
            "locator" : "154:32-154:55",
            "name" : "{http://hl7.org/fhir}ClinicalImpressionStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ClinicalImpressionStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "467"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "468"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "469"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "469"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "469"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "470"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "468",
            "locator" : "154:59-154:63",
            "name" : "value"
          },
          "localId" : "469",
          "locator" : "154:59-154:69",
          "path" : "value"
        },
        "localId" : "470",
        "locator" : "154:1-154:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "471",
            "locator" : "155:32-155:48",
            "name" : "{http://hl7.org/fhir}CodeSearchSupport"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CodeSearchSupport" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "471"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "472"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "473"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "473"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "473"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "474"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "472",
            "locator" : "155:52-155:56",
            "name" : "value"
          },
          "localId" : "473",
          "locator" : "155:52-155:62",
          "path" : "value"
        },
        "localId" : "474",
        "locator" : "155:1-155:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "475",
            "locator" : "156:32-156:52",
            "name" : "{http://hl7.org/fhir}CodeSystemContentMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CodeSystemContentMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "475"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "476"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "477"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "477"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "477"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "478"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "476",
            "locator" : "156:56-156:60",
            "name" : "value"
          },
          "localId" : "477",
          "locator" : "156:56-156:66",
          "path" : "value"
        },
        "localId" : "478",
        "locator" : "156:1-156:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "479",
            "locator" : "157:32-157:57",
            "name" : "{http://hl7.org/fhir}CodeSystemHierarchyMeaning"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CodeSystemHierarchyMeaning" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "479"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "480"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "481"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "481"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "481"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "482"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "480",
            "locator" : "157:61-157:65",
            "name" : "value"
          },
          "localId" : "481",
          "locator" : "157:61-157:71",
          "path" : "value"
        },
        "localId" : "482",
        "locator" : "157:1-157:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "483",
            "locator" : "158:32-158:52",
            "name" : "{http://hl7.org/fhir}CommunicationPriority"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CommunicationPriority" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "483"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "484"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "485"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "485"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "485"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "486"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "484",
            "locator" : "158:56-158:60",
            "name" : "value"
          },
          "localId" : "485",
          "locator" : "158:56-158:66",
          "path" : "value"
        },
        "localId" : "486",
        "locator" : "158:1-158:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "487",
            "locator" : "159:32-159:57",
            "name" : "{http://hl7.org/fhir}CommunicationRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CommunicationRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "487"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "488"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "489"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "489"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "489"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "490"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "488",
            "locator" : "159:61-159:65",
            "name" : "value"
          },
          "localId" : "489",
          "locator" : "159:61-159:71",
          "path" : "value"
        },
        "localId" : "490",
        "locator" : "159:1-159:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "491",
            "locator" : "160:32-160:50",
            "name" : "{http://hl7.org/fhir}CommunicationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CommunicationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "491"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "492"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "493"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "493"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "493"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "494"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "492",
            "locator" : "160:54-160:58",
            "name" : "value"
          },
          "localId" : "493",
          "locator" : "160:54-160:64",
          "path" : "value"
        },
        "localId" : "494",
        "locator" : "160:1-160:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "495",
            "locator" : "161:32-161:46",
            "name" : "{http://hl7.org/fhir}CompartmentCode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CompartmentCode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "495"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "496"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "497"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "497"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "497"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "498"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "496",
            "locator" : "161:50-161:54",
            "name" : "value"
          },
          "localId" : "497",
          "locator" : "161:50-161:60",
          "path" : "value"
        },
        "localId" : "498",
        "locator" : "161:1-161:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "499",
            "locator" : "162:32-162:46",
            "name" : "{http://hl7.org/fhir}CompartmentType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CompartmentType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "499"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "500"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "501"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "501"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "501"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "502"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "500",
            "locator" : "162:50-162:54",
            "name" : "value"
          },
          "localId" : "501",
          "locator" : "162:50-162:60",
          "path" : "value"
        },
        "localId" : "502",
        "locator" : "162:1-162:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "503",
            "locator" : "163:32-163:57",
            "name" : "{http://hl7.org/fhir}CompositionAttestationMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CompositionAttestationMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "503"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "504"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "505"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "505"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "505"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "506"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "504",
            "locator" : "163:61-163:65",
            "name" : "value"
          },
          "localId" : "505",
          "locator" : "163:61-163:71",
          "path" : "value"
        },
        "localId" : "506",
        "locator" : "163:1-163:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "507",
            "locator" : "164:32-164:48",
            "name" : "{http://hl7.org/fhir}CompositionStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CompositionStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "507"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "508"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "509"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "509"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "509"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "510"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "508",
            "locator" : "164:52-164:56",
            "name" : "value"
          },
          "localId" : "509",
          "locator" : "164:52-164:62",
          "path" : "value"
        },
        "localId" : "510",
        "locator" : "164:1-164:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "511",
            "locator" : "165:32-165:52",
            "name" : "{http://hl7.org/fhir}ConceptMapEquivalence"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConceptMapEquivalence" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "511"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "512"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "513"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "513"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "513"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "514"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "512",
            "locator" : "165:56-165:60",
            "name" : "value"
          },
          "localId" : "513",
          "locator" : "165:56-165:66",
          "path" : "value"
        },
        "localId" : "514",
        "locator" : "165:1-165:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "515",
            "locator" : "166:32-166:58",
            "name" : "{http://hl7.org/fhir}ConceptMapGroupUnmappedMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConceptMapGroupUnmappedMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "515"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "516"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "517"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "517"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "517"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "518"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "516",
            "locator" : "166:62-166:66",
            "name" : "value"
          },
          "localId" : "517",
          "locator" : "166:62-166:72",
          "path" : "value"
        },
        "localId" : "518",
        "locator" : "166:1-166:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "519",
            "locator" : "167:32-167:54",
            "name" : "{http://hl7.org/fhir}ConditionalDeleteStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConditionalDeleteStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "519"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "520"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "521"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "521"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "521"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "522"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "520",
            "locator" : "167:58-167:62",
            "name" : "value"
          },
          "localId" : "521",
          "locator" : "167:58-167:68",
          "path" : "value"
        },
        "localId" : "522",
        "locator" : "167:1-167:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "523",
            "locator" : "168:32-168:52",
            "name" : "{http://hl7.org/fhir}ConditionalReadStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConditionalReadStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "523"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "524"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "525"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "525"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "525"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "526"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "524",
            "locator" : "168:56-168:60",
            "name" : "value"
          },
          "localId" : "525",
          "locator" : "168:56-168:66",
          "path" : "value"
        },
        "localId" : "526",
        "locator" : "168:1-168:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "527",
            "locator" : "169:32-169:49",
            "name" : "{http://hl7.org/fhir}ConsentDataMeaning"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConsentDataMeaning" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "527"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "528"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "529"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "529"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "529"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "530"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "528",
            "locator" : "169:53-169:57",
            "name" : "value"
          },
          "localId" : "529",
          "locator" : "169:53-169:63",
          "path" : "value"
        },
        "localId" : "530",
        "locator" : "169:1-169:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "531",
            "locator" : "170:32-170:51",
            "name" : "{http://hl7.org/fhir}ConsentProvisionType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConsentProvisionType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "531"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "532"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "533"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "533"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "533"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "534"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "532",
            "locator" : "170:55-170:59",
            "name" : "value"
          },
          "localId" : "533",
          "locator" : "170:55-170:65",
          "path" : "value"
        },
        "localId" : "534",
        "locator" : "170:1-170:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "535",
            "locator" : "171:32-171:43",
            "name" : "{http://hl7.org/fhir}ConsentState"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConsentState" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "535"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "536"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "537"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "537"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "537"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "538"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "536",
            "locator" : "171:47-171:51",
            "name" : "value"
          },
          "localId" : "537",
          "locator" : "171:47-171:57",
          "path" : "value"
        },
        "localId" : "538",
        "locator" : "171:1-171:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "539",
            "locator" : "172:32-172:49",
            "name" : "{http://hl7.org/fhir}ConstraintSeverity"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ConstraintSeverity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "539"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "540"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "541"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "541"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "541"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "542"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "540",
            "locator" : "172:53-172:57",
            "name" : "value"
          },
          "localId" : "541",
          "locator" : "172:53-172:63",
          "path" : "value"
        },
        "localId" : "542",
        "locator" : "172:1-172:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "543",
            "locator" : "173:32-173:49",
            "name" : "{http://hl7.org/fhir}ContactPointSystem"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ContactPointSystem" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "543"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "544"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "545"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "545"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "545"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "546"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "544",
            "locator" : "173:53-173:57",
            "name" : "value"
          },
          "localId" : "545",
          "locator" : "173:53-173:63",
          "path" : "value"
        },
        "localId" : "546",
        "locator" : "173:1-173:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "547",
            "locator" : "174:32-174:46",
            "name" : "{http://hl7.org/fhir}ContactPointUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ContactPointUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "547"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "548"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "549"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "549"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "549"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "550"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "548",
            "locator" : "174:50-174:54",
            "name" : "value"
          },
          "localId" : "549",
          "locator" : "174:50-174:60",
          "path" : "value"
        },
        "localId" : "550",
        "locator" : "174:1-174:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "551",
            "locator" : "175:32-175:56",
            "name" : "{http://hl7.org/fhir}ContractPublicationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ContractPublicationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "551"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "552"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "553"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "553"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "553"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "554"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "552",
            "locator" : "175:60-175:64",
            "name" : "value"
          },
          "localId" : "553",
          "locator" : "175:60-175:70",
          "path" : "value"
        },
        "localId" : "554",
        "locator" : "175:1-175:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "555",
            "locator" : "176:32-176:45",
            "name" : "{http://hl7.org/fhir}ContractStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ContractStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "555"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "556"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "557"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "557"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "557"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "558"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "556",
            "locator" : "176:49-176:53",
            "name" : "value"
          },
          "localId" : "557",
          "locator" : "176:49-176:59",
          "path" : "value"
        },
        "localId" : "558",
        "locator" : "176:1-176:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "559",
            "locator" : "177:32-177:46",
            "name" : "{http://hl7.org/fhir}ContributorType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ContributorType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "559"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "560"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "561"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "561"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "561"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "562"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "560",
            "locator" : "177:50-177:54",
            "name" : "value"
          },
          "localId" : "561",
          "locator" : "177:50-177:60",
          "path" : "value"
        },
        "localId" : "562",
        "locator" : "177:1-177:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "563",
            "locator" : "178:32-178:45",
            "name" : "{http://hl7.org/fhir}CoverageStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CoverageStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "563"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "564"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "565"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "565"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "565"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "566"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "564",
            "locator" : "178:49-178:53",
            "name" : "value"
          },
          "localId" : "565",
          "locator" : "178:49-178:59",
          "path" : "value"
        },
        "localId" : "566",
        "locator" : "178:1-178:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "567",
            "locator" : "179:32-179:43",
            "name" : "{http://hl7.org/fhir}CurrencyCode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "CurrencyCode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "567"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "568"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "569"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "569"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "569"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "570"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "568",
            "locator" : "179:47-179:51",
            "name" : "value"
          },
          "localId" : "569",
          "locator" : "179:47-179:57",
          "path" : "value"
        },
        "localId" : "570",
        "locator" : "179:1-179:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "571",
            "locator" : "180:32-180:40",
            "name" : "{http://hl7.org/fhir}DayOfWeek"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DayOfWeek" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "571"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "572"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "573"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "573"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "573"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "574"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "572",
            "locator" : "180:44-180:48",
            "name" : "value"
          },
          "localId" : "573",
          "locator" : "180:44-180:54",
          "path" : "value"
        },
        "localId" : "574",
        "locator" : "180:1-180:54",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "575",
            "locator" : "181:32-181:41",
            "name" : "{http://hl7.org/fhir}DaysOfWeek"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DaysOfWeek" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "575"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "576"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "577"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "577"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "577"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "578"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "576",
            "locator" : "181:45-181:49",
            "name" : "value"
          },
          "localId" : "577",
          "locator" : "181:45-181:55",
          "path" : "value"
        },
        "localId" : "578",
        "locator" : "181:1-181:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "579",
            "locator" : "182:32-182:52",
            "name" : "{http://hl7.org/fhir}DetectedIssueSeverity"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DetectedIssueSeverity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "579"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "580"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "581"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "581"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "581"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "582"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "580",
            "locator" : "182:56-182:60",
            "name" : "value"
          },
          "localId" : "581",
          "locator" : "182:56-182:66",
          "path" : "value"
        },
        "localId" : "582",
        "locator" : "182:1-182:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "583",
            "locator" : "183:32-183:50",
            "name" : "{http://hl7.org/fhir}DetectedIssueStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DetectedIssueStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "583"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "584"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "585"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "585"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "585"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "586"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "584",
            "locator" : "183:54-183:58",
            "name" : "value"
          },
          "localId" : "585",
          "locator" : "183:54-183:64",
          "path" : "value"
        },
        "localId" : "586",
        "locator" : "183:1-183:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "587",
            "locator" : "184:32-184:59",
            "name" : "{http://hl7.org/fhir}DeviceMetricCalibrationState"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceMetricCalibrationState" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "587"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "588"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "589"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "589"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "589"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "590"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "588",
            "locator" : "184:63-184:67",
            "name" : "value"
          },
          "localId" : "589",
          "locator" : "184:63-184:73",
          "path" : "value"
        },
        "localId" : "590",
        "locator" : "184:1-184:73",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "591",
            "locator" : "185:32-185:58",
            "name" : "{http://hl7.org/fhir}DeviceMetricCalibrationType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceMetricCalibrationType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "591"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "592"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "593"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "593"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "593"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "594"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "592",
            "locator" : "185:62-185:66",
            "name" : "value"
          },
          "localId" : "593",
          "locator" : "185:62-185:72",
          "path" : "value"
        },
        "localId" : "594",
        "locator" : "185:1-185:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "595",
            "locator" : "186:32-186:51",
            "name" : "{http://hl7.org/fhir}DeviceMetricCategory"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceMetricCategory" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "595"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "596"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "597"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "597"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "597"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "598"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "596",
            "locator" : "186:55-186:59",
            "name" : "value"
          },
          "localId" : "597",
          "locator" : "186:55-186:65",
          "path" : "value"
        },
        "localId" : "598",
        "locator" : "186:1-186:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "599",
            "locator" : "187:32-187:48",
            "name" : "{http://hl7.org/fhir}DeviceMetricColor"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceMetricColor" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "599"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "600"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "601"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "601"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "601"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "602"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "600",
            "locator" : "187:52-187:56",
            "name" : "value"
          },
          "localId" : "601",
          "locator" : "187:52-187:62",
          "path" : "value"
        },
        "localId" : "602",
        "locator" : "187:1-187:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "603",
            "locator" : "188:32-188:60",
            "name" : "{http://hl7.org/fhir}DeviceMetricOperationalStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceMetricOperationalStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "603"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "604"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "605"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "605"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "605"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "606"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "604",
            "locator" : "188:64-188:68",
            "name" : "value"
          },
          "localId" : "605",
          "locator" : "188:64-188:74",
          "path" : "value"
        },
        "localId" : "606",
        "locator" : "188:1-188:74",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "607",
            "locator" : "189:32-189:45",
            "name" : "{http://hl7.org/fhir}DeviceNameType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceNameType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "607"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "608"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "609"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "609"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "609"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "610"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "608",
            "locator" : "189:49-189:53",
            "name" : "value"
          },
          "localId" : "609",
          "locator" : "189:49-189:59",
          "path" : "value"
        },
        "localId" : "610",
        "locator" : "189:1-189:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "611",
            "locator" : "190:32-190:50",
            "name" : "{http://hl7.org/fhir}DeviceRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "611"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "612"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "613"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "613"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "613"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "614"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "612",
            "locator" : "190:54-190:58",
            "name" : "value"
          },
          "localId" : "613",
          "locator" : "190:54-190:64",
          "path" : "value"
        },
        "localId" : "614",
        "locator" : "190:1-190:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "615",
            "locator" : "191:32-191:55",
            "name" : "{http://hl7.org/fhir}DeviceUseStatementStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DeviceUseStatementStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "615"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "616"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "617"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "617"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "617"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "618"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "616",
            "locator" : "191:59-191:63",
            "name" : "value"
          },
          "localId" : "617",
          "locator" : "191:59-191:69",
          "path" : "value"
        },
        "localId" : "618",
        "locator" : "191:1-191:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "619",
            "locator" : "192:32-192:53",
            "name" : "{http://hl7.org/fhir}DiagnosticReportStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DiagnosticReportStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "619"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "620"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "621"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "621"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "621"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "622"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "620",
            "locator" : "192:57-192:61",
            "name" : "value"
          },
          "localId" : "621",
          "locator" : "192:57-192:67",
          "path" : "value"
        },
        "localId" : "622",
        "locator" : "192:1-192:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "623",
            "locator" : "193:32-193:48",
            "name" : "{http://hl7.org/fhir}DiscriminatorType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DiscriminatorType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "623"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "624"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "625"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "625"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "625"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "626"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "624",
            "locator" : "193:52-193:56",
            "name" : "value"
          },
          "localId" : "625",
          "locator" : "193:52-193:62",
          "path" : "value"
        },
        "localId" : "626",
        "locator" : "193:1-193:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "627",
            "locator" : "194:32-194:54",
            "name" : "{http://hl7.org/fhir}DocumentConfidentiality"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DocumentConfidentiality" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "627"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "628"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "629"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "629"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "629"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "630"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "628",
            "locator" : "194:58-194:62",
            "name" : "value"
          },
          "localId" : "629",
          "locator" : "194:58-194:68",
          "path" : "value"
        },
        "localId" : "630",
        "locator" : "194:1-194:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "631",
            "locator" : "195:32-195:43",
            "name" : "{http://hl7.org/fhir}DocumentMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DocumentMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "631"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "632"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "633"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "633"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "633"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "634"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "632",
            "locator" : "195:47-195:51",
            "name" : "value"
          },
          "localId" : "633",
          "locator" : "195:47-195:57",
          "path" : "value"
        },
        "localId" : "634",
        "locator" : "195:1-195:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "635",
            "locator" : "196:32-196:54",
            "name" : "{http://hl7.org/fhir}DocumentReferenceStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DocumentReferenceStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "635"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "636"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "637"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "637"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "637"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "638"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "636",
            "locator" : "196:58-196:62",
            "name" : "value"
          },
          "localId" : "637",
          "locator" : "196:58-196:68",
          "path" : "value"
        },
        "localId" : "638",
        "locator" : "196:1-196:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "639",
            "locator" : "197:32-197:55",
            "name" : "{http://hl7.org/fhir}DocumentRelationshipType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "DocumentRelationshipType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "639"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "640"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "641"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "641"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "641"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "642"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "640",
            "locator" : "197:59-197:63",
            "name" : "value"
          },
          "localId" : "641",
          "locator" : "197:59-197:69",
          "path" : "value"
        },
        "localId" : "642",
        "locator" : "197:1-197:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "643",
            "locator" : "198:32-198:56",
            "name" : "{http://hl7.org/fhir}EligibilityRequestPurpose"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EligibilityRequestPurpose" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "643"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "644"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "645"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "645"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "645"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "646"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "644",
            "locator" : "198:60-198:64",
            "name" : "value"
          },
          "localId" : "645",
          "locator" : "198:60-198:70",
          "path" : "value"
        },
        "localId" : "646",
        "locator" : "198:1-198:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "647",
            "locator" : "199:32-199:55",
            "name" : "{http://hl7.org/fhir}EligibilityRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EligibilityRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "647"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "648"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "649"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "649"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "649"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "650"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "648",
            "locator" : "199:59-199:63",
            "name" : "value"
          },
          "localId" : "649",
          "locator" : "199:59-199:69",
          "path" : "value"
        },
        "localId" : "650",
        "locator" : "199:1-199:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "651",
            "locator" : "200:32-200:57",
            "name" : "{http://hl7.org/fhir}EligibilityResponsePurpose"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EligibilityResponsePurpose" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "651"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "652"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "653"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "653"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "653"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "654"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "652",
            "locator" : "200:61-200:65",
            "name" : "value"
          },
          "localId" : "653",
          "locator" : "200:61-200:71",
          "path" : "value"
        },
        "localId" : "654",
        "locator" : "200:1-200:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "655",
            "locator" : "201:32-201:56",
            "name" : "{http://hl7.org/fhir}EligibilityResponseStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EligibilityResponseStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "655"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "656"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "657"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "657"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "657"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "658"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "656",
            "locator" : "201:60-201:64",
            "name" : "value"
          },
          "localId" : "657",
          "locator" : "201:60-201:70",
          "path" : "value"
        },
        "localId" : "658",
        "locator" : "201:1-201:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "659",
            "locator" : "202:32-202:49",
            "name" : "{http://hl7.org/fhir}EnableWhenBehavior"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EnableWhenBehavior" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "659"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "660"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "661"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "661"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "661"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "662"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "660",
            "locator" : "202:53-202:57",
            "name" : "value"
          },
          "localId" : "661",
          "locator" : "202:53-202:63",
          "path" : "value"
        },
        "localId" : "662",
        "locator" : "202:1-202:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "663",
            "locator" : "203:32-203:54",
            "name" : "{http://hl7.org/fhir}EncounterLocationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EncounterLocationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "663"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "664"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "665"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "665"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "665"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "666"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "664",
            "locator" : "203:58-203:62",
            "name" : "value"
          },
          "localId" : "665",
          "locator" : "203:58-203:68",
          "path" : "value"
        },
        "localId" : "666",
        "locator" : "203:1-203:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "667",
            "locator" : "204:32-204:46",
            "name" : "{http://hl7.org/fhir}EncounterStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EncounterStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "667"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "668"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "669"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "669"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "669"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "670"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "668",
            "locator" : "204:50-204:54",
            "name" : "value"
          },
          "localId" : "669",
          "locator" : "204:50-204:60",
          "path" : "value"
        },
        "localId" : "670",
        "locator" : "204:1-204:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "671",
            "locator" : "205:32-205:45",
            "name" : "{http://hl7.org/fhir}EndpointStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EndpointStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "671"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "672"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "673"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "673"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "673"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "674"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "672",
            "locator" : "205:49-205:53",
            "name" : "value"
          },
          "localId" : "673",
          "locator" : "205:49-205:59",
          "path" : "value"
        },
        "localId" : "674",
        "locator" : "205:1-205:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "675",
            "locator" : "206:32-206:54",
            "name" : "{http://hl7.org/fhir}EnrollmentRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EnrollmentRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "675"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "676"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "677"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "677"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "677"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "678"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "676",
            "locator" : "206:58-206:62",
            "name" : "value"
          },
          "localId" : "677",
          "locator" : "206:58-206:68",
          "path" : "value"
        },
        "localId" : "678",
        "locator" : "206:1-206:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "679",
            "locator" : "207:32-207:55",
            "name" : "{http://hl7.org/fhir}EnrollmentResponseStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EnrollmentResponseStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "679"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "680"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "681"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "681"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "681"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "682"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "680",
            "locator" : "207:59-207:63",
            "name" : "value"
          },
          "localId" : "681",
          "locator" : "207:59-207:69",
          "path" : "value"
        },
        "localId" : "682",
        "locator" : "207:1-207:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "683",
            "locator" : "208:32-208:50",
            "name" : "{http://hl7.org/fhir}EpisodeOfCareStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EpisodeOfCareStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "683"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "684"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "685"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "685"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "685"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "686"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "684",
            "locator" : "208:54-208:58",
            "name" : "value"
          },
          "localId" : "685",
          "locator" : "208:54-208:64",
          "path" : "value"
        },
        "localId" : "686",
        "locator" : "208:1-208:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "687",
            "locator" : "209:32-209:50",
            "name" : "{http://hl7.org/fhir}EventCapabilityMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EventCapabilityMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "687"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "688"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "689"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "689"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "689"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "690"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "688",
            "locator" : "209:54-209:58",
            "name" : "value"
          },
          "localId" : "689",
          "locator" : "209:54-209:64",
          "path" : "value"
        },
        "localId" : "690",
        "locator" : "209:1-209:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "691",
            "locator" : "210:32-210:42",
            "name" : "{http://hl7.org/fhir}EventTiming"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EventTiming" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "691"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "692"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "693"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "693"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "693"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "694"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "692",
            "locator" : "210:46-210:50",
            "name" : "value"
          },
          "localId" : "693",
          "locator" : "210:46-210:56",
          "path" : "value"
        },
        "localId" : "694",
        "locator" : "210:1-210:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "695",
            "locator" : "211:32-211:51",
            "name" : "{http://hl7.org/fhir}EvidenceVariableType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "EvidenceVariableType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "695"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "696"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "697"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "697"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "697"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "698"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "696",
            "locator" : "211:55-211:59",
            "name" : "value"
          },
          "localId" : "697",
          "locator" : "211:55-211:65",
          "path" : "value"
        },
        "localId" : "698",
        "locator" : "211:1-211:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "699",
            "locator" : "212:32-212:55",
            "name" : "{http://hl7.org/fhir}ExampleScenarioActorType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ExampleScenarioActorType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "699"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "700"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "701"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "701"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "701"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "702"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "700",
            "locator" : "212:59-212:63",
            "name" : "value"
          },
          "localId" : "701",
          "locator" : "212:59-212:69",
          "path" : "value"
        },
        "localId" : "702",
        "locator" : "212:1-212:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "703",
            "locator" : "213:32-213:57",
            "name" : "{http://hl7.org/fhir}ExplanationOfBenefitStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ExplanationOfBenefitStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "703"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "704"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "705"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "705"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "705"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "706"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "704",
            "locator" : "213:61-213:65",
            "name" : "value"
          },
          "localId" : "705",
          "locator" : "213:61-213:71",
          "path" : "value"
        },
        "localId" : "706",
        "locator" : "213:1-213:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "707",
            "locator" : "214:32-214:44",
            "name" : "{http://hl7.org/fhir}ExposureState"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ExposureState" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "707"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "708"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "709"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "709"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "709"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "710"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "708",
            "locator" : "214:48-214:52",
            "name" : "value"
          },
          "localId" : "709",
          "locator" : "214:48-214:58",
          "path" : "value"
        },
        "localId" : "710",
        "locator" : "214:1-214:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "711",
            "locator" : "215:32-215:51",
            "name" : "{http://hl7.org/fhir}ExtensionContextType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ExtensionContextType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "711"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "712"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "713"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "713"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "713"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "714"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "712",
            "locator" : "215:55-215:59",
            "name" : "value"
          },
          "localId" : "713",
          "locator" : "215:55-215:65",
          "path" : "value"
        },
        "localId" : "714",
        "locator" : "215:1-215:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "715",
            "locator" : "216:32-216:43",
            "name" : "{http://hl7.org/fhir}FHIRAllTypes"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIRAllTypes" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "715"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "716"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "717"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "717"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "717"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "718"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "716",
            "locator" : "216:47-216:51",
            "name" : "value"
          },
          "localId" : "717",
          "locator" : "216:47-216:57",
          "path" : "value"
        },
        "localId" : "718",
        "locator" : "216:1-216:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "719",
            "locator" : "217:32-217:46",
            "name" : "{http://hl7.org/fhir}FHIRDefinedType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIRDefinedType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "719"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "720"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "721"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "721"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "721"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "722"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "720",
            "locator" : "217:50-217:54",
            "name" : "value"
          },
          "localId" : "721",
          "locator" : "217:50-217:60",
          "path" : "value"
        },
        "localId" : "722",
        "locator" : "217:1-217:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "723",
            "locator" : "218:32-218:47",
            "name" : "{http://hl7.org/fhir}FHIRDeviceStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIRDeviceStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "723"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "724"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "725"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "725"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "725"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "726"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "724",
            "locator" : "218:51-218:55",
            "name" : "value"
          },
          "localId" : "725",
          "locator" : "218:51-218:61",
          "path" : "value"
        },
        "localId" : "726",
        "locator" : "218:1-218:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "727",
            "locator" : "219:32-219:47",
            "name" : "{http://hl7.org/fhir}FHIRResourceType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIRResourceType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "727"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "728"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "729"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "729"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "729"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "730"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "728",
            "locator" : "219:51-219:55",
            "name" : "value"
          },
          "localId" : "729",
          "locator" : "219:51-219:61",
          "path" : "value"
        },
        "localId" : "730",
        "locator" : "219:1-219:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "731",
            "locator" : "220:32-220:50",
            "name" : "{http://hl7.org/fhir}FHIRSubstanceStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIRSubstanceStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "731"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "732"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "733"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "733"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "733"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "734"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "732",
            "locator" : "220:54-220:58",
            "name" : "value"
          },
          "localId" : "733",
          "locator" : "220:54-220:64",
          "path" : "value"
        },
        "localId" : "734",
        "locator" : "220:1-220:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "735",
            "locator" : "221:32-221:42",
            "name" : "{http://hl7.org/fhir}FHIRVersion"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FHIRVersion" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "735"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "736"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "737"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "737"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "737"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "738"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "736",
            "locator" : "221:46-221:50",
            "name" : "value"
          },
          "localId" : "737",
          "locator" : "221:46-221:56",
          "path" : "value"
        },
        "localId" : "738",
        "locator" : "221:1-221:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "739",
            "locator" : "222:32-222:50",
            "name" : "{http://hl7.org/fhir}FamilyHistoryStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FamilyHistoryStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "739"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "740"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "741"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "741"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "741"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "742"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "740",
            "locator" : "222:54-222:58",
            "name" : "value"
          },
          "localId" : "741",
          "locator" : "222:54-222:64",
          "path" : "value"
        },
        "localId" : "742",
        "locator" : "222:1-222:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "743",
            "locator" : "223:32-223:45",
            "name" : "{http://hl7.org/fhir}FilterOperator"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FilterOperator" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "743"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "744"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "745"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "745"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "745"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "746"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "744",
            "locator" : "223:49-223:53",
            "name" : "value"
          },
          "localId" : "745",
          "locator" : "223:49-223:59",
          "path" : "value"
        },
        "localId" : "746",
        "locator" : "223:1-223:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "747",
            "locator" : "224:32-224:41",
            "name" : "{http://hl7.org/fhir}FlagStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "FlagStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "747"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "748"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "749"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "749"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "749"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "750"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "748",
            "locator" : "224:45-224:49",
            "name" : "value"
          },
          "localId" : "749",
          "locator" : "224:45-224:55",
          "path" : "value"
        },
        "localId" : "750",
        "locator" : "224:1-224:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "751",
            "locator" : "225:32-225:50",
            "name" : "{http://hl7.org/fhir}GoalLifecycleStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GoalLifecycleStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "751"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "752"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "753"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "753"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "753"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "754"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "752",
            "locator" : "225:54-225:58",
            "name" : "value"
          },
          "localId" : "753",
          "locator" : "225:54-225:64",
          "path" : "value"
        },
        "localId" : "754",
        "locator" : "225:1-225:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "755",
            "locator" : "226:32-226:51",
            "name" : "{http://hl7.org/fhir}GraphCompartmentRule"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GraphCompartmentRule" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "755"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "756"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "757"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "757"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "757"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "758"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "756",
            "locator" : "226:55-226:59",
            "name" : "value"
          },
          "localId" : "757",
          "locator" : "226:55-226:65",
          "path" : "value"
        },
        "localId" : "758",
        "locator" : "226:1-226:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "759",
            "locator" : "227:32-227:50",
            "name" : "{http://hl7.org/fhir}GraphCompartmentUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GraphCompartmentUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "759"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "760"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "761"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "761"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "761"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "762"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "760",
            "locator" : "227:54-227:58",
            "name" : "value"
          },
          "localId" : "761",
          "locator" : "227:54-227:64",
          "path" : "value"
        },
        "localId" : "762",
        "locator" : "227:1-227:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "763",
            "locator" : "228:32-228:43",
            "name" : "{http://hl7.org/fhir}GroupMeasure"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GroupMeasure" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "763"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "764"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "765"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "765"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "765"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "766"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "764",
            "locator" : "228:47-228:51",
            "name" : "value"
          },
          "localId" : "765",
          "locator" : "228:47-228:57",
          "path" : "value"
        },
        "localId" : "766",
        "locator" : "228:1-228:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "767",
            "locator" : "229:32-229:40",
            "name" : "{http://hl7.org/fhir}GroupType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GroupType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "767"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "768"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "769"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "769"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "769"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "770"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "768",
            "locator" : "229:44-229:48",
            "name" : "value"
          },
          "localId" : "769",
          "locator" : "229:44-229:54",
          "path" : "value"
        },
        "localId" : "770",
        "locator" : "229:1-229:54",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "771",
            "locator" : "230:32-230:53",
            "name" : "{http://hl7.org/fhir}GuidanceResponseStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GuidanceResponseStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "771"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "772"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "773"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "773"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "773"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "774"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "772",
            "locator" : "230:57-230:61",
            "name" : "value"
          },
          "localId" : "773",
          "locator" : "230:57-230:67",
          "path" : "value"
        },
        "localId" : "774",
        "locator" : "230:1-230:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "775",
            "locator" : "231:32-231:50",
            "name" : "{http://hl7.org/fhir}GuidePageGeneration"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GuidePageGeneration" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "775"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "776"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "777"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "777"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "777"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "778"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "776",
            "locator" : "231:54-231:58",
            "name" : "value"
          },
          "localId" : "777",
          "locator" : "231:54-231:64",
          "path" : "value"
        },
        "localId" : "778",
        "locator" : "231:1-231:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "779",
            "locator" : "232:32-232:49",
            "name" : "{http://hl7.org/fhir}GuideParameterCode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "GuideParameterCode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "779"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "780"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "781"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "781"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "781"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "782"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "780",
            "locator" : "232:53-232:57",
            "name" : "value"
          },
          "localId" : "781",
          "locator" : "232:53-232:63",
          "path" : "value"
        },
        "localId" : "782",
        "locator" : "232:1-232:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "783",
            "locator" : "233:32-233:39",
            "name" : "{http://hl7.org/fhir}HTTPVerb"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "HTTPVerb" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "783"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "784"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "785"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "785"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "785"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "786"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "784",
            "locator" : "233:43-233:47",
            "name" : "value"
          },
          "localId" : "785",
          "locator" : "233:43-233:53",
          "path" : "value"
        },
        "localId" : "786",
        "locator" : "233:1-233:53",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "787",
            "locator" : "234:32-234:44",
            "name" : "{http://hl7.org/fhir}IdentifierUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "IdentifierUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "787"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "788"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "789"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "789"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "789"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "790"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "788",
            "locator" : "234:48-234:52",
            "name" : "value"
          },
          "localId" : "789",
          "locator" : "234:48-234:58",
          "path" : "value"
        },
        "localId" : "790",
        "locator" : "234:1-234:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "791",
            "locator" : "235:32-235:53",
            "name" : "{http://hl7.org/fhir}IdentityAssuranceLevel"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "IdentityAssuranceLevel" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "791"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "792"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "793"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "793"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "793"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "794"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "792",
            "locator" : "235:57-235:61",
            "name" : "value"
          },
          "localId" : "793",
          "locator" : "235:57-235:67",
          "path" : "value"
        },
        "localId" : "794",
        "locator" : "235:1-235:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "795",
            "locator" : "236:32-236:49",
            "name" : "{http://hl7.org/fhir}ImagingStudyStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ImagingStudyStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "795"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "796"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "797"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "797"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "797"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "798"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "796",
            "locator" : "236:53-236:57",
            "name" : "value"
          },
          "localId" : "797",
          "locator" : "236:53-236:63",
          "path" : "value"
        },
        "localId" : "798",
        "locator" : "236:1-236:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "799",
            "locator" : "237:32-237:59",
            "name" : "{http://hl7.org/fhir}ImmunizationEvaluationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ImmunizationEvaluationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "799"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "800"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "801"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "801"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "801"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "802"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "800",
            "locator" : "237:63-237:67",
            "name" : "value"
          },
          "localId" : "801",
          "locator" : "237:63-237:73",
          "path" : "value"
        },
        "localId" : "802",
        "locator" : "237:1-237:73",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "803",
            "locator" : "238:32-238:49",
            "name" : "{http://hl7.org/fhir}ImmunizationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ImmunizationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "803"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "804"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "805"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "805"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "805"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "806"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "804",
            "locator" : "238:53-238:57",
            "name" : "value"
          },
          "localId" : "805",
          "locator" : "238:53-238:63",
          "path" : "value"
        },
        "localId" : "806",
        "locator" : "238:1-238:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "807",
            "locator" : "239:32-239:56",
            "name" : "{http://hl7.org/fhir}InvoicePriceComponentType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "InvoicePriceComponentType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "807"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "808"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "809"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "809"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "809"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "810"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "808",
            "locator" : "239:60-239:64",
            "name" : "value"
          },
          "localId" : "809",
          "locator" : "239:60-239:70",
          "path" : "value"
        },
        "localId" : "810",
        "locator" : "239:1-239:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "811",
            "locator" : "240:32-240:44",
            "name" : "{http://hl7.org/fhir}InvoiceStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "InvoiceStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "811"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "812"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "813"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "813"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "813"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "814"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "812",
            "locator" : "240:48-240:52",
            "name" : "value"
          },
          "localId" : "813",
          "locator" : "240:48-240:58",
          "path" : "value"
        },
        "localId" : "814",
        "locator" : "240:1-240:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "815",
            "locator" : "241:32-241:44",
            "name" : "{http://hl7.org/fhir}IssueSeverity"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "IssueSeverity" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "815"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "816"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "817"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "817"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "817"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "818"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "816",
            "locator" : "241:48-241:52",
            "name" : "value"
          },
          "localId" : "817",
          "locator" : "241:48-241:58",
          "path" : "value"
        },
        "localId" : "818",
        "locator" : "241:1-241:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "819",
            "locator" : "242:32-242:40",
            "name" : "{http://hl7.org/fhir}IssueType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "IssueType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "819"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "820"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "821"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "821"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "821"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "822"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "820",
            "locator" : "242:44-242:48",
            "name" : "value"
          },
          "localId" : "821",
          "locator" : "242:44-242:54",
          "path" : "value"
        },
        "localId" : "822",
        "locator" : "242:1-242:54",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "823",
            "locator" : "243:32-243:39",
            "name" : "{http://hl7.org/fhir}LinkType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "LinkType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "823"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "824"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "825"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "825"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "825"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "826"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "824",
            "locator" : "243:43-243:47",
            "name" : "value"
          },
          "localId" : "825",
          "locator" : "243:43-243:53",
          "path" : "value"
        },
        "localId" : "826",
        "locator" : "243:1-243:53",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "827",
            "locator" : "244:32-244:42",
            "name" : "{http://hl7.org/fhir}LinkageType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "LinkageType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "827"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "828"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "829"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "829"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "829"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "830"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "828",
            "locator" : "244:46-244:50",
            "name" : "value"
          },
          "localId" : "829",
          "locator" : "244:46-244:56",
          "path" : "value"
        },
        "localId" : "830",
        "locator" : "244:1-244:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "831",
            "locator" : "245:32-245:39",
            "name" : "{http://hl7.org/fhir}ListMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ListMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "831"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "832"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "833"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "833"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "833"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "834"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "832",
            "locator" : "245:43-245:47",
            "name" : "value"
          },
          "localId" : "833",
          "locator" : "245:43-245:53",
          "path" : "value"
        },
        "localId" : "834",
        "locator" : "245:1-245:53",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "835",
            "locator" : "246:32-246:41",
            "name" : "{http://hl7.org/fhir}ListStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ListStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "835"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "836"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "837"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "837"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "837"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "838"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "836",
            "locator" : "246:45-246:49",
            "name" : "value"
          },
          "localId" : "837",
          "locator" : "246:45-246:55",
          "path" : "value"
        },
        "localId" : "838",
        "locator" : "246:1-246:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "839",
            "locator" : "247:32-247:43",
            "name" : "{http://hl7.org/fhir}LocationMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "LocationMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "839"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "840"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "841"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "841"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "841"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "842"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "840",
            "locator" : "247:47-247:51",
            "name" : "value"
          },
          "localId" : "841",
          "locator" : "247:47-247:57",
          "path" : "value"
        },
        "localId" : "842",
        "locator" : "247:1-247:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "843",
            "locator" : "248:32-248:45",
            "name" : "{http://hl7.org/fhir}LocationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "LocationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "843"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "844"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "845"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "845"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "845"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "846"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "844",
            "locator" : "248:49-248:53",
            "name" : "value"
          },
          "localId" : "845",
          "locator" : "248:49-248:59",
          "path" : "value"
        },
        "localId" : "846",
        "locator" : "248:1-248:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "847",
            "locator" : "249:32-249:50",
            "name" : "{http://hl7.org/fhir}MeasureReportStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MeasureReportStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "847"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "848"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "849"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "849"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "849"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "850"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "848",
            "locator" : "249:54-249:58",
            "name" : "value"
          },
          "localId" : "849",
          "locator" : "249:54-249:64",
          "path" : "value"
        },
        "localId" : "850",
        "locator" : "249:1-249:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "851",
            "locator" : "250:32-250:48",
            "name" : "{http://hl7.org/fhir}MeasureReportType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MeasureReportType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "851"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "852"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "853"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "853"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "853"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "854"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "852",
            "locator" : "250:52-250:56",
            "name" : "value"
          },
          "localId" : "853",
          "locator" : "250:52-250:62",
          "path" : "value"
        },
        "localId" : "854",
        "locator" : "250:1-250:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "855",
            "locator" : "251:32-251:42",
            "name" : "{http://hl7.org/fhir}MediaStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MediaStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "855"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "856"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "857"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "857"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "857"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "858"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "856",
            "locator" : "251:46-251:50",
            "name" : "value"
          },
          "localId" : "857",
          "locator" : "251:46-251:56",
          "path" : "value"
        },
        "localId" : "858",
        "locator" : "251:1-251:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "859",
            "locator" : "252:32-252:61",
            "name" : "{http://hl7.org/fhir}MedicationAdministrationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationAdministrationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "859"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "860"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "861"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "861"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "861"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "862"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "860",
            "locator" : "252:65-252:69",
            "name" : "value"
          },
          "localId" : "861",
          "locator" : "252:65-252:75",
          "path" : "value"
        },
        "localId" : "862",
        "locator" : "252:1-252:75",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "863",
            "locator" : "253:32-253:55",
            "name" : "{http://hl7.org/fhir}MedicationDispenseStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationDispenseStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "863"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "864"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "865"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "865"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "865"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "866"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "864",
            "locator" : "253:59-253:63",
            "name" : "value"
          },
          "localId" : "865",
          "locator" : "253:59-253:69",
          "path" : "value"
        },
        "localId" : "866",
        "locator" : "253:1-253:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "867",
            "locator" : "254:32-254:56",
            "name" : "{http://hl7.org/fhir}MedicationKnowledgeStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationKnowledgeStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "867"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "868"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "869"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "869"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "869"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "870"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "868",
            "locator" : "254:60-254:64",
            "name" : "value"
          },
          "localId" : "869",
          "locator" : "254:60-254:70",
          "path" : "value"
        },
        "localId" : "870",
        "locator" : "254:1-254:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "871",
            "locator" : "255:32-255:54",
            "name" : "{http://hl7.org/fhir}MedicationRequestIntent"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationRequestIntent" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "871"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "872"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "873"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "873"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "873"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "874"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "872",
            "locator" : "255:58-255:62",
            "name" : "value"
          },
          "localId" : "873",
          "locator" : "255:58-255:68",
          "path" : "value"
        },
        "localId" : "874",
        "locator" : "255:1-255:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "875",
            "locator" : "256:32-256:56",
            "name" : "{http://hl7.org/fhir}MedicationRequestPriority"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationRequestPriority" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "875"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "876"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "877"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "877"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "877"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "878"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "876",
            "locator" : "256:60-256:64",
            "name" : "value"
          },
          "localId" : "877",
          "locator" : "256:60-256:70",
          "path" : "value"
        },
        "localId" : "878",
        "locator" : "256:1-256:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "879",
            "locator" : "257:32-257:54",
            "name" : "{http://hl7.org/fhir}MedicationRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "879"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "880"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "881"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "881"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "881"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "882"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "880",
            "locator" : "257:58-257:62",
            "name" : "value"
          },
          "localId" : "881",
          "locator" : "257:58-257:68",
          "path" : "value"
        },
        "localId" : "882",
        "locator" : "257:1-257:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "883",
            "locator" : "258:32-258:56",
            "name" : "{http://hl7.org/fhir}MedicationStatementStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationStatementStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "883"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "884"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "885"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "885"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "885"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "886"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "884",
            "locator" : "258:60-258:64",
            "name" : "value"
          },
          "localId" : "885",
          "locator" : "258:60-258:70",
          "path" : "value"
        },
        "localId" : "886",
        "locator" : "258:1-258:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "887",
            "locator" : "259:32-259:47",
            "name" : "{http://hl7.org/fhir}MedicationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MedicationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "887"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "888"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "889"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "889"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "889"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "890"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "888",
            "locator" : "259:51-259:55",
            "name" : "value"
          },
          "localId" : "889",
          "locator" : "259:51-259:61",
          "path" : "value"
        },
        "localId" : "890",
        "locator" : "259:1-259:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "891",
            "locator" : "260:32-260:58",
            "name" : "{http://hl7.org/fhir}MessageSignificanceCategory"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MessageSignificanceCategory" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "891"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "892"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "893"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "893"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "893"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "894"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "892",
            "locator" : "260:62-260:66",
            "name" : "value"
          },
          "localId" : "893",
          "locator" : "260:62-260:72",
          "path" : "value"
        },
        "localId" : "894",
        "locator" : "260:1-260:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "895",
            "locator" : "261:32-261:61",
            "name" : "{http://hl7.org/fhir}Messageheader_Response_Request"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "Messageheader_Response_Request" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "895"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "896"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "897"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "897"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "897"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "898"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "896",
            "locator" : "261:65-261:69",
            "name" : "value"
          },
          "localId" : "897",
          "locator" : "261:65-261:75",
          "path" : "value"
        },
        "localId" : "898",
        "locator" : "261:1-261:75",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "899",
            "locator" : "262:32-262:39",
            "name" : "{http://hl7.org/fhir}MimeType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "MimeType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "899"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "900"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "901"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "901"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "901"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "902"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "900",
            "locator" : "262:43-262:47",
            "name" : "value"
          },
          "localId" : "901",
          "locator" : "262:43-262:53",
          "path" : "value"
        },
        "localId" : "902",
        "locator" : "262:1-262:53",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "903",
            "locator" : "263:32-263:38",
            "name" : "{http://hl7.org/fhir}NameUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NameUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "903"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "904"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "905"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "905"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "905"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "906"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "904",
            "locator" : "263:42-263:46",
            "name" : "value"
          },
          "localId" : "905",
          "locator" : "263:42-263:52",
          "path" : "value"
        },
        "localId" : "906",
        "locator" : "263:1-263:52",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "907",
            "locator" : "264:32-264:57",
            "name" : "{http://hl7.org/fhir}NamingSystemIdentifierType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NamingSystemIdentifierType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "907"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "908"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "909"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "909"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "909"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "910"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "908",
            "locator" : "264:61-264:65",
            "name" : "value"
          },
          "localId" : "909",
          "locator" : "264:61-264:71",
          "path" : "value"
        },
        "localId" : "910",
        "locator" : "264:1-264:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "911",
            "locator" : "265:32-265:47",
            "name" : "{http://hl7.org/fhir}NamingSystemType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NamingSystemType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "911"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "912"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "913"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "913"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "913"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "914"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "912",
            "locator" : "265:51-265:55",
            "name" : "value"
          },
          "localId" : "913",
          "locator" : "265:51-265:61",
          "path" : "value"
        },
        "localId" : "914",
        "locator" : "265:1-265:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "915",
            "locator" : "266:32-266:46",
            "name" : "{http://hl7.org/fhir}NarrativeStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NarrativeStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "915"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "916"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "917"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "917"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "917"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "918"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "916",
            "locator" : "266:50-266:54",
            "name" : "value"
          },
          "localId" : "917",
          "locator" : "266:50-266:60",
          "path" : "value"
        },
        "localId" : "918",
        "locator" : "266:1-266:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "919",
            "locator" : "267:32-267:39",
            "name" : "{http://hl7.org/fhir}NoteType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NoteType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "919"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "920"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "921"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "921"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "921"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "922"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "920",
            "locator" : "267:43-267:47",
            "name" : "value"
          },
          "localId" : "921",
          "locator" : "267:43-267:53",
          "path" : "value"
        },
        "localId" : "922",
        "locator" : "267:1-267:53",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "923",
            "locator" : "268:32-268:52",
            "name" : "{http://hl7.org/fhir}NutritiionOrderIntent"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NutritiionOrderIntent" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "923"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "924"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "925"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "925"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "925"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "926"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "924",
            "locator" : "268:56-268:60",
            "name" : "value"
          },
          "localId" : "925",
          "locator" : "268:56-268:66",
          "path" : "value"
        },
        "localId" : "926",
        "locator" : "268:1-268:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "927",
            "locator" : "269:32-269:51",
            "name" : "{http://hl7.org/fhir}NutritionOrderStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "NutritionOrderStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "927"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "928"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "929"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "929"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "929"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "930"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "928",
            "locator" : "269:55-269:59",
            "name" : "value"
          },
          "localId" : "929",
          "locator" : "269:55-269:65",
          "path" : "value"
        },
        "localId" : "930",
        "locator" : "269:1-269:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "931",
            "locator" : "270:32-270:50",
            "name" : "{http://hl7.org/fhir}ObservationDataType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ObservationDataType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "931"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "932"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "933"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "933"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "933"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "934"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "932",
            "locator" : "270:54-270:58",
            "name" : "value"
          },
          "localId" : "933",
          "locator" : "270:54-270:64",
          "path" : "value"
        },
        "localId" : "934",
        "locator" : "270:1-270:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "935",
            "locator" : "271:32-271:55",
            "name" : "{http://hl7.org/fhir}ObservationRangeCategory"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ObservationRangeCategory" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "935"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "936"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "937"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "937"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "937"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "938"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "936",
            "locator" : "271:59-271:63",
            "name" : "value"
          },
          "localId" : "937",
          "locator" : "271:59-271:69",
          "path" : "value"
        },
        "localId" : "938",
        "locator" : "271:1-271:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "939",
            "locator" : "272:32-272:48",
            "name" : "{http://hl7.org/fhir}ObservationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ObservationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "939"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "940"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "941"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "941"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "941"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "942"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "940",
            "locator" : "272:52-272:56",
            "name" : "value"
          },
          "localId" : "941",
          "locator" : "272:52-272:62",
          "path" : "value"
        },
        "localId" : "942",
        "locator" : "272:1-272:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "943",
            "locator" : "273:32-273:44",
            "name" : "{http://hl7.org/fhir}OperationKind"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "OperationKind" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "943"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "944"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "945"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "945"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "945"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "946"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "944",
            "locator" : "273:48-273:52",
            "name" : "value"
          },
          "localId" : "945",
          "locator" : "273:48-273:58",
          "path" : "value"
        },
        "localId" : "946",
        "locator" : "273:1-273:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "947",
            "locator" : "274:32-274:52",
            "name" : "{http://hl7.org/fhir}OperationParameterUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "OperationParameterUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "947"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "948"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "949"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "949"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "949"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "950"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "948",
            "locator" : "274:56-274:60",
            "name" : "value"
          },
          "localId" : "949",
          "locator" : "274:56-274:66",
          "path" : "value"
        },
        "localId" : "950",
        "locator" : "274:1-274:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "951",
            "locator" : "275:32-275:46",
            "name" : "{http://hl7.org/fhir}OrientationType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "OrientationType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "951"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "952"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "953"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "953"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "953"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "954"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "952",
            "locator" : "275:50-275:54",
            "name" : "value"
          },
          "localId" : "953",
          "locator" : "275:50-275:60",
          "path" : "value"
        },
        "localId" : "954",
        "locator" : "275:1-275:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "955",
            "locator" : "276:32-276:43",
            "name" : "{http://hl7.org/fhir}ParameterUse"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ParameterUse" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "955"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "956"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "957"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "957"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "957"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "958"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "956",
            "locator" : "276:47-276:51",
            "name" : "value"
          },
          "localId" : "957",
          "locator" : "276:47-276:57",
          "path" : "value"
        },
        "localId" : "958",
        "locator" : "276:1-276:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "959",
            "locator" : "277:32-277:50",
            "name" : "{http://hl7.org/fhir}ParticipantRequired"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ParticipantRequired" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "959"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "960"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "961"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "961"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "961"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "962"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "960",
            "locator" : "277:54-277:58",
            "name" : "value"
          },
          "localId" : "961",
          "locator" : "277:54-277:64",
          "path" : "value"
        },
        "localId" : "962",
        "locator" : "277:1-277:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "963",
            "locator" : "278:32-278:48",
            "name" : "{http://hl7.org/fhir}ParticipantStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ParticipantStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "963"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "964"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "965"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "965"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "965"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "966"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "964",
            "locator" : "278:52-278:56",
            "name" : "value"
          },
          "localId" : "965",
          "locator" : "278:52-278:62",
          "path" : "value"
        },
        "localId" : "966",
        "locator" : "278:1-278:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "967",
            "locator" : "279:32-279:50",
            "name" : "{http://hl7.org/fhir}ParticipationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ParticipationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "967"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "968"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "969"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "969"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "969"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "970"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "968",
            "locator" : "279:54-279:58",
            "name" : "value"
          },
          "localId" : "969",
          "locator" : "279:54-279:64",
          "path" : "value"
        },
        "localId" : "970",
        "locator" : "279:1-279:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "971",
            "locator" : "280:32-280:50",
            "name" : "{http://hl7.org/fhir}PaymentNoticeStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "PaymentNoticeStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "971"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "972"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "973"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "973"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "973"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "974"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "972",
            "locator" : "280:54-280:58",
            "name" : "value"
          },
          "localId" : "973",
          "locator" : "280:54-280:64",
          "path" : "value"
        },
        "localId" : "974",
        "locator" : "280:1-280:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "975",
            "locator" : "281:32-281:58",
            "name" : "{http://hl7.org/fhir}PaymentReconciliationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "PaymentReconciliationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "975"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "976"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "977"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "977"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "977"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "978"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "976",
            "locator" : "281:62-281:66",
            "name" : "value"
          },
          "localId" : "977",
          "locator" : "281:62-281:72",
          "path" : "value"
        },
        "localId" : "978",
        "locator" : "281:1-281:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "979",
            "locator" : "282:32-282:46",
            "name" : "{http://hl7.org/fhir}ProcedureStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ProcedureStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "979"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "980"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "981"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "981"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "981"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "982"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "980",
            "locator" : "282:50-282:54",
            "name" : "value"
          },
          "localId" : "981",
          "locator" : "282:50-282:60",
          "path" : "value"
        },
        "localId" : "982",
        "locator" : "282:1-282:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "983",
            "locator" : "283:32-283:53",
            "name" : "{http://hl7.org/fhir}PropertyRepresentation"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "PropertyRepresentation" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "983"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "984"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "985"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "985"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "985"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "986"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "984",
            "locator" : "283:57-283:61",
            "name" : "value"
          },
          "localId" : "985",
          "locator" : "283:57-283:67",
          "path" : "value"
        },
        "localId" : "986",
        "locator" : "283:1-283:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "987",
            "locator" : "284:32-284:43",
            "name" : "{http://hl7.org/fhir}PropertyType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "PropertyType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "987"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "988"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "989"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "989"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "989"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "990"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "988",
            "locator" : "284:47-284:51",
            "name" : "value"
          },
          "localId" : "989",
          "locator" : "284:47-284:57",
          "path" : "value"
        },
        "localId" : "990",
        "locator" : "284:1-284:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "991",
            "locator" : "285:32-285:51",
            "name" : "{http://hl7.org/fhir}ProvenanceEntityRole"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ProvenanceEntityRole" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "991"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "992"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "993"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "993"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "993"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "994"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "992",
            "locator" : "285:55-285:59",
            "name" : "value"
          },
          "localId" : "993",
          "locator" : "285:55-285:65",
          "path" : "value"
        },
        "localId" : "994",
        "locator" : "285:1-285:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "995",
            "locator" : "286:32-286:48",
            "name" : "{http://hl7.org/fhir}PublicationStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "PublicationStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "995"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "996"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "997"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "997"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "997"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "998"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "996",
            "locator" : "286:52-286:56",
            "name" : "value"
          },
          "localId" : "997",
          "locator" : "286:52-286:62",
          "path" : "value"
        },
        "localId" : "998",
        "locator" : "286:1-286:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "999",
            "locator" : "287:32-287:42",
            "name" : "{http://hl7.org/fhir}QualityType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "QualityType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "999"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1000"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1001"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1001"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1001"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1002"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1000",
            "locator" : "287:46-287:50",
            "name" : "value"
          },
          "localId" : "1001",
          "locator" : "287:46-287:56",
          "path" : "value"
        },
        "localId" : "1002",
        "locator" : "287:1-287:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1003",
            "locator" : "288:32-288:49",
            "name" : "{http://hl7.org/fhir}QuantityComparator"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "QuantityComparator" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1003"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1004"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1005"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1005"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1005"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1006"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1004",
            "locator" : "288:53-288:57",
            "name" : "value"
          },
          "localId" : "1005",
          "locator" : "288:53-288:63",
          "path" : "value"
        },
        "localId" : "1006",
        "locator" : "288:1-288:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1007",
            "locator" : "289:32-289:56",
            "name" : "{http://hl7.org/fhir}QuestionnaireItemOperator"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "QuestionnaireItemOperator" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1007"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1008"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1009"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1009"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1009"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1010"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1008",
            "locator" : "289:60-289:64",
            "name" : "value"
          },
          "localId" : "1009",
          "locator" : "289:60-289:70",
          "path" : "value"
        },
        "localId" : "1010",
        "locator" : "289:1-289:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1011",
            "locator" : "290:32-290:52",
            "name" : "{http://hl7.org/fhir}QuestionnaireItemType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "QuestionnaireItemType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1011"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1012"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1013"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1013"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1013"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1014"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1012",
            "locator" : "290:56-290:60",
            "name" : "value"
          },
          "localId" : "1013",
          "locator" : "290:56-290:66",
          "path" : "value"
        },
        "localId" : "1014",
        "locator" : "290:1-290:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1015",
            "locator" : "291:32-291:58",
            "name" : "{http://hl7.org/fhir}QuestionnaireResponseStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "QuestionnaireResponseStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1015"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1016"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1017"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1017"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1017"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1018"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1016",
            "locator" : "291:62-291:66",
            "name" : "value"
          },
          "localId" : "1017",
          "locator" : "291:62-291:72",
          "path" : "value"
        },
        "localId" : "1018",
        "locator" : "291:1-291:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1019",
            "locator" : "292:32-292:54",
            "name" : "{http://hl7.org/fhir}ReferenceHandlingPolicy"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ReferenceHandlingPolicy" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1019"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1020"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1021"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1021"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1021"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1022"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1020",
            "locator" : "292:58-292:62",
            "name" : "value"
          },
          "localId" : "1021",
          "locator" : "292:58-292:68",
          "path" : "value"
        },
        "localId" : "1022",
        "locator" : "292:1-292:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1023",
            "locator" : "293:32-293:52",
            "name" : "{http://hl7.org/fhir}ReferenceVersionRules"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ReferenceVersionRules" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1023"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1024"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1025"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1025"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1025"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1026"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1024",
            "locator" : "293:56-293:60",
            "name" : "value"
          },
          "localId" : "1025",
          "locator" : "293:56-293:66",
          "path" : "value"
        },
        "localId" : "1026",
        "locator" : "293:1-293:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1027",
            "locator" : "294:32-294:53",
            "name" : "{http://hl7.org/fhir}ReferredDocumentStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ReferredDocumentStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1027"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1028"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1029"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1029"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1029"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1030"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1028",
            "locator" : "294:57-294:61",
            "name" : "value"
          },
          "localId" : "1029",
          "locator" : "294:57-294:67",
          "path" : "value"
        },
        "localId" : "1030",
        "locator" : "294:1-294:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1031",
            "locator" : "295:32-295:50",
            "name" : "{http://hl7.org/fhir}RelatedArtifactType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RelatedArtifactType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1031"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1032"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1033"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1033"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1033"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1034"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1032",
            "locator" : "295:54-295:58",
            "name" : "value"
          },
          "localId" : "1033",
          "locator" : "295:54-295:64",
          "path" : "value"
        },
        "localId" : "1034",
        "locator" : "295:1-295:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1035",
            "locator" : "296:32-296:48",
            "name" : "{http://hl7.org/fhir}RemittanceOutcome"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RemittanceOutcome" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1035"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1036"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1037"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1037"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1037"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1038"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1036",
            "locator" : "296:52-296:56",
            "name" : "value"
          },
          "localId" : "1037",
          "locator" : "296:52-296:62",
          "path" : "value"
        },
        "localId" : "1038",
        "locator" : "296:1-296:62",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1039",
            "locator" : "297:32-297:45",
            "name" : "{http://hl7.org/fhir}RepositoryType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RepositoryType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1039"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1040"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1041"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1041"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1041"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1042"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1040",
            "locator" : "297:49-297:53",
            "name" : "value"
          },
          "localId" : "1041",
          "locator" : "297:49-297:59",
          "path" : "value"
        },
        "localId" : "1042",
        "locator" : "297:1-297:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1043",
            "locator" : "298:32-298:44",
            "name" : "{http://hl7.org/fhir}RequestIntent"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RequestIntent" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1043"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1044"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1045"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1045"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1045"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1046"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1044",
            "locator" : "298:48-298:52",
            "name" : "value"
          },
          "localId" : "1045",
          "locator" : "298:48-298:58",
          "path" : "value"
        },
        "localId" : "1046",
        "locator" : "298:1-298:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1047",
            "locator" : "299:32-299:46",
            "name" : "{http://hl7.org/fhir}RequestPriority"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RequestPriority" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1047"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1048"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1049"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1049"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1049"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1050"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1048",
            "locator" : "299:50-299:54",
            "name" : "value"
          },
          "localId" : "1049",
          "locator" : "299:50-299:60",
          "path" : "value"
        },
        "localId" : "1050",
        "locator" : "299:1-299:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1051",
            "locator" : "300:32-300:44",
            "name" : "{http://hl7.org/fhir}RequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1051"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1052"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1053"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1053"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1053"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1054"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1052",
            "locator" : "300:48-300:52",
            "name" : "value"
          },
          "localId" : "1053",
          "locator" : "300:48-300:58",
          "path" : "value"
        },
        "localId" : "1054",
        "locator" : "300:1-300:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1055",
            "locator" : "301:32-301:50",
            "name" : "{http://hl7.org/fhir}ResearchElementType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ResearchElementType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1055"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1056"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1057"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1057"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1057"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1058"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1056",
            "locator" : "301:54-301:58",
            "name" : "value"
          },
          "localId" : "1057",
          "locator" : "301:54-301:64",
          "path" : "value"
        },
        "localId" : "1058",
        "locator" : "301:1-301:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1059",
            "locator" : "302:32-302:50",
            "name" : "{http://hl7.org/fhir}ResearchStudyStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ResearchStudyStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1059"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1060"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1061"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1061"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1061"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1062"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1060",
            "locator" : "302:54-302:58",
            "name" : "value"
          },
          "localId" : "1061",
          "locator" : "302:54-302:64",
          "path" : "value"
        },
        "localId" : "1062",
        "locator" : "302:1-302:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1063",
            "locator" : "303:32-303:52",
            "name" : "{http://hl7.org/fhir}ResearchSubjectStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ResearchSubjectStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1063"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1064"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1065"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1065"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1065"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1066"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1064",
            "locator" : "303:56-303:60",
            "name" : "value"
          },
          "localId" : "1065",
          "locator" : "303:56-303:66",
          "path" : "value"
        },
        "localId" : "1066",
        "locator" : "303:1-303:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1067",
            "locator" : "304:32-304:43",
            "name" : "{http://hl7.org/fhir}ResourceType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ResourceType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1067"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1068"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1069"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1069"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1069"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1070"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1068",
            "locator" : "304:47-304:51",
            "name" : "value"
          },
          "localId" : "1069",
          "locator" : "304:47-304:57",
          "path" : "value"
        },
        "localId" : "1070",
        "locator" : "304:1-304:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1071",
            "locator" : "305:32-305:52",
            "name" : "{http://hl7.org/fhir}ResourceVersionPolicy"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ResourceVersionPolicy" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1071"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1072"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1073"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1073"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1073"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1074"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1072",
            "locator" : "305:56-305:60",
            "name" : "value"
          },
          "localId" : "1073",
          "locator" : "305:56-305:66",
          "path" : "value"
        },
        "localId" : "1074",
        "locator" : "305:1-305:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1075",
            "locator" : "306:32-306:43",
            "name" : "{http://hl7.org/fhir}ResponseType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ResponseType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1075"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1076"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1077"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1077"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1077"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1078"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1076",
            "locator" : "306:47-306:51",
            "name" : "value"
          },
          "localId" : "1077",
          "locator" : "306:47-306:57",
          "path" : "value"
        },
        "localId" : "1078",
        "locator" : "306:1-306:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1079",
            "locator" : "307:32-307:52",
            "name" : "{http://hl7.org/fhir}RestfulCapabilityMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RestfulCapabilityMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1079"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1080"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1081"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1081"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1081"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1082"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1080",
            "locator" : "307:56-307:60",
            "name" : "value"
          },
          "localId" : "1081",
          "locator" : "307:56-307:66",
          "path" : "value"
        },
        "localId" : "1082",
        "locator" : "307:1-307:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1083",
            "locator" : "308:32-308:51",
            "name" : "{http://hl7.org/fhir}RiskAssessmentStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "RiskAssessmentStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1083"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1084"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1085"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1085"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1085"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1086"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1084",
            "locator" : "308:55-308:59",
            "name" : "value"
          },
          "localId" : "1085",
          "locator" : "308:55-308:65",
          "path" : "value"
        },
        "localId" : "1086",
        "locator" : "308:1-308:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1087",
            "locator" : "309:32-309:42",
            "name" : "{http://hl7.org/fhir}SPDXLicense"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SPDXLicense" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1087"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1088"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1089"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1089"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1089"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1090"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1088",
            "locator" : "309:46-309:50",
            "name" : "value"
          },
          "localId" : "1089",
          "locator" : "309:46-309:56",
          "path" : "value"
        },
        "localId" : "1090",
        "locator" : "309:1-309:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1091",
            "locator" : "310:32-310:47",
            "name" : "{http://hl7.org/fhir}SearchComparator"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SearchComparator" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1091"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1092"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1093"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1093"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1093"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1094"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1092",
            "locator" : "310:51-310:55",
            "name" : "value"
          },
          "localId" : "1093",
          "locator" : "310:51-310:61",
          "path" : "value"
        },
        "localId" : "1094",
        "locator" : "310:1-310:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1095",
            "locator" : "311:32-311:46",
            "name" : "{http://hl7.org/fhir}SearchEntryMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SearchEntryMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1095"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1096"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1097"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1097"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1097"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1098"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1096",
            "locator" : "311:50-311:54",
            "name" : "value"
          },
          "localId" : "1097",
          "locator" : "311:50-311:60",
          "path" : "value"
        },
        "localId" : "1098",
        "locator" : "311:1-311:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1099",
            "locator" : "312:32-312:49",
            "name" : "{http://hl7.org/fhir}SearchModifierCode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SearchModifierCode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1099"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1100"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1101"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1101"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1101"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1102"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1100",
            "locator" : "312:53-312:57",
            "name" : "value"
          },
          "localId" : "1101",
          "locator" : "312:53-312:63",
          "path" : "value"
        },
        "localId" : "1102",
        "locator" : "312:1-312:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1103",
            "locator" : "313:32-313:46",
            "name" : "{http://hl7.org/fhir}SearchParamType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SearchParamType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1103"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1104"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1105"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1105"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1105"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1106"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1104",
            "locator" : "313:50-313:54",
            "name" : "value"
          },
          "localId" : "1105",
          "locator" : "313:50-313:60",
          "path" : "value"
        },
        "localId" : "1106",
        "locator" : "313:1-313:60",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1107",
            "locator" : "314:32-314:42",
            "name" : "{http://hl7.org/fhir}SectionMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SectionMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1107"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1108"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1109"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1109"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1109"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1110"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1108",
            "locator" : "314:46-314:50",
            "name" : "value"
          },
          "localId" : "1109",
          "locator" : "314:46-314:56",
          "path" : "value"
        },
        "localId" : "1110",
        "locator" : "314:1-314:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1111",
            "locator" : "315:32-315:43",
            "name" : "{http://hl7.org/fhir}SequenceType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SequenceType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1111"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1112"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1113"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1113"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1113"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1114"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1112",
            "locator" : "315:47-315:51",
            "name" : "value"
          },
          "localId" : "1113",
          "locator" : "315:47-315:57",
          "path" : "value"
        },
        "localId" : "1114",
        "locator" : "315:1-315:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1115",
            "locator" : "316:32-316:51",
            "name" : "{http://hl7.org/fhir}ServiceRequestIntent"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ServiceRequestIntent" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1115"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1116"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1117"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1117"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1117"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1118"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1116",
            "locator" : "316:55-316:59",
            "name" : "value"
          },
          "localId" : "1117",
          "locator" : "316:55-316:65",
          "path" : "value"
        },
        "localId" : "1118",
        "locator" : "316:1-316:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1119",
            "locator" : "317:32-317:53",
            "name" : "{http://hl7.org/fhir}ServiceRequestPriority"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ServiceRequestPriority" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1119"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1120"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1121"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1121"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1121"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1122"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1120",
            "locator" : "317:57-317:61",
            "name" : "value"
          },
          "localId" : "1121",
          "locator" : "317:57-317:67",
          "path" : "value"
        },
        "localId" : "1122",
        "locator" : "317:1-317:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1123",
            "locator" : "318:32-318:51",
            "name" : "{http://hl7.org/fhir}ServiceRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "ServiceRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1123"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1124"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1125"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1125"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1125"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1126"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1124",
            "locator" : "318:55-318:59",
            "name" : "value"
          },
          "localId" : "1125",
          "locator" : "318:55-318:65",
          "path" : "value"
        },
        "localId" : "1126",
        "locator" : "318:1-318:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1127",
            "locator" : "319:32-319:43",
            "name" : "{http://hl7.org/fhir}SlicingRules"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SlicingRules" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1127"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1128"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1129"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1129"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1129"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1130"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1128",
            "locator" : "319:47-319:51",
            "name" : "value"
          },
          "localId" : "1129",
          "locator" : "319:47-319:57",
          "path" : "value"
        },
        "localId" : "1130",
        "locator" : "319:1-319:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1131",
            "locator" : "320:32-320:41",
            "name" : "{http://hl7.org/fhir}SlotStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SlotStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1131"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1132"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1133"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1133"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1133"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1134"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1132",
            "locator" : "320:45-320:49",
            "name" : "value"
          },
          "localId" : "1133",
          "locator" : "320:45-320:55",
          "path" : "value"
        },
        "localId" : "1134",
        "locator" : "320:1-320:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1135",
            "locator" : "321:32-321:44",
            "name" : "{http://hl7.org/fhir}SortDirection"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SortDirection" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1135"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1136"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1137"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1137"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1137"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1138"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1136",
            "locator" : "321:48-321:52",
            "name" : "value"
          },
          "localId" : "1137",
          "locator" : "321:48-321:58",
          "path" : "value"
        },
        "localId" : "1138",
        "locator" : "321:1-321:58",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1139",
            "locator" : "322:32-322:58",
            "name" : "{http://hl7.org/fhir}SpecimenContainedPreference"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SpecimenContainedPreference" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1139"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1140"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1141"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1141"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1141"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1142"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1140",
            "locator" : "322:62-322:66",
            "name" : "value"
          },
          "localId" : "1141",
          "locator" : "322:62-322:72",
          "path" : "value"
        },
        "localId" : "1142",
        "locator" : "322:1-322:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1143",
            "locator" : "323:32-323:45",
            "name" : "{http://hl7.org/fhir}SpecimenStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SpecimenStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1143"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1144"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1145"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1145"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1145"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1146"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1144",
            "locator" : "323:49-323:53",
            "name" : "value"
          },
          "localId" : "1145",
          "locator" : "323:49-323:59",
          "path" : "value"
        },
        "localId" : "1146",
        "locator" : "323:1-323:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1147",
            "locator" : "324:32-324:37",
            "name" : "{http://hl7.org/fhir}Status"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "Status" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1147"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1148"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1149"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1149"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1149"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1150"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1148",
            "locator" : "324:41-324:45",
            "name" : "value"
          },
          "localId" : "1149",
          "locator" : "324:41-324:51",
          "path" : "value"
        },
        "localId" : "1150",
        "locator" : "324:1-324:51",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1151",
            "locator" : "325:32-325:41",
            "name" : "{http://hl7.org/fhir}StrandType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StrandType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1151"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1152"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1153"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1153"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1153"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1154"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1152",
            "locator" : "325:45-325:49",
            "name" : "value"
          },
          "localId" : "1153",
          "locator" : "325:45-325:55",
          "path" : "value"
        },
        "localId" : "1154",
        "locator" : "325:1-325:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1155",
            "locator" : "326:32-326:54",
            "name" : "{http://hl7.org/fhir}StructureDefinitionKind"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureDefinitionKind" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1155"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1156"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1157"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1157"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1157"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1158"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1156",
            "locator" : "326:58-326:62",
            "name" : "value"
          },
          "localId" : "1157",
          "locator" : "326:58-326:68",
          "path" : "value"
        },
        "localId" : "1158",
        "locator" : "326:1-326:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1159",
            "locator" : "327:32-327:54",
            "name" : "{http://hl7.org/fhir}StructureMapContextType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapContextType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1159"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1160"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1161"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1161"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1161"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1162"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1160",
            "locator" : "327:58-327:62",
            "name" : "value"
          },
          "localId" : "1161",
          "locator" : "327:58-327:68",
          "path" : "value"
        },
        "localId" : "1162",
        "locator" : "327:1-327:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1163",
            "locator" : "328:32-328:56",
            "name" : "{http://hl7.org/fhir}StructureMapGroupTypeMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapGroupTypeMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1163"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1164"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1165"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1165"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1165"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1166"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1164",
            "locator" : "328:60-328:64",
            "name" : "value"
          },
          "localId" : "1165",
          "locator" : "328:60-328:70",
          "path" : "value"
        },
        "localId" : "1166",
        "locator" : "328:1-328:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1167",
            "locator" : "329:32-329:52",
            "name" : "{http://hl7.org/fhir}StructureMapInputMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapInputMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1167"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1168"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1169"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1169"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1169"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1170"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1168",
            "locator" : "329:56-329:60",
            "name" : "value"
          },
          "localId" : "1169",
          "locator" : "329:56-329:66",
          "path" : "value"
        },
        "localId" : "1170",
        "locator" : "329:1-329:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1171",
            "locator" : "330:32-330:52",
            "name" : "{http://hl7.org/fhir}StructureMapModelMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapModelMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1171"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1172"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1173"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1173"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1173"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1174"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1172",
            "locator" : "330:56-330:60",
            "name" : "value"
          },
          "localId" : "1173",
          "locator" : "330:56-330:66",
          "path" : "value"
        },
        "localId" : "1174",
        "locator" : "330:1-330:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1175",
            "locator" : "331:32-331:57",
            "name" : "{http://hl7.org/fhir}StructureMapSourceListMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapSourceListMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1175"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1176"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1177"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1177"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1177"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1178"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1176",
            "locator" : "331:61-331:65",
            "name" : "value"
          },
          "localId" : "1177",
          "locator" : "331:61-331:71",
          "path" : "value"
        },
        "localId" : "1178",
        "locator" : "331:1-331:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1179",
            "locator" : "332:32-332:57",
            "name" : "{http://hl7.org/fhir}StructureMapTargetListMode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapTargetListMode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1179"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1180"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1181"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1181"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1181"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1182"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1180",
            "locator" : "332:61-332:65",
            "name" : "value"
          },
          "localId" : "1181",
          "locator" : "332:61-332:71",
          "path" : "value"
        },
        "localId" : "1182",
        "locator" : "332:1-332:71",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1183",
            "locator" : "333:32-333:52",
            "name" : "{http://hl7.org/fhir}StructureMapTransform"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "StructureMapTransform" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1183"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1184"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1185"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1185"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1185"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1186"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1184",
            "locator" : "333:56-333:60",
            "name" : "value"
          },
          "localId" : "1185",
          "locator" : "333:56-333:66",
          "path" : "value"
        },
        "localId" : "1186",
        "locator" : "333:1-333:66",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1187",
            "locator" : "334:32-334:54",
            "name" : "{http://hl7.org/fhir}SubscriptionChannelType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SubscriptionChannelType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1187"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1188"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1189"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1189"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1189"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1190"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1188",
            "locator" : "334:58-334:62",
            "name" : "value"
          },
          "localId" : "1189",
          "locator" : "334:58-334:68",
          "path" : "value"
        },
        "localId" : "1190",
        "locator" : "334:1-334:68",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1191",
            "locator" : "335:32-335:49",
            "name" : "{http://hl7.org/fhir}SubscriptionStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SubscriptionStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1191"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1192"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1193"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1193"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1193"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1194"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1192",
            "locator" : "335:53-335:57",
            "name" : "value"
          },
          "localId" : "1193",
          "locator" : "335:53-335:63",
          "path" : "value"
        },
        "localId" : "1194",
        "locator" : "335:1-335:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1195",
            "locator" : "336:32-336:51",
            "name" : "{http://hl7.org/fhir}SupplyDeliveryStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SupplyDeliveryStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1195"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1196"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1197"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1197"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1197"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1198"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1196",
            "locator" : "336:55-336:59",
            "name" : "value"
          },
          "localId" : "1197",
          "locator" : "336:55-336:65",
          "path" : "value"
        },
        "localId" : "1198",
        "locator" : "336:1-336:65",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1199",
            "locator" : "337:32-337:50",
            "name" : "{http://hl7.org/fhir}SupplyRequestStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SupplyRequestStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1199"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1200"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1201"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1201"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1201"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1202"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1200",
            "locator" : "337:54-337:58",
            "name" : "value"
          },
          "localId" : "1201",
          "locator" : "337:54-337:64",
          "path" : "value"
        },
        "localId" : "1202",
        "locator" : "337:1-337:64",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1203",
            "locator" : "338:32-338:55",
            "name" : "{http://hl7.org/fhir}SystemRestfulInteraction"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "SystemRestfulInteraction" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1203"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1204"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1205"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1205"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1205"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1206"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1204",
            "locator" : "338:59-338:63",
            "name" : "value"
          },
          "localId" : "1205",
          "locator" : "338:59-338:69",
          "path" : "value"
        },
        "localId" : "1206",
        "locator" : "338:1-338:69",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1207",
            "locator" : "339:32-339:41",
            "name" : "{http://hl7.org/fhir}TaskIntent"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TaskIntent" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1207"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1208"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1209"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1209"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1209"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1210"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1208",
            "locator" : "339:45-339:49",
            "name" : "value"
          },
          "localId" : "1209",
          "locator" : "339:45-339:55",
          "path" : "value"
        },
        "localId" : "1210",
        "locator" : "339:1-339:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1211",
            "locator" : "340:32-340:43",
            "name" : "{http://hl7.org/fhir}TaskPriority"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TaskPriority" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1211"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1212"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1213"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1213"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1213"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1214"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1212",
            "locator" : "340:47-340:51",
            "name" : "value"
          },
          "localId" : "1213",
          "locator" : "340:47-340:57",
          "path" : "value"
        },
        "localId" : "1214",
        "locator" : "340:1-340:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1215",
            "locator" : "341:32-341:41",
            "name" : "{http://hl7.org/fhir}TaskStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TaskStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1215"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1216"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1217"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1217"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1217"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1218"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1216",
            "locator" : "341:45-341:49",
            "name" : "value"
          },
          "localId" : "1217",
          "locator" : "341:45-341:55",
          "path" : "value"
        },
        "localId" : "1218",
        "locator" : "341:1-341:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1219",
            "locator" : "342:32-342:53",
            "name" : "{http://hl7.org/fhir}TestReportActionResult"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TestReportActionResult" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1219"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1220"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1221"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1221"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1221"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1222"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1220",
            "locator" : "342:57-342:61",
            "name" : "value"
          },
          "localId" : "1221",
          "locator" : "342:57-342:67",
          "path" : "value"
        },
        "localId" : "1222",
        "locator" : "342:1-342:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1223",
            "locator" : "343:32-343:56",
            "name" : "{http://hl7.org/fhir}TestReportParticipantType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TestReportParticipantType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1223"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1224"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1225"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1225"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1225"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1226"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1224",
            "locator" : "343:60-343:64",
            "name" : "value"
          },
          "localId" : "1225",
          "locator" : "343:60-343:70",
          "path" : "value"
        },
        "localId" : "1226",
        "locator" : "343:1-343:70",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1227",
            "locator" : "344:32-344:47",
            "name" : "{http://hl7.org/fhir}TestReportResult"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TestReportResult" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1227"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1228"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1229"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1229"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1229"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1230"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1228",
            "locator" : "344:51-344:55",
            "name" : "value"
          },
          "localId" : "1229",
          "locator" : "344:51-344:61",
          "path" : "value"
        },
        "localId" : "1230",
        "locator" : "344:1-344:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1231",
            "locator" : "345:32-345:47",
            "name" : "{http://hl7.org/fhir}TestReportStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TestReportStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1231"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1232"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1233"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1233"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1233"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1234"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1232",
            "locator" : "345:51-345:55",
            "name" : "value"
          },
          "localId" : "1233",
          "locator" : "345:51-345:61",
          "path" : "value"
        },
        "localId" : "1234",
        "locator" : "345:1-345:61",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1235",
            "locator" : "346:32-346:58",
            "name" : "{http://hl7.org/fhir}TestScriptRequestMethodCode"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TestScriptRequestMethodCode" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1235"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1236"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1237"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1237"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1237"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1238"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1236",
            "locator" : "346:62-346:66",
            "name" : "value"
          },
          "localId" : "1237",
          "locator" : "346:62-346:72",
          "path" : "value"
        },
        "localId" : "1238",
        "locator" : "346:1-346:72",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1239",
            "locator" : "347:32-347:42",
            "name" : "{http://hl7.org/fhir}TriggerType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TriggerType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1239"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1240"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1241"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1241"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1241"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1242"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1240",
            "locator" : "347:46-347:50",
            "name" : "value"
          },
          "localId" : "1241",
          "locator" : "347:46-347:56",
          "path" : "value"
        },
        "localId" : "1242",
        "locator" : "347:1-347:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1243",
            "locator" : "348:32-348:49",
            "name" : "{http://hl7.org/fhir}TypeDerivationRule"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TypeDerivationRule" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1243"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1244"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1245"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1245"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1245"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1246"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1244",
            "locator" : "348:53-348:57",
            "name" : "value"
          },
          "localId" : "1245",
          "locator" : "348:53-348:63",
          "path" : "value"
        },
        "localId" : "1246",
        "locator" : "348:1-348:63",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1247",
            "locator" : "349:32-349:53",
            "name" : "{http://hl7.org/fhir}TypeRestfulInteraction"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "TypeRestfulInteraction" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1247"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1248"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1249"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1249"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1249"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1250"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1248",
            "locator" : "349:57-349:61",
            "name" : "value"
          },
          "localId" : "1249",
          "locator" : "349:57-349:67",
          "path" : "value"
        },
        "localId" : "1250",
        "locator" : "349:1-349:67",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1251",
            "locator" : "350:32-350:43",
            "name" : "{http://hl7.org/fhir}UDIEntryType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "UDIEntryType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1251"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1252"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1253"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1253"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1253"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1254"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1252",
            "locator" : "350:47-350:51",
            "name" : "value"
          },
          "localId" : "1253",
          "locator" : "350:47-350:57",
          "path" : "value"
        },
        "localId" : "1254",
        "locator" : "350:1-350:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1255",
            "locator" : "351:32-351:42",
            "name" : "{http://hl7.org/fhir}UnitsOfTime"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "UnitsOfTime" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1255"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1256"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1257"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1257"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1257"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1258"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1256",
            "locator" : "351:46-351:50",
            "name" : "value"
          },
          "localId" : "1257",
          "locator" : "351:46-351:56",
          "path" : "value"
        },
        "localId" : "1258",
        "locator" : "351:1-351:56",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1259",
            "locator" : "352:32-352:34",
            "name" : "{http://hl7.org/fhir}Use"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "Use" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1259"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1260"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1261"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1261"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1261"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1262"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1260",
            "locator" : "352:38-352:42",
            "name" : "value"
          },
          "localId" : "1261",
          "locator" : "352:38-352:48",
          "path" : "value"
        },
        "localId" : "1262",
        "locator" : "352:1-352:48",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1263",
            "locator" : "353:32-353:43",
            "name" : "{http://hl7.org/fhir}VariableType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "VariableType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1263"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1264"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1265"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1265"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1265"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1266"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1264",
            "locator" : "353:47-353:51",
            "name" : "value"
          },
          "localId" : "1265",
          "locator" : "353:47-353:57",
          "path" : "value"
        },
        "localId" : "1266",
        "locator" : "353:1-353:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1267",
            "locator" : "354:32-354:41",
            "name" : "{http://hl7.org/fhir}VisionBase"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "VisionBase" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1267"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1268"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1269"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1269"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1269"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1270"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1268",
            "locator" : "354:45-354:49",
            "name" : "value"
          },
          "localId" : "1269",
          "locator" : "354:45-354:55",
          "path" : "value"
        },
        "localId" : "1270",
        "locator" : "354:1-354:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1271",
            "locator" : "355:32-355:41",
            "name" : "{http://hl7.org/fhir}VisionEyes"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "VisionEyes" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1271"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1272"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1273"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1273"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1273"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1274"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1272",
            "locator" : "355:45-355:49",
            "name" : "value"
          },
          "localId" : "1273",
          "locator" : "355:45-355:55",
          "path" : "value"
        },
        "localId" : "1274",
        "locator" : "355:1-355:55",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1275",
            "locator" : "356:32-356:43",
            "name" : "{http://hl7.org/fhir}VisionStatus"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "VisionStatus" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1275"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1276"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1277"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1277"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1277"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1278"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1276",
            "locator" : "356:47-356:51",
            "name" : "value"
          },
          "localId" : "1277",
          "locator" : "356:47-356:57",
          "path" : "value"
        },
        "localId" : "1278",
        "locator" : "356:1-356:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1279",
            "locator" : "357:32-357:45",
            "name" : "{http://hl7.org/fhir}XPathUsageType"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "XPathUsageType" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1279"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1280"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1281"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1281"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1281"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1282"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1280",
            "locator" : "357:49-357:53",
            "name" : "value"
          },
          "localId" : "1281",
          "locator" : "357:49-357:59",
          "path" : "value"
        },
        "localId" : "1282",
        "locator" : "357:1-357:59",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1283",
            "locator" : "358:32-358:43",
            "name" : "{http://hl7.org/fhir}base64Binary"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "base64Binary" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1283"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1284"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1285"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1285"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1285"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1286"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1284",
            "locator" : "358:47-358:51",
            "name" : "value"
          },
          "localId" : "1285",
          "locator" : "358:47-358:57",
          "path" : "value"
        },
        "localId" : "1286",
        "locator" : "358:1-358:57",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1287",
            "locator" : "359:33-359:39",
            "name" : "{http://hl7.org/fhir}boolean"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToBoolean", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "boolean" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1287"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1288"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1289"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1289"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1289"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1290"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1288",
            "locator" : "359:43-359:47",
            "name" : "value"
          },
          "localId" : "1289",
          "locator" : "359:43-359:53",
          "path" : "value"
        },
        "localId" : "1290",
        "locator" : "359:1-359:53",
        "name" : "ToBoolean",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1291",
            "locator" : "360:30-360:33",
            "name" : "{http://hl7.org/fhir}date"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToDate", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "date" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1291"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1292"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1293"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1293"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1293"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1294"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1292",
            "locator" : "360:37-360:41",
            "name" : "value"
          },
          "localId" : "1293",
          "locator" : "360:37-360:47",
          "path" : "value"
        },
        "localId" : "1294",
        "locator" : "360:1-360:47",
        "name" : "ToDate",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1295",
            "locator" : "361:34-361:41",
            "name" : "{http://hl7.org/fhir}dateTime"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToDateTime", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "dateTime" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1295"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1296"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1297"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1297"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1297"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1298"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1296",
            "locator" : "361:45-361:49",
            "name" : "value"
          },
          "localId" : "1297",
          "locator" : "361:45-361:55",
          "path" : "value"
        },
        "localId" : "1298",
        "locator" : "361:1-361:55",
        "name" : "ToDateTime",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1299",
            "locator" : "362:33-362:39",
            "name" : "{http://hl7.org/fhir}decimal"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToDecimal", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "decimal" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1299"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1300"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1301"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1301"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1301"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1302"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1300",
            "locator" : "362:43-362:47",
            "name" : "value"
          },
          "localId" : "1301",
          "locator" : "362:43-362:53",
          "path" : "value"
        },
        "localId" : "1302",
        "locator" : "362:1-362:53",
        "name" : "ToDecimal",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1303",
            "locator" : "363:34-363:40",
            "name" : "{http://hl7.org/fhir}instant"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToDateTime", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "instant" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1303"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1304"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1305"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1305"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1305"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1306"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1304",
            "locator" : "363:44-363:48",
            "name" : "value"
          },
          "localId" : "1305",
          "locator" : "363:44-363:54",
          "path" : "value"
        },
        "localId" : "1306",
        "locator" : "363:1-363:54",
        "name" : "ToDateTime",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1307",
            "locator" : "364:33-364:39",
            "name" : "{http://hl7.org/fhir}integer"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToInteger", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "integer" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1307"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1308"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1309"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1309"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1309"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1310"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1308",
            "locator" : "364:43-364:47",
            "name" : "value"
          },
          "localId" : "1309",
          "locator" : "364:43-364:53",
          "path" : "value"
        },
        "localId" : "1310",
        "locator" : "364:1-364:53",
        "name" : "ToInteger",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1311",
            "locator" : "365:32-365:37",
            "name" : "{http://hl7.org/fhir}string"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "string" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1311"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1312"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1313"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1313"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1313"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1314"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1312",
            "locator" : "365:41-365:45",
            "name" : "value"
          },
          "localId" : "1313",
          "locator" : "365:41-365:51",
          "path" : "value"
        },
        "localId" : "1314",
        "locator" : "365:1-365:51",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1315",
            "locator" : "366:30-366:33",
            "name" : "{http://hl7.org/fhir}time"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToTime", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "time" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1315"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1316"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1317"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1317"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1317"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1318"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1316",
            "locator" : "366:37-366:41",
            "name" : "value"
          },
          "localId" : "1317",
          "locator" : "366:37-366:47",
          "path" : "value"
        },
        "localId" : "1318",
        "locator" : "366:1-366:47",
        "name" : "ToTime",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1319",
            "locator" : "367:32-367:34",
            "name" : "{http://hl7.org/fhir}uri"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "uri" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1319"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1320"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1321"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1321"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1321"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1322"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1320",
            "locator" : "367:38-367:42",
            "name" : "value"
          },
          "localId" : "1321",
          "locator" : "367:38-367:48",
          "path" : "value"
        },
        "localId" : "1322",
        "locator" : "367:1-367:48",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      }, {
        "type" : "FunctionDef",
        "operand" : [ {
          "type" : "OperandDef",
          "operandTypeSpecifier" : {
            "type" : "NamedTypeSpecifier",
            "localId" : "1323",
            "locator" : "368:32-368:36",
            "name" : "{http://hl7.org/fhir}xhtml"
          },
          "name" : "value"
        } ],
        "annotation" : [ {
          "s" : {
            "s" : [ {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "", "define function ", "ToString", "(", "value", " " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ "xhtml" ]
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1323"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ "): " ]
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            }, {
              "name" : "{urn:hl7-org:cql-annotations:r1}s",
              "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
              "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
              "value" : {
                "s" : [ {
                  "name" : "{urn:hl7-org:cql-annotations:r1}s",
                  "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                  "value" : {
                    "s" : [ {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1324"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ "." ]
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    }, {
                      "name" : "{urn:hl7-org:cql-annotations:r1}s",
                      "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                      "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                      "value" : {
                        "s" : [ {
                          "name" : "{urn:hl7-org:cql-annotations:r1}s",
                          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
                          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
                          "value" : {
                            "s" : [ "value" ]
                          },
                          "nil" : false,
                          "globalScope" : true,
                          "typeSubstituted" : false
                        } ],
                        "r" : "1325"
                      },
                      "nil" : false,
                      "globalScope" : true,
                      "typeSubstituted" : false
                    } ],
                    "r" : "1325"
                  },
                  "nil" : false,
                  "globalScope" : true,
                  "typeSubstituted" : false
                } ],
                "r" : "1325"
              },
              "nil" : false,
              "globalScope" : true,
              "typeSubstituted" : false
            } ],
            "r" : "1326"
          }
        } ],
        "expression" : {
          "type" : "Property",
          "source" : {
            "type" : "OperandRef",
            "localId" : "1324",
            "locator" : "368:40-368:44",
            "name" : "value"
          },
          "localId" : "1325",
          "locator" : "368:40-368:50",
          "path" : "value"
        },
        "localId" : "1326",
        "locator" : "368:1-368:50",
        "name" : "ToString",
        "context" : "Patient",
        "accessLevel" : "Public"
      } ]
    },
    "annotation" : [ {
      "translatorVersion" : "1.4",
      "translatorOptions" : "EnableAnnotations,EnableLocators,DisableListDemotion,DisableListPromotion"
    }, {
      "s" : {
        "s" : [ {
          "name" : "{urn:hl7-org:cql-annotations:r1}s",
          "declaredType" : "org.hl7.cql_annotations.r1.Narrative",
          "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
          "value" : {
            "s" : [ "", "library FHIRHelpers version '4.0.1'" ]
          },
          "nil" : false,
          "globalScope" : true,
          "typeSubstituted" : false
        } ],
        "r" : "1326"
      }
    } ]
  }
}"
  } ]
}