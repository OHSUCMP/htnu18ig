{
  "resourceType": "Library",
  "id": "library-Monitoring",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/ohsu/htnu18ig/Library/Monitoring",
  "version": "0.1",
  "name": "Monitoring",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Common",
    "resource": "http://fhir.org/guides/ohsu/htnu18ig/Library/OHSUHTNCommon|0.1"
  }, {
    "type": "depends-on",
    "display": "Code system ConditionVerificationStatusCodes",
    "resource": "http://terminology.hl7.org/CodeSystem/condition-ver-status"
  }, {
    "type": "depends-on",
    "display": "Code system v3 Code System ActCode",
    "resource": "http://terminology.hl7.org/CodeSystem/v3-ActCode"
  }, {
    "type": "depends-on",
    "display": "Value set Systolic blood pressure",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1104.2"
  }, {
    "type": "depends-on",
    "display": "Value set Diastolic Blood Pressure",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1045"
  }, {
    "type": "depends-on",
    "display": "Value set Blood Pressure Measured",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.2012"
  }, {
    "type": "depends-on",
    "display": "Value set Hypertension",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.3157.4012"
  }, {
    "type": "depends-on",
    "display": "Value set Non essential Hypertension SNOMEDCT",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1032.10"
  }, {
    "type": "depends-on",
    "display": "Value set End Stage Renal Disease",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.590"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.378"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Info",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Warning",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Critical",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Errors",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Patient Name",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Meets Inclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Has Above Normal BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Most Recent BP Reading",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Observation"
  }, {
    "name": "Blood Pressure Observations",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Patient has a BP Goal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Qualifying Blood Pressure Goals",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Goal"
  }, {
    "name": "Condition Indicating Preexisting Hypertension",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Meets Exclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Under Age 18",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Over Age 80",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Condition Indicating End Stage Renal Disease",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Condition Indicating Pregnancy",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "In Population",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Prescribe Monitoring to Confirm Not At Goal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Has Potential HTN Stage 1 BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Most Recent BP Set",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood Pressure Observations for Last 2 Years",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Recommendation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Rationale",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Suggestions",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Selection Behavior",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Links",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Rationale Combined Data",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Indicator Status",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Exclusion Reason",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "No Entry into Population",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "No Entry Title",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "No Entry Description",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Test Patient Age on BP Reading",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Test Count All BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Test Most Recent BP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Test Get All BP Observation Resources",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Test Get Encounter BP Observations",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Patient Ambulatory Encounters",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Test Get Most Recent BP Set",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Test All BP Last 2 Years",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Test Get Average All BP Last 2 Years",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Test Get Average Most Recent BP Set",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Test Get BP Goal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "BP from Most Recent Goal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Most Recently Established Blood Pressure Goal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Goal"
  }, {
    "name": "Test Get All BP SBP Coefficient Variability",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "decimal"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.2012"
    } ]
  }, {
    "type": "Goal",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Goal" ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.3157.4012"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1032.10"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.590"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.378"
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBNb25pdG9yaW5nIHZlcnNpb24gJzAuMScKCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJyBjYWxsZWQgRkhJUkhlbHBlcnMKaW5jbHVkZSBPSFNVSFROQ29tbW9uIHZlcnNpb24gJzAuMScgY2FsbGVkIENvbW1vbgoKY29udGV4dCBQYXRpZW50CgpkZWZpbmUgIkluZm8iOgogICdpbmZvJwoKZGVmaW5lICJXYXJuaW5nIjoKICAnd2FybmluZycKCmRlZmluZSAiQ3JpdGljYWwiOgogICdjcml0aWNhbCcKCmRlZmluZSAiRXJyb3JzIjoKICBudWxsCgpkZWZpbmUgIlBhdGllbnQgTmFtZSI6CiAgRmlyc3QoUGF0aWVudC5uYW1lLmdpdmVuKQogICArICcgJyArCiAgRmlyc3QoUGF0aWVudC5uYW1lLmZhbWlseSkKCi8qIFJlY29tbWVuZGF0aW9uIENyaXRlcmlhIC0gTW9uaXRvcmluZyBIeXBlcnRlbnNpb24gICovCmRlZmluZSAiTWVldHMgSW5jbHVzaW9uIENyaXRlcmlhIjoKIChDb21tb24uIlBhdGllbnQgSGFzIEFib3ZlIE5vcm1hbCBCUCIgb3IgQ29tbW9uLiJQYXRpZW50IGhhcyBhIEJQIEdvYWwiKQogICAgYW5kIGV4aXN0cyBDb21tb24uIkNvbmRpdGlvbiBJbmRpY2F0aW5nIFByZWV4aXN0aW5nIEh5cGVydGVuc2lvbiIKCmRlZmluZSAiTWVldHMgRXhjbHVzaW9uIENyaXRlcmlhIjoKICBDb21tb24uIlBhdGllbnQgVW5kZXIgQWdlIDE4IgogICAgb3IgQ29tbW9uLiJQYXRpZW50IE92ZXIgQWdlIDgwIgogICAgb3IgZXhpc3RzIENvbW1vbi4iQ29uZGl0aW9uIEluZGljYXRpbmcgRW5kIFN0YWdlIFJlbmFsIERpc2Vhc2UiCiAgICBvciBleGlzdHMgQ29tbW9uLiJDb25kaXRpb24gSW5kaWNhdGluZyBQcmVnbmFuY3kiCgpkZWZpbmUgIkluIFBvcHVsYXRpb24iOgogICJNZWV0cyBJbmNsdXNpb24gQ3JpdGVyaWEiCiAgYW5kIG5vdCAiTWVldHMgRXhjbHVzaW9uIENyaXRlcmlhIgoKZGVmaW5lICJSZWNvbW1lbmRhdGlvbiI6CiAgaWYgbm90ICJJbiBQb3B1bGF0aW9uIiB0aGVuICcnCiAgZWxzZSBpZiBub3QgQ29tbW9uLiJQYXRpZW50IGhhcyBhIEJQIEdvYWwiIHRoZW4gJ0Rpc2N1c3MgdGFyZ2V0IGJsb29kIHByZXNzdXJlIGFuZCBzZXQgYSBibG9vZCBwcmVzc3VyZSBnb2FsJwogIGVsc2UgaWYgbm90IENvbW1vbi4iSGFzIEJQIFNldCIgdGhlbiAnQ29uc2lkZXIgb2J0YWluaW5nIGFkZGl0aW9uYWwgYmxvb2QgcHJlc3N1cmUgbWVhc3VyZW1lbnRzJwogIGVsc2UgaWYgKENvbW1vbi4iUGF0aWVudCBIYXMgUG90ZW50aWFsIEhUTiBTdGFnZSAyIEJQIiBvciBDb21tb24uIkJQIEF2ZXJhZ2UgaXMgQWJvdmUgR29hbCIpIHRoZW4gJ0Jsb29kIHByZXNzdXJlIGdvYWwgbm90IHJlYWNoZWQuIERpc2N1c3MgdHJlYXRtZW50IG9wdGlvbnMnCiAgZWxzZSBpZiAiUHJlc2NyaWJlIE1vbml0b3JpbmcgdG8gQ29uZmlybSBOb3QgQXQgR29hbCIgdGhlbiAnVXNlIGhvbWUgb3IgYW1idWxhdG9yeSBibG9vZCBwcmVzc3VyZSBtb25pdG9yaW5nIHRvIGNvbmZpcm0gYmxvb2QgcHJlc3N1cmUnCiAgZWxzZSBpZiBDb21tb24uIkNvbmZpcm0gbmVlZCBmb3IgUGF0aWVudCBBbWJ1bGF0b3J5IEJQIE1vbml0b3JpbmciIHRoZW4gJ1VzZSBhbWJ1bGF0b3J5IGJsb29kIHByZXNzdXJlIG1vbml0b3JpbmcgdG8gYWRkcmVzcyBibG9vZCBwcmVzc3VyZSB2YXJpYWJpbGl0eScKICBlbHNlICdQYXRpZW50IGF0IGdvYWwhJwoKZGVmaW5lICJSYXRpb25hbGUgQ29tYmluZWQgRGF0YSI6CiAgIlJhdGlvbmFsZSIgKyAnfCcgKyAiU3VnZ2VzdGlvbnMiICsgJ3wnICsgIlNlbGVjdGlvbiBCZWhhdmlvciIgKyAnfCcgKyAiTGlua3MiCgpkZWZpbmUgIlJhdGlvbmFsZSI6CiAgaWYgbm90ICJJbiBQb3B1bGF0aW9uIiB0aGVuICcnCiAgZWxzZSBpZiBub3QgQ29tbW9uLiJQYXRpZW50IGhhcyBhIEJQIEdvYWwiIHRoZW4gJ3t7I3BhdGllbnR9fVlvdSByZWNlbnRseSByZWNlaXZlZCBhIGh5cGVydGVuc2lvbiAoaGlnaCBibG9vZCBwcmVzc3VyZSkgZGlhZ25vc2lzLiAgU2V0dGluZyBnb2FscyBmb3IgbG93ZXJpbmcgeW91ciBibG9vZCBwcmVzc3VyZSBoYXMgYmVlbiBwcm92ZW4gdG8gaGVscCBvdmVyYWxsIGhlYWx0aCBhbmQgcmVkdWNlIHlvdXIgY2hhbmNlIG9mIHN0cm9rZSBvciBvdGhlciBjb25kaXRpb25zLnt7L3BhdGllbnR9fXt7I2NhcmVUZWFtfX1ObyBCUCBHb2FsIHNldDogU2V0dGluZyBhIGJsb29kIHByZXNzdXJlIGdvYWwgY2FuIGhlbHAgZW5nYWdlIHBhdGllbnRzIGFuZCBpbXByb3ZlIG91dGNvbWVzLiBGb3IgbW9zdCBwYXRpZW50cywgY2hvb3NpbmcgYSB0YXJnZXQgYmV0d2VlbiA8MTIwLTE0MC84MC05MCBpcyByZWNvbW1lbmRlZDsgbG93ZXIgdGFyZ2V0cyBtYXkgYmUgZm9yIEFTQ1ZELCBBU0NWRCByaXNrID4xMCUsIG11bHRpbW9yYmlkaXR5IChDS0QgYW5kIGRpYWJldGVzKSwgb3IgcHJlZmVyZW5jZTsgaGlnaGVyIHRhcmdldHMgbWF5IGJlIGZvciBhZ2UsIGFkdmVyc2UgZXZlbnRzLCBvciBmcmFpbHR5Lnt7L2NhcmVUZWFtfX0nCiAgZWxzZSBpZiBub3QgQ29tbW9uLiJIYXMgQlAgU2V0IiB0aGVuICd7eyNwYXRpZW50fX1Zb3VyIHJlY2VudCBibG9vZCBwcmVzc3VyZSBpcyBhYm92ZSB5b3VyIGdvYWwuICBXZSBkbyBub3QgaGF2ZSBlbm91Z2ggYmxvb2QgcHJlc3N1cmVzIHRvIHByb3ZpZGUgYSBmdWxsIHBpY3R1cmUgb2YgeW91ciBibG9vZCBwcmVzc3VyZS4gVGFraW5nIGEgZnVsbCBzZXQgb2YgYmxvb2QgcHJlc3N1cmVzIGNhbiBoZWxwLiAgV2UgY29uc2lkZXIgYSBmdWxsIHNldCB0byBiZSB+NCBpbi1vZmZpY2UgbWVhc3VyZW1lbnRzLCB+NiBob21lIG1lYXN1cmVtZW50cywgb3IgMTIgaG91cnMgb2YgYW1idWxhdG9yeSBtb25pdG9yaW5nLnt7L3BhdGllbnR9fXt7I2NhcmVUZWFtfX1QYXRpZW50IGRvZXMgbm90IGhhdmUgZW5vdWdoIGJsb29kIHByZXNzdXJlcyB0byBtYWtlIGEgc3Ryb25nIGRldGVybWluYXRpb24gb2YgY29udHJvbCBvciBkaWFnbm9zaXMuICBXZSBjb25zaWRlciBhIGZ1bGwgc2V0IHRvIGJlIG1vcmUgdGhhbiA0IGluLW9mZmljZSBtZWFzdXJlbWVudHMsIDYgaG9tZSBtZWFzdXJlbWVudHMsIG9yIDI0IGhvdXJzIG9mIGFtYnVsYXRvcnkgbW9uaXRvcmluZy57ey9jYXJlVGVhbX19JwogIGVsc2UgaWYgKENvbW1vbi4iUGF0aWVudCBIYXMgUG90ZW50aWFsIEhUTiBTdGFnZSAyIEJQIiBvciBDb21tb24uIkJQIEF2ZXJhZ2UgaXMgQWJvdmUgR29hbCIpIHRoZW4gJ3t7I3BhdGllbnR9fVlvdXIgcmVjZW50IGJsb29kIHByZXNzdXJlIGlzIGFib3ZlIHlvdXIgZ29hbC4gQ2hhbmdpbmcgeW91ciBiZWhhdmlvcnMgbWF5IGhlbHAgLSBzZWUgdGhlIGFkZGl0aW9uYWwgb3B0aW9ucy4gSW4gYWRkaXRpb24sIHBsZWFzZSBjb25zdWx0IHlvdXIgY2FyZSB0ZWFtIHRvIGNvbnNpZGVyIGFkZGl0aW9uYWwgdHJlYXRtZW50IG9wdGlvbnMuIFBsZWFzZSByZXZpZXcgdGhlIGhvbWUgYmxvb2QgcHJlc3N1cmUgbWVhc3VyZW1lbnQgcHJvdG9jb2wgcHJlc2VudGVkIG9uIHRoZSBibG9vZCBwcmVzc3VyZSBlbnRyeSBwYWdlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSB0b29sIGlzIGFjY3VyYXRlbHkgbWVhc3VyaW5nIHlvdXIgYmxvb2QgcHJlc3N1cmUue3svcGF0aWVudH19e3sjY2FyZVRlYW19fUJQIG5vdCBhdCBnb2FsLiBDb25zaWRlciBpbml0aWF0aW5nIGFudGloeXBlcnRlbnNpdmUgZHJ1ZyB0aGVyYXB5IHdpdGggYSBzaW5nbGUgYW50aWh5cGVydGluc2l2ZSBkcnVnIHdpdGggZG9zYWdlIHRpdHJhdGlvbiBhbmQgc2VxdWVudGlhbCBhZGRpdGlvbiBvZiBvdGhlciBhZ2VudHMgdG8gYWNoaWV2ZSB0aGUgdGFyZ2V0IEJQLnt7L2NhcmVUZWFtfX0nCiAgZWxzZSBpZiAiUHJlc2NyaWJlIE1vbml0b3JpbmcgdG8gQ29uZmlybSBOb3QgQXQgR29hbCIgdGhlbiAne3sjcGF0aWVudH19WW91ciByZWNlbnQgYmxvb2QgcHJlc3N1cmUgaXMgYWJvdmUgeW91ciBnb2FsIGFuZCBpcyBib3JkZXJsaW5lIGZvciBhIGh5cGVydGVuc2lvbiBkaWFnbm9zaXMuICBNb3JlIG1lYXN1cmVtZW50cyBvdmVyIGEgbG9uZ2VyIHBlcmlvZCBjb3VsZCBoZWxwLiAgV2UgY29uc2lkZXIgYSBmdWxsIHNldCB0byBiZSB+NCBpbi1vZmZpY2UgbWVhc3VyZW1lbnRzLCB+NiBob21lIG1lYXN1cmVtZW50cywgb3IgfjI0IGhvdXJzIG9mIGFtYnVsYXRvcnkgbW9uaXRvcmluZy57ey9wYXRpZW50fX17eyNjYXJlVGVhbX19UGF0aWVudCBkb2VzIG5vdCBoYXZlIGVub3VnaCBibG9vZCBwcmVzc3VyZXMgdG8gbWFrZSBhIHN0cm9uZyBkZXRlcm1pbmF0aW9uIG9mIGNvbnRyb2wgb3IgZGlhZ25vc2lzLiAgV2UgY29uc2lkZXIgYSBmdWxsIHNldCB0byBiZSBtb3JlIHRoYW4gNCBpbi1vZmZpY2UgbWVhc3VyZW1lbnRzLCA2IGhvbWUgbWVhc3VyZW1lbnRzLCBvciAyNCBob3VycyBvZiBhbWJ1bGF0b3J5IG1vbml0b3Jpbmcue3svY2FyZVRlYW19fScKICBlbHNlIGlmIENvbW1vbi4iQ29uZmlybSBuZWVkIGZvciBQYXRpZW50IEFtYnVsYXRvcnkgQlAgTW9uaXRvcmluZyIgdGhlbiAne3sjcGF0aWVudH19WW91ciByZWNlbnQgYmxvb2QgcHJlc3N1cmUgaXMgYWJvdmUgeW91ciBnb2FsIGFuZCBhcHBlYXJzIHRvIGJlIGhpZ2hseSB2YXJpYWJsZSwgd2hpY2ggY2FuIGluZGljYXRlIGEgaGVhbHRoIHJpc2suICBBc2sgeW91ciBjYXJlIHRlYW0gYWJvdXQgb3JkZXJpbmcgYW1idWxhdG9yeSBibG9vZCBwcmVzc3VyZSBtb25pdG9yaW5nIG9yIGhvdyB0byBnZXQgYmV0dGVyIG1lYXN1cmVtZW50cyBmcm9tIGhvbWUgYmxvb2QgcHJlc3N1cmUgbW9uaXRvcmluZy57ey9wYXRpZW50fX17eyNjYXJlVGVhbX19SW4gYWR1bHRzIHdpdGggc3VzcGVjdGVkIGJsb29kIHByZXNzdXJlIHZhcmlhYmlsaXR5LCB1c2UgQW1idWxhdG9yeSBCbG9vZCBQcmVzc3VyZSBNb25pdG9yaW5nIHRvIGJldHRlciB1bmRlcnN0YW5kIHJpc2suIElmIEFCUE0gaXMgbm90IGF2YWlsYWJsZSwgZGlzY3VzcyBtb3JlIGJldHRlciBwcm90b2NvbHMgZm9yIGhvbWUgYmxvb2QgcHJlc3N1cmUgbW9uaXRvcmluZy57ey9jYXJlVGVhbX19JwogIGVsc2UgJ05vIEZ1cnRoZXIgQWN0aW9uIFJlcXVpcmVkLicKCmRlZmluZSAiSW5kaWNhdG9yIFN0YXR1cyI6CiAgaWYgbm90ICJJbiBQb3B1bGF0aW9uIiB0aGVuICJJbmZvIgogIGVsc2UgaWYgbm90IENvbW1vbi4iUGF0aWVudCBoYXMgYSBCUCBHb2FsIiB0aGVuICJJbmZvIgogIGVsc2UgaWYgbm90IENvbW1vbi4iSGFzIEJQIFNldCIgdGhlbiAiSW5mbyIKICBlbHNlIGlmIChDb21tb24uIlBhdGllbnQgSGFzIFBvdGVudGlhbCBIVE4gU3RhZ2UgMiBCUCIgb3IgQ29tbW9uLiJCUCBBdmVyYWdlIGlzIEFib3ZlIEdvYWwiKSB0aGVuICJXYXJuaW5nIgogIGVsc2UgaWYgIlByZXNjcmliZSBNb25pdG9yaW5nIHRvIENvbmZpcm0gTm90IEF0IEdvYWwiIHRoZW4gIkluZm8iCiAgZWxzZSBpZiBDb21tb24uIkNvbmZpcm0gbmVlZCBmb3IgUGF0aWVudCBBbWJ1bGF0b3J5IEJQIE1vbml0b3JpbmciIHRoZW4gIkluZm8iCiAgZWxzZSAiSW5mbyIKCmRlZmluZSAiU3VnZ2VzdGlvbnMiOgogIGlmIG5vdCAiSW4gUG9wdWxhdGlvbiIgdGhlbiAnJwogIGVsc2UgaWYgbm90IENvbW1vbi4iUGF0aWVudCBoYXMgYSBCUCBHb2FsIiB0aGVuICdbIHsgImlkIjogImJwLXJhZGlvLWdvYWwiLCAibGFiZWwiOiAiQlAgR29hbCIsICJ0eXBlIjogImJwLWdvYWwiLCAicmVmZXJlbmNlcyI6eyJzeXN0ZW0iOiJodHRwcy8vY29hY2gtZGV2Lm9oc3UuZWR1IiwgImNvZGUiOiJibG9vZC1wcmVzc3VyZSJ9LCAiYWN0aW9ucyI6IFt7ImxhYmVsIjoiMTQwLzkwIn0sIHsibGFiZWwiOiIxMzAvODAifSwgeyJsYWJlbCI6IjEyMC84MCJ9XX1dJwogIGVsc2UgaWYgbm90IENvbW1vbi4iSGFzIEJQIFNldCIgdGhlbiAnWyB7ICJpZCI6ICJlbnRlci1icC1zdWdnZXN0aW9uIiwgImxhYmVsIjogIkVudGVyIEJsb29kIFByZXNzdXJlIiwgInR5cGUiOiAic3VnZ2VzdGlvbi1saW5rIiwgImFjdGlvbnMiOiBbeyJsYWJlbCI6IkNsaWNrIGhlcmUgdG8gZ28gdG8gdGhlIEhvbWUgQmxvb2QgUHJlc3N1cmUgZW50cnkgcGFnZSIsICJ1cmwiOiIvYnAtcmVhZGluZ3MifV0gfSBdJwogIGVsc2UgaWYgKENvbW1vbi4iUGF0aWVudCBIYXMgUG90ZW50aWFsIEhUTiBTdGFnZSAyIEJQIiBvciBDb21tb24uIkJQIEF2ZXJhZ2UgaXMgQWJvdmUgR29hbCIpIHRoZW4gJ1sgeyAiaWQiOiAiY29udGFjdC1zdWdnZXN0aW9uIiwgImxhYmVsIjogIkNvbnRhY3QgY2FyZSB0ZWFtIEJQIFRyZWF0bWVudCIsICJ0eXBlIjogInN1Z2dlc3Rpb24tbGluayIsICJhY3Rpb25zIjogW3sibGFiZWwiOiJDb250YWN0IHlvdXIgY2FyZSB0ZWFtIGFib3V0IG9wdGlvbnMgdG8gY29udHJvbCB5b3VyIGhpZ2ggYmxvb2QgcHJlc3N1cmUiLCAidXJsIjoiL2NvbnRhY3QifV0gfSBdJwogIGVsc2UgaWYgIlByZXNjcmliZSBNb25pdG9yaW5nIHRvIENvbmZpcm0gTm90IEF0IEdvYWwiIHRoZW4gJ1sgeyAiaWQiOiAiZW50ZXItYnAtc3VnZ2VzdGlvbiIsICJsYWJlbCI6ICJFbnRlciBCbG9vZCBQcmVzc3VyZSIsICJ0eXBlIjogInN1Z2dlc3Rpb24tbGluayIsICJhY3Rpb25zIjogW3sibGFiZWwiOiJDbGljayBoZXJlIHRvIGdvIHRvIHRoZSBIb21lIEJsb29kIFByZXNzdXJlIGVudHJ5IHBhZ2UiLCAidXJsIjoiL2JwLXJlYWRpbmdzIn1dIH0gXScKICBlbHNlIGlmIENvbW1vbi4iQ29uZmlybSBuZWVkIGZvciBQYXRpZW50IEFtYnVsYXRvcnkgQlAgTW9uaXRvcmluZyIgdGhlbiAnWyB7ImlkIjogImFtYnVsYXRvcnktc3VnZ2VzdGlvbiIsICJsYWJlbCI6ICJSZXF1ZXN0IEFtYnVsYXRvcnkgQmxvb2QgUHJlc3N1cmUiLCAidHlwZSI6ICJzdWdnZXN0aW9uLWxpbmsiLCAiYWN0aW9ucyI6IFt7ImxhYmVsIjoiQ2xpY2sgaGVyZSB0byByZXF1ZXN0IEFtYnVsYXRvcnkgQmxvb2QgUHJlc3N1cmUiLCAidXJsIjoiL2FtYnVsYXRvcnlCUCJ9XSB9IF0nCiAgZWxzZSAnJwoKZGVmaW5lICJTZWxlY3Rpb24gQmVoYXZpb3IiOgogICdhdC1tb3N0LW9uZScKCmRlZmluZSAiTGlua3MiOgogIGlmIG5vdCAiSW4gUG9wdWxhdGlvbiIgdGhlbiAnJwogIGVsc2UgaWYgbm90IENvbW1vbi4iUGF0aWVudCBoYXMgYSBCUCBHb2FsIiB0aGVuICcnCiAgZWxzZSBpZiBub3QgQ29tbW9uLiJIYXMgQlAgU2V0IiB0aGVuICdbeyJsYWJlbCI6IkJlbGwgMjAyMTogVGhlIHBvdGVudGlhbCBmb3Igb3ZlcmRpYWdub3NpcyBhbmQgdW5kZXJkaWFnbm9zaXMgYmVjYXVzZSBvZiBibG9vZCBwcmVzc3VyZSB2YXJpYWJpbGl0eTogYSBjb21wYXJpc29uIG9mIHRoZSAyMDE3IEFDQy9BSEEsIDIwMTggRVNDL0VTSCBhbmQgMjAxOSBOSUNFIGh5cGVydGVuc2lvbiBndWlkZWxpbmVzIiwgInVybCI6Imh0dHBzOi8vcHVibWVkLm5jYmkubmxtLm5paC5nb3YvMzI3NzM2NTIvIn1dJwogIGVsc2UgaWYgKENvbW1vbi4iUGF0aWVudCBIYXMgUG90ZW50aWFsIEhUTiBTdGFnZSAyIEJQIiBvciBDb21tb24uIkJQIEF2ZXJhZ2UgaXMgQWJvdmUgR29hbCIpIHRoZW4gJycKICBlbHNlIGlmICJQcmVzY3JpYmUgTW9uaXRvcmluZyB0byBDb25maXJtIE5vdCBBdCBHb2FsIiB0aGVuICdbeyJsYWJlbCI6IkJlbGwgMjAyMTogVGhlIHBvdGVudGlhbCBmb3Igb3ZlcmRpYWdub3NpcyBhbmQgdW5kZXJkaWFnbm9zaXMgYmVjYXVzZSBvZiBibG9vZCBwcmVzc3VyZSB2YXJpYWJpbGl0eTogYSBjb21wYXJpc29uIG9mIHRoZSAyMDE3IEFDQy9BSEEsIDIwMTggRVNDL0VTSCBhbmQgMjAxOSBOSUNFIGh5cGVydGVuc2lvbiBndWlkZWxpbmVzIiwgInVybCI6Imh0dHBzOi8vcHVibWVkLm5jYmkubmxtLm5paC5nb3YvMzI3NzM2NTIvIn1dJwogIGVsc2UgaWYgQ29tbW9uLiJDb25maXJtIG5lZWQgZm9yIFBhdGllbnQgQW1idWxhdG9yeSBCUCBNb25pdG9yaW5nIiB0aGVuICcnCiAgZWxzZSAnW10nCgpkZWZpbmUgIkV4Y2x1c2lvbiBSZWFzb24iOgogIGlmICJNZWV0cyBFeGNsdXNpb24gQ3JpdGVyaWEiIHRoZW4KICAgICgKICAgICAgJ1BhdGllbnQgd2FzIGV4Y2x1ZGVkIGZyb20gbW9uaXRvcmluZyBvZiBoeXBlcnRlbnNpb24gZHVlIHRvICcKICAgICAgKyAoCiAgICAgICAgICBpZiBDb21tb24uIlBhdGllbnQgVW5kZXIgQWdlIDE4IiB0aGVuICdiZWluZyB1bmRlciB0aGUgYWdlIG9mIDE4LicKICAgICAgICAgIGVsc2UgaWYgQ29tbW9uLiJQYXRpZW50IE92ZXIgQWdlIDgwIiB0aGVuICdiZWluZyBvdmVyIHRoZSBhZ2Ugb2YgODAuJwogICAgICAgICAgZWxzZSBpZiBleGlzdHMgQ29tbW9uLiJDb25kaXRpb24gSW5kaWNhdGluZyBFbmQgU3RhZ2UgUmVuYWwgRGlzZWFzZSIgdGhlbiAnaGF2aW5nIGVuZCBzdGFnZSByZW5hbCBkaXNlYXNlLicKICAgICAgICAgIGVsc2UgaWYgZXhpc3RzIENvbW1vbi4iQ29uZGl0aW9uIEluZGljYXRpbmcgUHJlZ25hbmN5IiB0aGVuICdiZWluZyBwcmVnbmFudC4nCiAgICAgICAgICBlbHNlICcnCiAgICAgICAgKQogICAgKQogIGVsc2UgJycKCmRlZmluZSAiTm8gRW50cnkgaW50byBQb3B1bGF0aW9uIjoKICBub3QgIk1lZXRzIEluY2x1c2lvbiBDcml0ZXJpYSIKICAgIGFuZCBub3QgIk1lZXRzIEV4Y2x1c2lvbiBDcml0ZXJpYSIKCmRlZmluZSAiTm8gRW50cnkgVGl0bGUiOgogIGlmIG5vdCBDb21tb24uIlBhdGllbnQgSGFzIEFib3ZlIE5vcm1hbCBCUCIgdGhlbgogICAnUGF0aWVudCBkaWQgbm90IGhhdmUgYWJvdmUgbm9ybWFsIGJsb29kIHByZXNzdXJlLicKICBlbHNlICdQYXRpZW50IGRpZCBub3QgaGF2ZSBhIHByZWV4aXN0aW5nIGh5cGVydGVuc2l2ZSBjb25kaXRpb24uJwoKZGVmaW5lICJObyBFbnRyeSBEZXNjcmlwdGlvbiI6CiAgJ05vIEZ1cnRoZXIgQWN0aW9uIFJlcXVpcmVkLicKCmRlZmluZSAiUHJlc2NyaWJlIE1vbml0b3JpbmcgdG8gQ29uZmlybSBOb3QgQXQgR29hbCI6CiAgIkluIFBvcHVsYXRpb24iIGFuZCBDb21tb24uIlBhdGllbnQgSGFzIFBvdGVudGlhbCBIVE4gU3RhZ2UgMSBCUCIKCi8qIFRFU1RTICovCmRlZmluZSAiVGVzdCBQYXRpZW50IEFnZSBvbiBCUCBSZWFkaW5nIjoKICBBZ2VJblllYXJzQXQoc3RhcnQgb2YgQ29tbW9uLiJOb3JtYWxpemUgSW50ZXJ2YWwiKENvbW1vbi4iTW9zdCBSZWNlbnQgQlAgUmVhZGluZyIuZWZmZWN0aXZlKSkKCmRlZmluZSAiVGVzdCBDb3VudCBBbGwgQlAiOgogIENvdW50KENvbW1vbi4iQmxvb2QgUHJlc3N1cmUgT2JzZXJ2YXRpb25zIGZvciBMYXN0IDIgWWVhcnMiKQoKZGVmaW5lICJUZXN0IE1vc3QgUmVjZW50IEJQIjoKICBDb21tb24uIk1vc3QgUmVjZW50IEJQIFJlYWRpbmciIEJQCiAgICByZXR1cm4gVHVwbGUgewogICAgICAiSUQiOiBCUC5pZCwKICAgICAgIkRhdGUiOiBCUC5lZmZlY3RpdmUuZW5kLAogICAgICAiU3lzdG9saWMiOiBzaW5nbGV0b24gZnJvbSAoQlAuY29tcG9uZW50IEMgd2hlcmUgQy5jb2RlIGluIENvbW1vbi4iU3lzdG9saWMgYmxvb2QgcHJlc3N1cmUiKS52YWx1ZS52YWx1ZSwKICAgICAgIkRpYXN0b2xpYyI6IHNpbmdsZXRvbiBmcm9tIChCUC5jb21wb25lbnQgQyB3aGVyZSBDLmNvZGUgaW4gQ29tbW9uLiJEaWFzdG9saWMgQmxvb2QgUHJlc3N1cmUiKS52YWx1ZS52YWx1ZQogICAgfQoKZGVmaW5lICJUZXN0IEdldCBBbGwgQlAgT2JzZXJ2YXRpb24gUmVzb3VyY2VzIjoKICAoQ29tbW9uLiJCbG9vZCBQcmVzc3VyZSBPYnNlcnZhdGlvbnMiIEJQIHNvcnQgYnkgQ29hbGVzY2UoaXNzdWVkLCBzdGFydCBvZiBDb21tb24uIk5vcm1hbGl6ZSBJbnRlcnZhbCIoZWZmZWN0aXZlKSkpIEJQCiAgICByZXR1cm4gVHVwbGUgewogICAgICAiT2JzZXJ2YXRpb24gSUQiOiBCUC5pZAogICAgICB9CgpkZWZpbmUgIlRlc3QgR2V0IEVuY291bnRlciBCUCBPYnNlcnZhdGlvbnMiOgogIGZyb20KICAgIENvbW1vbi4iQmxvb2QgUHJlc3N1cmUgT2JzZXJ2YXRpb25zIiBCUE9ic2VydmF0aW9uLAogICAgICBDb21tb24uIlBhdGllbnQgQW1idWxhdG9yeSBFbmNvdW50ZXJzIiBCUEVuY291bnRlcgogICAgICAgIHdoZXJlIEJQRW5jb3VudGVyLmNsYXNzIH4gQ29tbW9uLiJhbWJ1bGF0b3J5IgogICAgICAgICAgYW5kIENvbW1vbi4iTm9ybWFsaXplIEludGVydmFsIihCUE9ic2VydmF0aW9uLmVmZmVjdGl2ZSkgZHVyaW5nIEJQRW5jb3VudGVyLnBlcmlvZAogICAgICByZXR1cm4gVHVwbGUgewogICAgICAgICJPYnNlcnZhdGlvbiBJRCI6IEJQT2JzZXJ2YXRpb24uaWQsCiAgICAgICAgIkVuY291bnRlciBJRCI6IEJQRW5jb3VudGVyLmlkCiAgICAgICAgfQoKZGVmaW5lICJUZXN0IEdldCBNb3N0IFJlY2VudCBCUCBTZXQiOgogIENvbW1vbi4iTW9zdCBSZWNlbnQgQlAgU2V0IiBCUFNldAogICAgcmV0dXJuIFR1cGxlIHsKICAgICAgIk9ic2VydmF0aW9uIElEIjogQlBTZXQuaWQsCiAgICAgICJFbmNvdW50ZXIgUmVmZXJlbmNlIjogQlBTZXQuZW5jb3VudGVyLnJlZmVyZW5jZQogICAgICB9CgpkZWZpbmUgIlRlc3QgQWxsIEJQIExhc3QgMiBZZWFycyI6CiAgQ29tbW9uLiJCbG9vZCBQcmVzc3VyZSBPYnNlcnZhdGlvbnMgZm9yIExhc3QgMiBZZWFycyIgQlBzCiAgICByZXR1cm4gVHVwbGUgewogICAgICAiT2JzZXJ2YXRpb24gSUQiOiBCUHMuaWQsCiAgICAgICJEYXRlIjogQlBzLmVmZmVjdGl2ZS5lbmQsCiAgICAgICJFbmNvdW50ZXIgUmVmZXJlbmNlIjogQlBzLmVuY291bnRlci5yZWZlcmVuY2UKICAgICAgfQoKZGVmaW5lICJUZXN0IEdldCBBdmVyYWdlIEFsbCBCUCBMYXN0IDIgWWVhcnMiOgogIENvbW1vbi4iQXZnIEJQIihDb21tb24uIkJsb29kIFByZXNzdXJlIE9ic2VydmF0aW9ucyBmb3IgTGFzdCAyIFllYXJzIikKCmRlZmluZSAiVGVzdCBHZXQgQXZlcmFnZSBNb3N0IFJlY2VudCBCUCBTZXQiOgogIENvbW1vbi4iQXZnIEJQIihDb21tb24uIk1vc3QgUmVjZW50IEJQIFNldCIpCgpkZWZpbmUgIlRlc3QgR2V0IEJQIEdvYWwiOgogIENvbW1vbi4iQlAgZnJvbSBNb3N0IFJlY2VudCBHb2FsIiBCUEdvYWwKICAgIHJldHVybiBUdXBsZSB7IHN5c3RvbGljOiBCUEdvYWwuc3lzdG9saWMudmFsdWUsICBkaWFzdG9saWM6IEJQR29hbC5kaWFzdG9saWMudmFsdWUgfQoKZGVmaW5lICJUZXN0IEdldCBBbGwgQlAgU0JQIENvZWZmaWNpZW50IFZhcmlhYmlsaXR5IjoKICBDb21tb24uIlN5c3RvbGljIEJQIFZhcmlhYmlsaXR5IihDb21tb24uIkJsb29kIFByZXNzdXJlIE9ic2VydmF0aW9ucyBmb3IgTGFzdCAyIFllYXJzIikudmFsdWUK"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}