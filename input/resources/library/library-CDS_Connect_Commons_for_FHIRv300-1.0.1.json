{
  "resourceType": "Library",
  "id": "library-CDS-Connect-Commons-for-FHIRv300-1.0.1",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2020-04-15T11:17:00.000-08:00"
  },
  "url": "https://github.com/mattStorer/OHSUHTNU18/blob/develop/docs/FHIR%20artifacts/hypertension/Library_cds-connect-commons-for-fhirv300.json",
  "version": "1.0.1",
  "name": "CDS_Connect_Commons_for_FHIRv300",
  "title": "AHRQ CDS Connect Commons Library for FHIR v3.0.0",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/library-type",
        "code": "logic-library",
        "display": "Logic Library"
      }
    ]
  },
  "date": "2020-03-24T00:00:00-08:00",
  "publisher": "AHRQ CDS Authoring Tool",
  "description": "This library contains auto-generated logic from the AHRQ CDS Authoring Tool",
  "jurisdiction": [
    {
      "coding": [
        {
          "system": "urn:iso:std:iso:3166",
          "code": "US",
          "display": "United States of America"
        }
      ]
    }
  ],
  "topic": [
    {
      "text": "CDS Authoring Tool Commons for FHIR v3.0.0"
    }
  ],
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-FHIRHelpers-3.0.0"
      }
    },
    {
      "type": "depends-on",
      "url": "http://hl7.org/fhir|3.0.0"
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}
