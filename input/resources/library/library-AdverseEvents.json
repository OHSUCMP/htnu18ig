{
  "resourceType": "Library",
  "id": "library-AdverseEvents",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/ohsu/htnu18ig/Library/AdverseEvents",
  "version": "0.1",
  "name": "AdverseEvents",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Common",
    "resource": "http://fhir.org/guides/ohsu/htnu18ig/Library/OHSUHTNCommon|0.1"
  }, {
    "type": "depends-on",
    "display": "Code system AdverseEventOutcomeCodeSystem",
    "resource": "http://terminology.hl7.org/CodeSystem/adverse-event-outcome"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Untreated Recommendation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Untreated Rationale",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Adverse Events",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "AdverseEvent"
  }, {
    "name": "Untreated Adverse Events",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "AdverseEvent"
  }, {
    "name": "Untreated Suggestions",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Selection Behavior",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Links",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Untreated Rationale Combined Data",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Untreated Indicator Status",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Treated Indicator Status",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Treated Recommendation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Treated Rationale",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Treated Adverse Events",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "AdverseEvent"
  }, {
    "name": "Treated Suggestions",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Treated Rationale Combined Data",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Untreated Adverse Events Action Path",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Treated Adverse Events Action Path",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "AdverseEvent",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/AdverseEvent" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBZHZlcnNlRXZlbnRzIHZlcnNpb24gJzAuMScKCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJyBjYWxsZWQgRkhJUkhlbHBlcnMKaW5jbHVkZSBPSFNVSFROQ29tbW9uIHZlcnNpb24gJzAuMScgY2FsbGVkIENvbW1vbgoKY29kZXN5c3RlbSAiQWR2ZXJzZUV2ZW50T3V0Y29tZUNvZGVTeXN0ZW0iOiAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hZHZlcnNlLWV2ZW50LW91dGNvbWUnCmNvZGUgIm9uZ29pbmciOiAnb25nb2luZycgZnJvbSAiQWR2ZXJzZUV2ZW50T3V0Y29tZUNvZGVTeXN0ZW0iIGRpc3BsYXkgJ09uZ29pbmcnCmNvZGUgInJlc29sdmVkIjogJ3Jlc29sdmVkJyBmcm9tICJBZHZlcnNlRXZlbnRPdXRjb21lQ29kZVN5c3RlbSIgZGlzcGxheSAnUmVzb2x2ZWQnCgpjb250ZXh0IFBhdGllbnQKCmRlZmluZSBmdW5jdGlvbiAiQUUgRXZlbnQgRGlzcGxheSIoY29kZXMgTGlzdDxGSElSLkNvZGluZz4pOgogIEZpcnN0KGNvZGVzIEMgd2hlcmUgQy5jb2RlICE9ICdjb2FjaC1hZHZlcnNlLWV2ZW50JykuZGlzcGxheQoKZGVmaW5lIGZ1bmN0aW9uICJBRSBTdWdnZXN0aW9uIFN0cmluZyIoYWVzIExpc3Q8RkhJUi5BZHZlcnNlRXZlbnQ+KToKICBhZXMgQUUgcmV0dXJuICd7ImlkIjogIicgKyBBRS5pZCArICciLCAidHlwZSI6ICJhZHZlcnNlLWV2ZW50IiwgImxhYmVsIjogIicgKyAiQUUgRXZlbnQgRGlzcGxheSIoQUUuZXZlbnQuY29kaW5nKSArICcifScKCmRlZmluZSBmdW5jdGlvbiAiQ29udGFjdCBTdWdnZXN0aW9uIFN0cmluZyIoYWVzIExpc3Q8RkhJUi5BZHZlcnNlRXZlbnQ+KToKICBhZXMgQUUgcmV0dXJuICJBRSBFdmVudCBEaXNwbGF5IihBRS5ldmVudC5jb2RpbmcpCgpkZWZpbmUgIlVudHJlYXRlZCBSZWNvbW1lbmRhdGlvbiI6CiAgJ0NvbnNpZGVyIGFkanVzdGluZyB0cmVhdG1lbnQuJwoKZGVmaW5lICJVbnRyZWF0ZWQgUmF0aW9uYWxlIENvbWJpbmVkIERhdGEiOgogICJVbnRyZWF0ZWQgUmF0aW9uYWxlIiArICd8JyArICJVbnRyZWF0ZWQgU3VnZ2VzdGlvbnMiICsgJ3wnICsgIlNlbGVjdGlvbiBCZWhhdmlvciIgKyAnfCcgKyAiTGlua3MiCgpkZWZpbmUgIlVudHJlYXRlZCBSYXRpb25hbGUiOgogICdZb3UgcmVjZW50bHkgaGFkIGEgY29uZGl0aW9uIHJlY29yZGVkIHRoYXQgbWF5IGJlIGFuIGFkdmVyc2UgZXZlbnQgZnJvbSBoaWdoIGJsb29kIHByZXNzdXJlIHRyZWF0bWVudC4gQ29udGFjdGluZyB5b3VyIGNhcmUgdGVhbSB3aWxsIGhlbHAgdGhlbSByZXNvbHZlIGl0LicKCmRlZmluZSAiVW50cmVhdGVkIFN1Z2dlc3Rpb25zIjoKICAnW3sgImlkIjogImNvbnRhY3Qtc3VnZ2VzdGlvbiIsICJsYWJlbCI6ICJDb250YWN0IGNhcmUgdGVhbSIsICJ0eXBlIjogInN1Z2dlc3Rpb24tbGluayIsICJhY3Rpb25zIjogW3sibGFiZWwiOiJDb250YWN0IHlvdXIgY2FyZSB0ZWFtIGFib3V0IHlvdXIgY29uZGl0aW9uKHMpOiAnICsgQ29tYmluZSgiQ29udGFjdCBTdWdnZXN0aW9uIFN0cmluZyIoIlVudHJlYXRlZCBBZHZlcnNlIEV2ZW50cyIpLCAnLCAnKSArICciICwgInVybCI6Ii9jb250YWN0P3Rva2VuPXVudHJlYXRlZC1hZHZlcnNlLWV2ZW50In1dIH0sJyArCiAgQ29tYmluZSgiQUUgU3VnZ2VzdGlvbiBTdHJpbmciKCJVbnRyZWF0ZWQgQWR2ZXJzZSBFdmVudHMiKSwgJywnKSArCiAgJ10nCgpkZWZpbmUgIlVudHJlYXRlZCBJbmRpY2F0b3IgU3RhdHVzIjoKICAnY3JpdGljYWwnCgpkZWZpbmUgIlRyZWF0ZWQgSW5kaWNhdG9yIFN0YXR1cyI6CiAgJ3dhcm5pbmcnCgpkZWZpbmUgIlNlbGVjdGlvbiBCZWhhdmlvciI6CiAgJ2F0LW1vc3Qtb25lJwoKZGVmaW5lICJMaW5rcyI6CiAgJycKCmRlZmluZSAiVHJlYXRlZCBSZWNvbW1lbmRhdGlvbiI6CiAgJ1NlZSBjYXJlIHRlYW0gYW5kIGRpc2N1c3MgdHJlYXRtZW50IGZvciBoeXBlcnRlbnNpb24gaWYgZXZlbnQgcmVjdXJzLicKCmRlZmluZSAiVHJlYXRlZCBSYXRpb25hbGUgQ29tYmluZWQgRGF0YSI6CiAgIlRyZWF0ZWQgUmF0aW9uYWxlIiArICd8JyArICJUcmVhdGVkIFN1Z2dlc3Rpb25zIiArICd8JyArICJTZWxlY3Rpb24gQmVoYXZpb3IiICsgJ3wnICsgIkxpbmtzIgoKZGVmaW5lICJUcmVhdGVkIFJhdGlvbmFsZSI6CiAgJ1lvdSByZWNlbnRseSBoYWQgYSBjb25kaXRpb24gcmVjb3JkZWQgdGhhdCBtYXkgYmUgYW4gYWR2ZXJzZSBldmVudCBmcm9tIGhpZ2ggYmxvb2QgcHJlc3N1cmUgdHJlYXRtZW50OyB5b3Ugbm90ZWQgdG8gdXMgdGhhdCB0aGlzIHdhcyBhbHJlYWR5IHRyZWF0ZWQsIGJ1dCBpZiBpdCByZWN1cnMgb3IgZG9lc25cJ3QgZ2V0IGJldHRlciwgcGxlYXNlIGNvbnRhY3QgeW91ciBjYXJlIHRlYW0uJwoKZGVmaW5lICJUcmVhdGVkIFN1Z2dlc3Rpb25zIjoKICAnWyB7ICJpZCI6ICJjb250YWN0LXN1Z2dlc3Rpb24iLCAibGFiZWwiOiAiQ29udGFjdCBjYXJlIHRlYW0iLCAidHlwZSI6ICJzdWdnZXN0aW9uLWxpbmsiLCAiYWN0aW9ucyI6IFt7ImxhYmVsIjoiQ29udGFjdCB5b3VyIGNhcmUgdGVhbSBhYm91dCB5b3VyIGNvbmRpdGlvbihzKTogJyArIENvbWJpbmUoIkNvbnRhY3QgU3VnZ2VzdGlvbiBTdHJpbmciKCJUcmVhdGVkIEFkdmVyc2UgRXZlbnRzIiksICcsICcpICsgJyIgLCAidXJsIjoiL2NvbnRhY3Q/dG9rZW49dHJlYXRlZC1hZHZlcnNlLWV2ZW50In1dIH0gXScKCi8vIE9ubHkgZ2V0IHRoZSBhZHZlcnNlIGV2ZW50cyBjb2RlZCBmcm9tIHRoZSBhcHBsaWNhdGlvbgpkZWZpbmUgIkFkdmVyc2UgRXZlbnRzIjoKICBbQWR2ZXJzZUV2ZW50XSBBRSB3aGVyZSBBRS5ldmVudC5jb2RpbmcuY29kZSBjb250YWlucyAnY29hY2gtYWR2ZXJzZS1ldmVudCcKCmRlZmluZSAiVHJlYXRlZCBBZHZlcnNlIEV2ZW50cyI6CiAgIkFkdmVyc2UgRXZlbnRzIiBBRSB3aGVyZSBBRS5vdXRjb21lIH4gInJlc29sdmVkIgoKZGVmaW5lICJVbnRyZWF0ZWQgQWR2ZXJzZSBFdmVudHMiOgogICJBZHZlcnNlIEV2ZW50cyIgQUUgd2hlcmUgQUUub3V0Y29tZSB+ICJvbmdvaW5nIgoKZGVmaW5lICJVbnRyZWF0ZWQgQWR2ZXJzZSBFdmVudHMgQWN0aW9uIFBhdGgiOgogIGV4aXN0cyAiVW50cmVhdGVkIEFkdmVyc2UgRXZlbnRzIgoKZGVmaW5lICJUcmVhdGVkIEFkdmVyc2UgRXZlbnRzIEFjdGlvbiBQYXRoIjoKICBleGlzdHMgIlRyZWF0ZWQgQWR2ZXJzZSBFdmVudHMiCg=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}